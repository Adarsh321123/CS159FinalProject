ATTEMPT 1


[2024-05-26 23:03:05,908] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Cloning https://github.com/loganrjmurphy/LeanEuclid.git
Repo name: loganrjmurphy/LeanEuclid
Cloning into 'loganrjmurphy/LeanEuclid'...
Cloning https://github.com/bjoernkjoshanssen/jla.git
Repo name: bjoernkjoshanssen/jla
Cloning into 'bjoernkjoshanssen/jla'...
Failed to clone bjoernkjoshanssen/jla because of HTTP Error 404: Not Found
Cloning https://github.com/irene622/lean_ext.git
Repo name: irene622/lean_ext
Cloning into 'irene622/lean_ext'...
Failed to clone irene622/lean_ext because of HTTP Error 404: Not Found
Cloning https://github.com/david-christiansen/ssft24.git
Repo name: david-christiansen/ssft24
Cloning into 'david-christiansen/ssft24'...
2024-05-26 23:03:28.434 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/david-christiansen/ssft24', commit='f1d9044a3213169c2e00ce45a02ad6977bf042f1') relies on an unsupported Lean version: 3de60bb1f63efe9bb56380f911f86980b9f3332c
Cloning https://github.com/chanind/mathlib-changelog.git
Repo name: chanind/mathlib-changelog
Cloning into 'chanind/mathlib-changelog'...
Failed to clone chanind/mathlib-changelog because of HTTP Error 404: Not Found
Cloning https://github.com/Adarsh321123/new-new-version-test.git
Repo name: Adarsh321123/new-new-version-test
Cloning into 'Adarsh321123/new-new-version-test'...
Cloning https://github.com/ljtc/Lean.git
Repo name: ljtc/Lean
Cloning into 'ljtc/Lean'...
Cloning https://github.com/lean-ja/fp-lean-ja.git
Repo name: lean-ja/fp-lean-ja
Cloning into 'lean-ja/fp-lean-ja'...
Failed to clone lean-ja/fp-lean-ja because of HTTP Error 404: Not Found
Cloning https://github.com/FLDutchmann/selberg-sieve4.git
Repo name: FLDutchmann/selberg-sieve4
Cloning into 'FLDutchmann/selberg-sieve4'...
Found 5 repositories
Processing loganrjmurphy/LeanEuclid
2024-05-26 23:04:33.806 | INFO     | __main__:retrieve_proof:236 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc2\n'}
2024-05-26 23:04:33.806 | INFO     | __main__:retrieve_proof:238 - lean version v: v4.8.0-rc2
2024-05-26 23:04:33.806 | INFO     | __main__:retrieve_proof:239 - is supported: True
2024-05-26 23:04:33.806 | INFO     | __main__:retrieve_proof:245 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:04:33.806 | INFO     | __main__:retrieve_proof:251 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:04:33.838 | INFO     | __main__:retrieve_proof:252 - lean --version: Lean (version 4.8.0-rc2, x86_64-unknown-linux-gnu, commit 873ef2d894af, Release)

2024-05-26 23:04:33.839 | INFO     | __main__:retrieve_proof:253 - repo: LeanGitRepo(url='https://github.com/loganrjmurphy/LeanEuclid', commit='09ade8f56e94a1dd60fbf9570cc09cf6968c6b45')
2024-05-26 23:04:33.954 | INFO     | lean_dojo.data_extraction.trace:get_traced_repo_path:79 - Tracing LeanGitRepo(url='https://github.com/loganrjmurphy/LeanEuclid', commit='09ade8f56e94a1dd60fbf9570cc09cf6968c6b45')
2024-05-26 23:04:35.381 | INFO     | __main__:main:165 - Building LeanEuclid
info: mathlib: cloning https://github.com/leanprover-community/mathlib4 to '././.lake/packages/mathlib'
info: smt: cloning https://github.com/yangky11/lean-smt.git to '././.lake/packages/smt'
info: batteries: cloning https://github.com/leanprover-community/batteries to '././.lake/packages/batteries'
info: Qq: cloning https://github.com/leanprover-community/quote4 to '././.lake/packages/Qq'
info: aesop: cloning https://github.com/leanprover-community/aesop to '././.lake/packages/aesop'
info: proofwidgets: cloning https://github.com/leanprover-community/ProofWidgets4 to '././.lake/packages/proofwidgets'
info: Cli: cloning https://github.com/leanprover/lean4-cli to '././.lake/packages/Cli'
info: importGraph: cloning https://github.com/leanprover-community/import-graph.git to '././.lake/packages/importGraph'
✔ [1/787] Fetched proofwidgets:optRelease
✔ [2/787] Built SystemE.Theory.Sorts.Primitives
✔ [3/787] Built Mathlib.Mathport.Rename
✔ [4/787] Built Mathlib.Init.Data.Nat.Notation
✔ [5/787] Built Batteries.CodeAction.Attr
✔ [6/787] Built Batteries.CodeAction.Basic
✔ [7/787] Built Batteries.Lean.Position
✔ [8/787] Built Batteries.CodeAction.Deprecated
✔ [9/787] Built Batteries.Data.List.Init.Lemmas
✔ [10/787] Built Mathlib.Data.Array.Defs
✔ [11/787] Built Mathlib.Util.MemoFix
✔ [12/787] Built Mathlib.Lean.Expr.ReplaceRec
✔ [13/787] Built Mathlib.Lean.EnvExtension
✔ [14/787] Built Batteries.Tactic.OpenPrivate
✔ [15/787] Built Mathlib.Lean.Meta.Simp
✔ [16/787] Built Batteries.Lean.NameMapAttribute
✔ [17/787] Built Batteries.Tactic.Lint.Basic
✔ [18/787] Built Batteries.Tactic.Lint.Misc
✔ [19/787] Built Batteries.Util.LibraryNote
✔ [20/787] Built Batteries.Tactic.Lint.Simp
✔ [21/787] Built Batteries.Tactic.Lint.TypeClass
✔ [22/787] Built Batteries.Tactic.Lint.Frontend
✔ [23/787] Built Batteries.Tactic.Lint
✔ [24/787] Built Batteries.Lean.Meta.Basic
✔ [25/787] Built Batteries.Tactic.Init
✔ [26/787] Built Mathlib.Tactic.Eqns
✔ [27/787] Built Batteries.Lean.Expr
✔ [28/787] Built Mathlib.Tactic.Simps.NotationClass
✔ [29/787] Built Batteries.Data.Array.Match
✔ [30/787] Built Batteries.Data.String.Basic
✔ [31/787] Built Batteries.Lean.Name
✔ [32/787] Built Batteries.Data.Nat.Gcd
✔ [33/787] Built Batteries.Lean.Float
✔ [34/787] Built Mathlib.Tactic.Lemma
✔ [35/787] Built Mathlib.Tactic.TypeStar
✔ [36/787] Built Mathlib.Util.AssertExists
✔ [37/787] Built Batteries.Classes.BEq
✔ [38/787] Built Batteries.Classes.Cast
✔ [39/787] Built Batteries.Tactic.SeqFocus
✔ [40/787] Built Batteries.Classes.Order
✔ [41/787] Built Batteries.Classes.SatisfiesM
✔ [42/787] Built Batteries.CodeAction.Misc
✔ [43/787] Built Batteries.CodeAction
✔ [44/787] Built Batteries.Control.ForInStep.Basic
✔ [45/787] Built Batteries.Control.ForInStep.Lemmas
✔ [46/787] Built Batteries.Control.ForInStep
✔ [47/787] Built Batteries.Control.Lemmas
✔ [48/787] Built Batteries.Data.MLList.Basic
✔ [49/787] Built Batteries.Control.Nondet.Basic
✔ [50/787] Built Batteries.Data.List.Init.Attach
✔ [51/787] Built Batteries.Data.Array.Init.Lemmas
✔ [52/787] Built Batteries.Data.Array.Basic
✔ [53/787] Built Batteries.Util.ProofWanted
✔ [54/787] Built Batteries.Data.Array.Monadic
✔ [55/787] Built Batteries.Data.UInt
✔ [56/787] Built Batteries.Data.Char
✔ [57/787] Built Batteries.Data.DList
✔ [58/787] Built Batteries.Data.Fin.Basic
✔ [59/787] Built Batteries.Data.Fin.Lemmas
✔ [60/787] Built Batteries.Data.Fin
✔ [61/787] Built Batteries.Data.Nat.Basic
✔ [62/787] Built Batteries.Data.LazyList
✔ [63/787] Built Batteries.Data.MLList.Heartbeats
✔ [64/787] Built Batteries.Data.PairingHeap
✔ [65/787] Built Batteries.Data.Sum.Basic
✔ [66/787] Built Batteries.Lean.TagAttribute
✔ [67/787] Built Batteries.Lean.AttributeExtra
✔ [68/787] Built Batteries.Lean.Delaborator
✔ [69/787] Built Batteries.Lean.Except
✔ [70/787] Built Batteries.Lean.HashMap
✔ [71/787] Built Batteries.Lean.HashSet
✔ [72/787] Built Batteries.Lean.IO.Process
✔ [73/787] Built Batteries.Lean.Json
✔ [74/787] Built Batteries.Lean.Meta.AssertHypotheses
✔ [75/787] Built Batteries.Lean.Meta.Clear
✔ [76/787] Built Batteries.Lean.Meta.Expr
✔ [77/787] Built Batteries.Lean.PersistentHashMap
✔ [78/787] Built Batteries.Lean.Meta.Inaccessible
✔ [79/787] Built Batteries.Lean.Meta.InstantiateMVars
✔ [80/787] Built Batteries.Lean.MonadBacktrack
✔ [81/787] Built Batteries.Lean.Meta.SavedState
✔ [82/787] Built Batteries.Lean.Meta.Simp
✔ [83/787] Built Batteries.Lean.Meta.UnusedNames
✔ [84/787] Built Batteries.Lean.NameMap
✔ [85/787] Built Batteries.Lean.PersistentHashSet
✔ [86/787] Built Batteries.Lean.SMap
✔ [87/787] Built Batteries.Lean.Syntax
✔ [88/787] Built Batteries.Lean.Util.EnvSearch
✔ [89/787] Built Batteries.Lean.Util.Path
✔ [90/787] Built Batteries.Tactic.Unreachable
✔ [91/787] Built Batteries.Linter.UnreachableTactic
✔ [92/787] Built Batteries.Linter.UnnecessarySeqFocus
✔ [93/787] Built Batteries.Linter
✔ [94/787] Built Batteries.Tactic.Basic
✔ [95/787] Built Batteries.Tactic.Case
✔ [96/787] Built Batteries.Tactic.Classical
✔ [97/787] Built Batteries.Tactic.Congr
✔ [98/787] Built Batteries.Tactic.Exact
✔ [99/787] Built Batteries.Tactic.Instances
✔ [100/787] Built Batteries.Tactic.NoMatch
✔ [101/787] Built Batteries.Tactic.PrintDependents
✔ [102/787] Built Batteries.Tactic.PrintPrefix
✔ [103/787] Built Batteries.Tactic.ShowUnused
✔ [104/787] Built Batteries.Tactic.SqueezeScope
✔ [105/787] Built Batteries.Tactic.Where
✔ [106/787] Built Batteries.Test.Internal.DummyLabelAttr
✔ [107/787] Built Batteries.Util.CheckTactic
✔ [108/787] Built Batteries.Util.ExtendedBinder
✔ [109/787] Built Batteries.Util.Pickle
✔ [110/787] Built Batteries.WF
✔ [111/787] Built Mathlib.Tactic.PPWithUniv
✔ [112/787] Built Mathlib.Tactic.ExtendDoc
✔ [113/787] Built Mathlib.Tactic.AdaptationNote
✔ [114/787] Built Mathlib.Tactic.Attr.Register
✔ [115/787] Built Mathlib.Init.Set
✔ [116/787] Built Mathlib.Mathport.Attributes
✔ [117/787] Built Mathlib.Tactic.ProjectionNotation
✔ [118/787] Built Mathlib.Tactic.Spread
✔ [119/787] Built Aesop.Check
✔ [120/787] Built Aesop.Nanos
✔ [121/787] Built Aesop.Util.UnionFind
✔ [122/787] Built Aesop.Options.Public
✔ [123/787] Built Aesop.Options.Internal
✔ [124/787] Built Aesop.Options
✔ [125/787] Built Aesop.Percent
✔ [126/787] Built Aesop.RuleSet.Name
✔ [127/787] Built Aesop.ElabM
✔ [128/787] Built Aesop.Frontend.Basic
✔ [129/787] Built Aesop.RuleTac.ElabRuleTerm
✔ [130/787] Built Aesop.Constants
✔ [131/787] Built Aesop.Exception
✔ [132/787] Built Mathlib.Util.CompileInductive
✔ [133/787] Built Mathlib.Init.Data.Ordering.Basic
✔ [134/787] Built Mathlib.Tactic.GCongr.ForwardAttr
✔ [135/787] Built Mathlib.Tactic.Conv
✔ [136/787] Built Mathlib.Tactic.SimpRw
✔ [137/787] Built Mathlib.Tactic.Inhabit
✔ [138/787] Built Mathlib.Data.Option.Defs
✔ [139/787] Built Mathlib.Init.Data.Sigma.Basic
✔ [140/787] Built Mathlib.Lean.Elab.Term
✔ [141/787] Built Mathlib.Lean.PrettyPrinter.Delaborator
✔ [142/787] Built Mathlib.Util.WithWeakNamespace
✔ [143/787] Built Mathlib.Tactic.Coe
✔ [144/787] Built Mathlib.Tactic.Substs
✔ [145/787] Built Qq.ForLean.ReduceEval
✔ [146/787] Built Qq.ForLean.ToExpr
✔ [147/787] Built Qq.Typ
✔ [148/787] Built Mathlib.Util.Tactic
✔ [149/787] Built Mathlib.Tactic.CasesM
✔ [150/787] Built Qq.ForLean.Do
✔ [151/787] Built Qq.SortLocalDecls
✔ [152/787] Built ImportGraph.RequiredModules
✔ [153/787] Built ImportGraph.Imports
✔ [154/787] Built ProofWidgets.Compat
✔ [155/787] Built ProofWidgets.Component.Basic
✔ [156/787] Built ProofWidgets.Util
✔ [157/787] Built ProofWidgets.Component.MakeEditLink
✔ [158/787] Built ProofWidgets.Cancellable
✔ [159/787] Built ProofWidgets.Component.Panel.Basic
✔ [160/787] Built ProofWidgets.Component.Panel.GoalTypePanel
✔ [161/787] Built ProofWidgets.Component.Recharts
✔ [162/787] Built Mathlib.Tactic.Linter.Lint
✔ [163/787] Built Mathlib.Tactic.ApplyCongr
✔ [164/787] Built Mathlib.Lean.Meta.Basic
✔ [165/787] Built Mathlib.Tactic.ApplyAt
✔ [166/787] Built Mathlib.Tactic.ApplyWith
✔ [167/787] Built Mathlib.Tactic.Check
✔ [168/787] Built Mathlib.Tactic.ClearExclamation
✔ [169/787] Built Mathlib.Tactic.ClearExcept
✔ [170/787] Built Mathlib.Tactic.Clear_
✔ [171/787] Built Mathlib.Tactic.Constructor
✔ [172/787] Built Mathlib.Tactic.ToLevel
✔ [173/787] Built Mathlib.Tactic.Existsi
✔ [174/787] Built Mathlib.Tactic.ExtractGoal
✔ [175/787] Built Mathlib.Tactic.FailIfNoProgress
✔ [176/787] Built Mathlib.Tactic.GuardGoalNums
✔ [177/787] Built Mathlib.Tactic.GuardHypNums
✔ [178/787] Built Mathlib.Tactic.HigherOrder
✔ [179/787] Built Mathlib.Tactic.InferParam
✔ [180/787] Built Mathlib.Tactic.Linter.AttributeInstanceIn
✔ [181/787] Built Mathlib.Tactic.Linter.HashCommandLinter
✔ [182/787] Built Mathlib.Tactic.Linter
✔ [183/787] Built Mathlib.Tactic.NthRewrite
✔ [184/787] Built Mathlib.Tactic.Observe
✔ [185/787] Built Mathlib.Tactic.Recover
✔ [186/787] Built Mathlib.Tactic.Relation.Rfl
✔ [187/787] Built Mathlib.Tactic.Rename
✔ [188/787] Built Mathlib.Tactic.Set
✔ [189/787] Built Mathlib.Tactic.SimpIntro
✔ [190/787] Built Mathlib.Tactic.SuccessIfFailWithMsg
✔ [191/787] Built Mathlib.Tactic.SudoSetOption
✔ [192/787] Built Mathlib.Tactic.SwapVar
✔ [193/787] Built Mathlib.Util.WhatsNew
✔ [194/787] Built Mathlib.Tactic.Trace
✔ [195/787] Built Mathlib.Tactic.TypeCheck
✔ [196/787] Built Mathlib.Tactic.UnsetOption
✔ [197/787] Built Mathlib.Tactic.Widget.SelectInsertParamsClass
✔ [198/787] Built Mathlib.Init.Control.Combinators
✔ [199/787] Built Mathlib.Tactic.Monotonicity.Attr
✔ [200/787] Built Mathlib.Data.Bracket
✔ [201/787] Built Mathlib.Control.ULift
✔ [202/787] Built Mathlib.Tactic.HaveI
✔ [203/787] Built Mathlib.Util.AtomM
✔ [204/787] Built Mathlib.Tactic.TryThis
✔ [205/787] Built Smt.Data.Sexp
✔ [206/787] Built Batteries.Data.List.Init.Lemmas:c.o
✔ [207/787] Built Batteries.Data.List.Init.Lemmas:dynlib
✔ [208/787] Built Batteries.Lean.Position:c.o
✔ [209/787] Built Batteries.Lean.Position:dynlib
✔ [210/787] Built Batteries.Data.Nat.Basic:c.o
✔ [211/787] Built Batteries.Data.Nat.Basic:dynlib
✔ [212/787] Built Batteries.Classes.SatisfiesM:c.o
✔ [213/787] Built Batteries.Classes.SatisfiesM:dynlib
✔ [214/787] Built Batteries.Data.Array.Monadic:c.o
✔ [215/787] Built Batteries.Classes.BEq:c.o
✔ [216/787] Built Batteries.Classes.BEq:dynlib
✔ [217/787] Built Batteries.Control.ForInStep.Basic:c.o
✔ [218/787] Built Batteries.Control.ForInStep.Basic:dynlib
✔ [219/787] Built Batteries.Control.ForInStep.Lemmas:c.o
✔ [220/787] Built Batteries.Data.List.Init.Attach:c.o
✔ [221/787] Built Batteries.Data.Array.Init.Lemmas:c.o
✔ [222/787] Built Batteries.Data.Array.Init.Lemmas:dynlib
✔ [223/787] Built Batteries.Tactic.Alias
✔ [224/787] Built Batteries.Data.Array.Monadic:dynlib
✔ [225/787] Built Batteries.Data.List.Init.Attach:dynlib
✔ [226/787] Built Mathlib.Tactic.Hint
✔ [227/787] Built Batteries.CodeAction.Attr:c.o
✔ [228/787] Built Batteries.Control.ForInStep.Lemmas:dynlib
✔ [229/787] Built Batteries.Tactic.Init:c.o
✔ [230/787] Built Batteries.Util.ProofWanted:c.o
✔ [231/787] Built SystemE.Meta.Tactics.Formalization.Export
✔ [232/787] Built Batteries.Data.Int.Order
✔ [233/787] Built Batteries.Data.Option.Lemmas
✔ [234/787] Built Aesop.Util.EqualUpToIds
✔ [235/787] Built Mathlib.Util.CountHeartbeats
✔ [236/787] Built Batteries.Tactic.SeqFocus:c.o
✔ [237/787] Built Batteries.Util.ProofWanted:dynlib
✔ [238/787] Built Batteries.Data.BitVec.Lemmas
✔ [239/787] Built Mathlib.Tactic.ScopedNS
✔ [240/787] Built Batteries.CodeAction.Attr:dynlib
✔ [241/787] Built Batteries.Lean.Meta.Basic:c.o
✔ [242/787] Built Batteries.Data.Array.Basic:c.o
✔ [243/787] Built Batteries.Data.Bool
✔ [244/787] Built Smt.Data.Sexp:c.o
✔ [245/787] Built Batteries.Lean.Meta.Basic:dynlib
✔ [246/787] Built Batteries.Data.Array.Basic:dynlib
✔ [247/787] Built Batteries.Tactic.SeqFocus:dynlib
✔ [248/787] Built Batteries.Logic
✔ [249/787] Built Batteries.Data.Int.DivMod
✔ [250/787] Built Batteries.Data.Option
⚠ [251/787] Built SystemE.Meta.Tactics.Util
warning: ././././SystemE/Meta/Tactics/Util.lean:86:34: `Lean.Widget.UserWidgetDefinition` has been deprecated, use `Lean.Widget.Module` instead
warning: ././././SystemE/Meta/Tactics/Util.lean:118:4: `Lean.Widget.saveWidgetInfo` has been deprecated, use `Lean.Widget.savePanelWidgetInfo` instead
✔ [252/787] Built Smt.Data.Sexp:dynlib
✔ [253/787] Built Batteries.Tactic.Init:dynlib
✔ [254/787] Built Mathlib.Init.Data.Int.Basic
✔ [255/787] Built Batteries.Data.BitVec
✔ [256/787] Built Batteries.Data.Nat.Lemmas
✔ [257/787] Built Batteries.CodeAction.Deprecated:c.o
✔ [258/787] Built SystemE.Meta.Smt.ELang
✔ [259/787] Built Batteries.CodeAction.Basic:c.o
✔ [260/787] Built Batteries.Data.Int.Lemmas
✔ [261/787] Built Batteries.CodeAction.Basic:dynlib
✔ [262/787] Built Batteries.Data.Nat.Lemmas:c.o
✔ [263/787] Built Batteries.Data.Nat
✔ [264/787] Built Mathlib.Init.Data.Quot
✔ [265/787] Built Mathlib.Tactic.Attr.Core
✔ [266/787] Built Batteries.CodeAction.Deprecated:dynlib
✔ [267/787] Built Mathlib.Tactic.Variable
✔ [268/787] Built SystemE.Meta.Tactics.Intros
✔ [269/787] Built Batteries.Data.Int
✔ [270/787] Built Smt.Dsl.Sexp
✔ [271/787] Built Mathlib.Tactic.DeriveToExpr
✔ [272/787] Built Batteries.Data.Sum.Lemmas
✔ [273/787] Built Batteries.Data.Array.Merge
✔ [274/787] Built Smt.Dsl.Sexp:c.o
✔ [275/787] Built Batteries.Data.Sum
✔ [276/787] Built Smt.Dsl.Sexp:dynlib
✔ [277/787] Built Batteries.Tactic.Alias:c.o
✔ [278/787] Built Batteries.Data.Rat.Basic
✔ [279/787] Built Batteries.Tactic.Alias:dynlib
✔ [280/787] Built Batteries.Lean.Meta.DiscrTree
✔ [281/787] Built Aesop.Util.UnorderedArraySet
✔ [282/787] Built Mathlib.Tactic.ToExpr
✔ [283/787] Built Batteries.Data.Nat.Lemmas:dynlib
✔ [284/787] Built ProofWidgets.Data.Html
✔ [285/787] Built Batteries.Classes.RatCast
✔ [286/787] Built Mathlib.Util.Delaborators
✔ [287/787] Built Mathlib.Tactic.Use
✔ [288/787] Built Mathlib.Tactic.HelpCmd
✔ [289/787] Built Smt.Term
✔ [290/787] Built Batteries.Data.BinomialHeap.Basic
✔ [291/787] Built Batteries.Util.Cache
✔ [292/787] Built ProofWidgets.Component.FilterDetails
✔ [293/787] Built ProofWidgets.Component.HtmlDisplay
✔ [294/787] Built ProofWidgets.Component.OfRpcMethod
✔ [295/787] Built ProofWidgets.Component.PenroseDiagram
✔ [296/787] Built Batteries.Data.BinomialHeap.Lemmas
✔ [297/787] Built Mathlib.Data.Rat.Init
✔ [298/787] Built Smt.Term:c.o
✔ [299/787] Built Batteries.Data.RBMap.Basic
✔ [300/787] Built Smt.Term:dynlib
✔ [301/787] Built Batteries.Data.BinomialHeap
✔ [302/787] Built ProofWidgets.Presentation.Expr
✔ [303/787] Built Mathlib.Tactic.Find
✔ [304/787] Built Smt.Commands
✔ [305/787] Built ProofWidgets.Data.Svg
✔ [306/787] Built Mathlib.Tactic.Widget.SelectPanelUtils
✔ [307/787] Built Smt.Commands:c.o
✔ [308/787] Built Smt.Commands:dynlib
✔ [309/787] Built ProofWidgets.Component.Panel.SelectionPanel
✔ [310/787] Built Mathlib.Tactic.FBinop
✔ [311/787] Built Batteries.Data.Rat.Lemmas
✔ [312/787] Built Batteries.Data.Rat
✔ [313/787] Built Mathlib.Data.SProd
✔ [314/787] Built ProofWidgets.Component.InteractiveSvg
✔ [315/787] Built ProofWidgets
✔ [316/787] Built Batteries.Data.List.Basic
✔ [317/787] Built Qq.Macro
✔ [318/787] Built Mathlib.Data.String.Defs
✔ [319/787] Built Mathlib.Init.Data.List.Basic
✔ [320/787] Built Batteries.Tactic.PermuteGoals
✔ [321/787] Built Mathlib.Lean.Meta
✔ [322/787] Built Batteries.Data.AssocList
✔ [323/787] Built Qq.Delab
✔ [324/787] Built Mathlib.Lean.Elab.Tactic.Basic
✔ [325/787] Built Mathlib.Tactic.Widget.Conv
✔ [326/787] Built Mathlib.Lean.Expr.Basic
✔ [327/787] Built Mathlib.Tactic.Widget.Calc
✔ [328/787] Built Batteries.Data.AssocList:c.o
✔ [329/787] Built Qq.MetaM
✔ [330/787] Built Mathlib.Tactic.RenameBVar
✔ [331/787] Built Batteries.Data.HashMap.Basic
✔ [332/787] Built Mathlib.Mathport.Notation
✔ [333/787] Built Batteries.Data.List.Basic:c.o
✔ [334/787] Built Batteries.Data.List.Basic:dynlib
✔ [335/787] Built Mathlib.Lean.Name
✔ [336/787] Built Mathlib.Tactic.Core
✔ [337/787] Built Batteries.Data.AssocList:dynlib
✔ [338/787] Built Mathlib.Tactic.Cases
✔ [339/787] Built Qq.AssertInstancesCommute
✔ [340/787] Built Batteries.Data.HashMap.Basic:c.o
✔ [341/787] Built Batteries.Data.HashMap.Basic:dynlib
✔ [342/787] Built Mathlib.Tactic.WLOG
✔ [343/787] Built Mathlib.Tactic.Relation.Trans
✔ [344/787] Built Mathlib.Tactic.Propose
✔ [345/787] Built Mathlib.Tactic.MkIffOfInductiveProp
✔ [346/787] Built Batteries.Data.RBMap.WF
✔ [347/787] Built Mathlib.Init.Logic
✔ [348/787] Built Batteries.Data.RBMap.Depth
✔ [349/787] Built Mathlib.Tactic.GeneralizeProofs
✔ [350/787] Built Mathlib.Init.Align
✔ [351/787] Built Mathlib.Init.Data.Bool.Lemmas
✔ [352/787] Built Mathlib.Init.Algebra.Classes
✔ [353/787] Built Mathlib.Tactic.SplitIfs
✔ [354/787] Built Mathlib.Tactic.Simps.Basic
✔ [355/787] Built Batteries.Data.RBMap.Alter
✔ [356/787] Built Mathlib.Init.Order.Defs
✔ [357/787] Built Qq.Match
✔ [358/787] Built Qq
✔ [359/787] Built Mathlib.Init.Order.LinearOrder
✔ [360/787] Built Mathlib.Util.Qq
✔ [361/787] Built Mathlib.Init.Data.Int.Order
✔ [362/787] Built Mathlib.Tactic.Says
✔ [363/787] Built Mathlib.Tactic.GCongr.Core
✔ [364/787] Built Batteries.Data.List.Lemmas
✔ [365/787] Built Batteries.Data.List.Lemmas:c.o
✔ [366/787] Built Batteries.Lean.System.IO
✔ [367/787] Built Batteries.Data.List.Lemmas:dynlib
✔ [368/787] Built Batteries.Data.List.EraseIdx
✔ [369/787] Built Batteries.Data.MLList.IO
✔ [370/787] Built Batteries.Data.List.Count
✔ [371/787] Built Batteries.Data.MLList
✔ [372/787] Built Batteries.Data.Range.Lemmas
✔ [373/787] Built Batteries.Data.Range
✔ [374/787] Built Mathlib.Tactic.ToAdditive
✔ [375/787] Built Mathlib.Init.ZeroOne
✔ [376/787] Built Batteries.Data.List.Pairwise
✔ [377/787] Built Mathlib.Init.Data.Nat.Basic
✔ [378/787] Built Mathlib.Init.Data.Nat.Lemmas
✔ [379/787] Built Batteries.Data.List.Perm
✔ [380/787] Built Mathlib.Algebra.Group.Defs
✔ [381/787] Built Batteries.Data.List
✔ [382/787] Built Batteries.Data.String.Lemmas
✔ [383/787] Built Mathlib.Algebra.Group.Semiconj.Defs
✔ [384/787] Built Batteries.Data.String
✔ [385/787] Built Mathlib.Data.Nat.Cast.Defs
✔ [386/787] Built Mathlib.Algebra.Group.Invertible.Defs
✔ [387/787] Built Mathlib.Data.Int.Cast.Defs
✔ [388/787] Built Mathlib.Algebra.Group.Commute.Defs
✔ [389/787] Built Batteries.Data.Array.Lemmas
✔ [390/787] Built Aesop.Util.Basic
✔ [391/787] Built Batteries.Data.Array.Lemmas:c.o
✔ [392/787] Built Batteries.Data.Array
✔ [393/787] Built Batteries.Data.HashMap.Lemmas
✔ [394/787] Built Batteries.Data.Array.Lemmas:dynlib
✔ [395/787] Built Batteries.Data.RBMap.Lemmas
✔ [396/787] Built Batteries.Data.HashMap.Lemmas:c.o
✔ [397/787] Built Batteries.Data.HashMap.Lemmas:dynlib
✔ [398/787] Built Batteries.Data.RBMap
✔ [399/787] Built Aesop.Rule.Name
✔ [400/787] Built Batteries.Data.ByteArray
✔ [401/787] Built Aesop.Tracing
✔ [402/787] Built Aesop.Util.Tactic
✔ [403/787] Built Aesop.Stats.Basic
✔ [404/787] Built Aesop.Stats.Extension
✔ [405/787] Built Aesop.RulePattern
✔ [406/787] Built Aesop.Stats.Report
✔ [407/787] Built Aesop.Index.Basic
✔ [408/787] Built Aesop.Script
✔ [409/787] Built Batteries.Data.HashMap.WF
✔ [410/787] Built Batteries.Data.UnionFind.Basic
✔ [411/787] Built Aesop.RuleTac.Basic
✔ [412/787] Built Batteries.Data.HashMap.WF:c.o
✔ [413/787] Built Batteries.Data.HashMap
✔ [414/787] Built Batteries.Data.HashMap.WF:dynlib
✔ [415/787] Built Batteries.Data.HashMap:c.o
✔ [416/787] Built Batteries.Data.HashMap:dynlib
✔ [417/787] Built Aesop.RuleTac.Preprocess
✔ [418/787] Built Aesop.Rule.Basic
✔ [419/787] Built Aesop.RuleTac.Apply
✔ [420/787] Built Aesop.RuleTac.Tactic
✔ [421/787] Built Aesop.RuleTac.Cases
✔ [422/787] Built Smt.Solver
✔ [423/787] Built Aesop.Search.Expansion.Basic
✔ [424/787] Built Aesop.RuleTac.Forward
✔ [425/787] Built Smt.Solver:c.o
✔ [426/787] Built Smt.Solver:dynlib
✔ [427/787] Built Aesop.RuleTac
✔ [428/787] Built Batteries.Data.UnionFind.Lemmas
✔ [429/787] Built Aesop.Index
✔ [430/787] Built Batteries.Data.UnionFind
✔ [431/787] Built SystemE.Meta.Smt.EuclidTheory
✔ [432/787] Built Batteries.StdDeprecations
✔ [433/787] Built Aesop.Rule
✔ [434/787] Built Batteries
✔ [435/787] Built Aesop.RuleSet.Member
✔ [436/787] Built Aesop.Tree.UnsafeQueue
✔ [437/787] Built Aesop.RuleSet.Filter
✔ [438/787] Built Aesop.Builder.Basic
✔ [439/787] Built Mathlib.Tactic.Basic
✔ [440/787] Built Aesop.Builder.Apply
✔ [441/787] Built Aesop.Builder.Unfold
✔ [442/787] Built Aesop.Builder.Cases
✔ [443/787] Built Aesop.Builder.Tactic
✔ [444/787] Built Aesop.Builder.NormSimp
✔ [445/787] Built Aesop.Tree.Data
✔ [446/787] Built Aesop.Builder.Constructors
✔ [447/787] Built Mathlib.Tactic.RSuffices
✔ [448/787] Built Aesop.Builder.Forward
✔ [449/787] Built Mathlib.Init.Function
✔ [450/787] Built Mathlib.Tactic.ExtractLets
✔ [451/787] Built Mathlib.Order.Notation
✔ [452/787] Built Aesop.Tree.RunMetaM
✔ [453/787] Built Aesop.Tree.Traversal
✔ [454/787] Built Aesop.Builder.Default
✔ [455/787] Built Mathlib.Data.Prod.PProd
✔ [456/787] Built Mathlib.Logic.Nonempty
✔ [457/787] Built Mathlib.Tactic.DefEqTransformations
✔ [458/787] Built Mathlib.Logic.Nontrivial.Defs
✔ [459/787] Built Mathlib.Tactic.Lift
✔ [460/787] Built Mathlib.Logic.Relator
✔ [461/787] Built Aesop.Builder
✔ [462/787] Built Aesop.Tree.TreeM
✔ [463/787] Built Aesop.RuleSet
✔ [464/787] Built Mathlib.Data.Bool.Basic
✔ [465/787] Built Mathlib.Control.Basic
✔ [466/787] Built Mathlib.Data.Option.NAry
✔ [467/787] Built Aesop.Tree.State
✔ [468/787] Built Aesop.Frontend.Extension.Init
✔ [469/787] Built Aesop.Tree.Tracing
✔ [470/787] Built Aesop.Tree.Free
✔ [471/787] Built Aesop.Search.Expansion.Simp
✔ [472/787] Built Aesop.Tree.ExtractScript
✔ [473/787] Built Mathlib.Control.Functor
✔ [474/787] Built Mathlib.Logic.Basic
✔ [475/787] Built Aesop.Frontend.Extension
✔ [476/787] Built Aesop.Tree.AddRapp
✔ [477/787] Built Aesop.Tree.ExtractProof
✔ [478/787] Built Mathlib.Algebra.NeZero
✔ [479/787] Built Aesop.Tree.Check
✔ [480/787] Built Mathlib.Data.List.Defs
✔ [481/787] Built Mathlib.Data.Nat.Cast.NeZero
✔ [482/787] Built Aesop.Tree
✔ [483/787] Built Aesop.Search.Queue.Class
✔ [484/787] Built Aesop.Frontend.RuleExpr
✔ [485/787] Built Mathlib.Tactic.Tauto
✔ [486/787] Built Mathlib.Logic.Function.Basic
✔ [487/787] Built Aesop.Search.Queue
✔ [488/787] Built Aesop.Frontend.Attribute
✔ [489/787] Built Aesop.Search.SearchM
✔ [490/787] Built Mathlib.Data.FunLike.Basic
✔ [491/787] Built Mathlib.Logic.IsEmpty
✔ [492/787] Built Mathlib.Logic.Function.Conjugate
✔ [493/787] Built Mathlib.Tactic.PushNeg
✔ [494/787] Built Aesop.BuiltinRules.Ext
✔ [495/787] Built Mathlib.Algebra.CharZero.Defs
✔ [496/787] Built Mathlib.Data.Subtype
✔ [497/787] Built Aesop.Search.RuleSelection
✔ [498/787] Built Aesop.BuiltinRules.ApplyHyps
✔ [499/787] Built Aesop.BuiltinRules.DestructProducts
✔ [500/787] Built Aesop.BuiltinRules.Intros
✔ [501/787] Built Mathlib.Algebra.GroupWithZero.Defs
✔ [502/787] Built Aesop.BuiltinRules.Split
✔ [503/787] Built Mathlib.Data.FunLike.Embedding
✔ [504/787] Built Aesop.BuiltinRules.Assumption
✔ [505/787] Built Mathlib.Data.Sum.Basic
✔ [506/787] Built Mathlib.Data.Sigma.Basic
✔ [507/787] Built Aesop.BuiltinRules.Subst
✔ [508/787] Built Mathlib.Data.Prod.Basic
✔ [509/787] Built Mathlib.Logic.Unique
✔ [510/787] Built Aesop.Frontend.Command
✔ [511/787] Built Mathlib.Tactic.Choose
✔ [512/787] Built Mathlib.Tactic.ByContra
✔ [513/787] Built Mathlib.Tactic.Contrapose
✔ [514/787] Built Mathlib.Logic.Function.Iterate
✔ [515/787] Built Aesop.Frontend.Tactic
✔ [516/787] Built Mathlib.Data.FunLike.Equiv
✔ [517/787] Built Mathlib.Algebra.GroupWithZero.NeZero
✔ [518/787] Built Mathlib.Logic.Relation
✔ [519/787] Built Mathlib.Data.Set.Defs
✔ [520/787] Built Mathlib.Logic.Nontrivial.Basic
✔ [521/787] Built Aesop.Frontend
✔ [522/787] Built Mathlib.Tactic.IrreducibleDef
✔ [523/787] Built Aesop.BuiltinRules
✔ [524/787] Built Mathlib.Lean.Meta.CongrTheorems
✔ [525/787] Built Mathlib.Init.Classical
✔ [526/787] Built Mathlib.Tactic.Nontriviality.Core
✔ [527/787] Built Mathlib.Algebra.Ring.Defs
✔ [528/787] Built Mathlib.Data.Quot
✔ [529/787] Built Aesop.Search.Expansion.Norm
✔ [530/787] Built Mathlib.Tactic.Nontriviality
✔ [531/787] Built Mathlib.Algebra.Group.Pi.Basic
✔ [532/787] Built Mathlib.Algebra.Ring.Semiconj
✔ [533/787] Built Mathlib.Algebra.Field.Defs
✔ [534/787] Built Mathlib.Logic.Equiv.Defs
✔ [535/787] Built Mathlib.Order.SetNotation
✔ [536/787] Built Aesop.Search.Expansion
✔ [537/787] Built Mathlib.Tactic.Congr!
✔ [538/787] Built Mathlib.Data.Finite.Defs
✔ [539/787] Built Mathlib.Algebra.Opposites
✔ [540/787] Built Aesop.Search.ExpandSafePrefix
✔ [541/787] Built Mathlib.Tactic.Convert
✔ [542/787] Built Mathlib.Control.EquivFunctor
✔ [543/787] Built Mathlib.Data.Nat.Defs
✔ [544/787] Built Mathlib.Algebra.Group.Hom.Defs
✔ [545/787] Built Mathlib.Algebra.GroupWithZero.Pi
✔ [546/787] Built Mathlib.Tactic.TermCongr
✔ [547/787] Built Mathlib.Algebra.Group.TypeTags
✔ [548/787] Built Mathlib.Tactic.Congrm
✔ [549/787] Built Mathlib.Data.Int.Defs
✔ [550/787] Built Mathlib.Order.Basic
✔ [551/787] Built Mathlib.Tactic.Widget.Congrm
✔ [552/787] Built Mathlib.Order.ULift
✔ [553/787] Built Mathlib.Algebra.Order.ZeroLEOne
✔ [554/787] Built Mathlib.Order.Synonym
✔ [555/787] Built Mathlib.Data.PNat.Defs
✔ [556/787] Built Mathlib.Order.Compare
✔ [557/787] Built Mathlib.Order.Max
✔ [558/787] Built Mathlib.Order.RelClasses
✔ [559/787] Built Mathlib.Algebra.Order.Group.Synonym
✔ [560/787] Built Mathlib.Logic.Equiv.Basic
✔ [561/787] Built Mathlib.Algebra.Order.GroupWithZero.Synonym
✔ [562/787] Built Mathlib.Data.ULift
✔ [563/787] Built Aesop.Search.Main
✔ [564/787] Built Mathlib.Order.Monotone.Basic
✔ [565/787] Built Aesop.Main
✔ [566/787] Built Aesop
✔ [567/787] Built Mathlib.Tactic.SetLike
✔ [568/787] Built Mathlib.Tactic.Common
✔ [569/787] Built Mathlib.Data.Option.Basic
✔ [570/787] Built Mathlib.Logic.Pairwise
✔ [571/787] Built Mathlib.Algebra.Group.WithOne.Defs
✔ [572/787] Built Mathlib.Data.List.GetD
✔ [573/787] Built Mathlib.Data.Rat.Defs
✔ [574/787] Built Mathlib.Data.Nat.Factorial.Basic
✔ [575/787] Built Mathlib.Logic.Embedding.Basic
✔ [576/787] Built Mathlib.Order.Lattice
✔ [577/787] Built Mathlib.Logic.Equiv.Option
✔ [578/787] Built Mathlib.Order.MinMax
✔ [579/787] Built Mathlib.Order.BoundedOrder
✔ [580/787] Built Mathlib.Order.RelIso.Basic
✔ [581/787] Built Mathlib.Algebra.Group.Action.Defs
✔ [582/787] Built Mathlib.Algebra.Group.Basic
✔ [583/787] Built Mathlib.GroupTheory.GroupAction.Ring
✔ [584/787] Built Mathlib.Algebra.Group.Semiconj.Basic
✔ [585/787] Built Mathlib.Data.Int.Cast.Basic
✔ [586/787] Built Mathlib.Algebra.Ring.Basic
✔ [587/787] Built Mathlib.Algebra.Order.Monoid.Unbundled.Defs
✔ [588/787] Built Mathlib.Algebra.Divisibility.Basic
✔ [589/787] Built Mathlib.Order.Disjoint
✔ [590/787] Built Mathlib.Algebra.Group.Hom.Basic
✔ [591/787] Built Mathlib.Algebra.Group.Commute.Basic
✔ [592/787] Built Mathlib.GroupTheory.GroupAction.Defs
✔ [593/787] Built Mathlib.Order.PropInstances
✔ [594/787] Built Mathlib.Algebra.GroupWithZero.Basic
✔ [595/787] Built Mathlib.Order.WithBot
✔ [596/787] Built Mathlib.Algebra.Group.InjSurj
✔ [597/787] Built Mathlib.Algebra.Order.GroupWithZero.Unbundled
✔ [598/787] Built Mathlib.Algebra.Group.Hom.Instances
✔ [599/787] Built Mathlib.Algebra.Group.Units
✔ [600/787] Built Mathlib.Algebra.Group.Equiv.Basic
✔ [601/787] Built Mathlib.Algebra.GroupWithZero.InjSurj
✔ [602/787] Built Mathlib.Algebra.Order.Monoid.Unbundled.Basic
✔ [603/787] Built Mathlib.Algebra.Group.Semiconj.Units
✔ [604/787] Built Mathlib.Algebra.Divisibility.Units
✔ [605/787] Built Mathlib.Algebra.Group.Units.Hom
✔ [606/787] Built Mathlib.GroupTheory.GroupAction.Units
✔ [607/787] Built Mathlib.Algebra.GroupWithZero.Hom
✔ [608/787] Built Mathlib.Algebra.Ring.Divisibility.Basic
✔ [609/787] Built Mathlib.Algebra.Order.Monoid.NatCast
✔ [610/787] Built Mathlib.Algebra.Order.Monoid.Defs
✔ [611/787] Built Mathlib.Algebra.Order.Monoid.Unbundled.MinMax
✔ [612/787] Built Mathlib.Algebra.Group.Commute.Units
✔ [613/787] Built Mathlib.Algebra.Regular.Basic
✔ [614/787] Built Mathlib.Algebra.GroupWithZero.Units.Basic
✔ [615/787] Built Mathlib.Algebra.Order.Sub.Defs
✔ [616/787] Built Mathlib.Algebra.Group.Units.Equiv
✔ [617/787] Built Mathlib.Algebra.Order.Monoid.OrderDual
✔ [618/787] Built Mathlib.Algebra.Group.Invertible.Basic
✔ [619/787] Built Mathlib.Algebra.Ring.Regular
✔ [620/787] Built Mathlib.Order.Hom.Basic
✔ [621/787] Built Mathlib.Algebra.GroupWithZero.Semiconj
✔ [622/787] Built Mathlib.Order.Heyting.Basic
✔ [623/787] Built Mathlib.Algebra.GroupWithZero.Units.Equiv
✔ [624/787] Built Mathlib.Algebra.Ring.InjSurj
✔ [625/787] Built Mathlib.Algebra.GroupWithZero.Divisibility
✔ [626/787] Built Mathlib.Algebra.Order.Monoid.Canonical.Defs
✔ [627/787] Built Mathlib.Algebra.GroupWithZero.Invertible
✔ [628/787] Built Mathlib.Algebra.Group.Opposite
✔ [629/787] Built Mathlib.Algebra.GroupWithZero.Commute
✔ [630/787] Built Mathlib.Algebra.Order.Monoid.Units
✔ [631/787] Built Mathlib.Algebra.GroupWithZero.WithZero
✔ [632/787] Built Mathlib.Algebra.Order.Monoid.Basic
✔ [633/787] Built Mathlib.Order.Antisymmetrization
✔ [634/787] Built Mathlib.Algebra.Ring.Invertible
✔ [635/787] Built Mathlib.Algebra.Order.Monoid.Unbundled.Pow
✔ [636/787] Built Mathlib.Algebra.Order.Monoid.TypeTags
✔ [637/787] Built Mathlib.Algebra.Group.Even
✔ [638/787] Built Mathlib.Algebra.Ring.Hom.Defs
✔ [639/787] Built Mathlib.Algebra.GroupWithZero.Units.Lemmas
✔ [640/787] Built Mathlib.GroupTheory.GroupAction.Opposite
✔ [641/787] Built Mathlib.Algebra.Group.Nat
✔ [642/787] Built Mathlib.Algebra.Ring.Units
✔ [643/787] Built Mathlib.Algebra.Ring.Nat
✔ [644/787] Built Mathlib.Algebra.Order.Group.Nat
✔ [645/787] Built Mathlib.Algebra.Group.Int
✔ [646/787] Built Mathlib.Algebra.Ring.Opposite
✔ [647/787] Built Mathlib.Algebra.Order.Sub.Canonical
✔ [648/787] Built Mathlib.Data.Nat.Bits
✔ [649/787] Built Mathlib.Algebra.Group.Prod
✔ [650/787] Built Mathlib.Algebra.Ring.Int
✔ [651/787] Built Mathlib.Algebra.Ring.Commute
✔ [652/787] Built Mathlib.Algebra.GroupPower.IterateHom
✔ [653/787] Built Mathlib.Data.Nat.Cast.Basic
✔ [654/787] Built Mathlib.Data.Nat.Size
✔ [655/787] Built Mathlib.Algebra.Order.Group.Defs
✔ [656/787] Built Mathlib.Order.BooleanAlgebra
✔ [657/787] Built Mathlib.Data.Int.Cast.Field
✔ [658/787] Built Mathlib.Data.Nat.Cast.Commute
✔ [659/787] Built Mathlib.Algebra.Ring.Rat
✔ [660/787] Built Mathlib.Tactic.NormNum.Result
✔ [661/787] Built Mathlib.Algebra.Order.Group.Units
✔ [662/787] Built Mathlib.Algebra.Order.Group.InjSurj
✔ [663/787] Built Mathlib.Algebra.Order.Group.OrderIso
✔ [664/787] Built Mathlib.Data.Nat.Bitwise
✔ [665/787] Built Mathlib.Algebra.Order.Group.Lattice
✔ [666/787] Built Mathlib.Tactic.NormNum.Core
✔ [667/787] Built Mathlib.Algebra.Order.GroupWithZero.Canonical
✔ [668/787] Built Mathlib.Order.SymmDiff
✔ [669/787] Built Mathlib.Data.Int.Bitwise
✔ [670/787] Built Mathlib.Algebra.Field.Basic
✔ [671/787] Built Mathlib.Algebra.Order.Group.Abs
✔ [672/787] Built Mathlib.Algebra.Order.Group.Int
✔ [673/787] Built Mathlib.Algebra.Order.Group.MinMax
✔ [674/787] Built Mathlib.Tactic.NormNum.Basic
✔ [675/787] Built Mathlib.Algebra.Order.Group.PosPart
✔ [676/787] Built Mathlib.Algebra.Order.Ring.Defs
✔ [677/787] Built Mathlib.Algebra.Order.Ring.CharZero
✔ [678/787] Built Mathlib.Algebra.Order.Ring.Int
✔ [679/787] Built Mathlib.Data.Set.Basic
✔ [680/787] Built Mathlib.Algebra.Ring.Hom.Basic
✔ [681/787] Built Mathlib.Algebra.Order.Positive.Ring
✔ [682/787] Built Mathlib.Order.WellFounded
✔ [683/787] Built Mathlib.Data.SetLike.Basic
✔ [684/787] Built Mathlib.Data.Set.Subsingleton
✔ [685/787] Built Mathlib.Algebra.Order.Ring.InjSurj
✔ [686/787] Built Mathlib.Algebra.Ring.Parity
✔ [687/787] Built Mathlib.Algebra.Order.Ring.Canonical
✔ [688/787] Built Mathlib.Algebra.Order.Ring.Nat
✔ [689/787] Built Mathlib.Data.Set.Image
✔ [690/787] Built Mathlib.Algebra.Order.Field.Defs
✔ [691/787] Built Mathlib.Data.Bool.Set
✔ [692/787] Built Mathlib.Data.Nat.Set
✔ [693/787] Built Mathlib.Order.Directed
✔ [694/787] Built Mathlib.Algebra.Order.Field.Canonical.Defs
✔ [695/787] Built Mathlib.Algebra.Order.Field.InjSurj
✔ [696/787] Built Mathlib.Data.PNat.Basic
✔ [697/787] Built Mathlib.Data.Rat.Lemmas
✔ [698/787] Built Mathlib.Data.Nat.Cast.Order
✔ [699/787] Built Mathlib.Order.Interval.Set.Basic
✔ [700/787] Built Mathlib.Algebra.Order.Invertible
✔ [701/787] Built Mathlib.Data.Set.Prod
✔ [702/787] Built Mathlib.Algebra.GroupPower.Order
✔ [703/787] Built Mathlib.Data.Rat.Order
✔ [704/787] Built Mathlib.Data.Int.Cast.Lemmas
✔ [705/787] Built Mathlib.Data.Set.NAry
✔ [706/787] Built Mathlib.Algebra.Field.Opposite
✔ [707/787] Built Mathlib.Algebra.Order.Ring.Abs
✔ [708/787] Built Mathlib.Tactic.NormNum.Pow
✔ [709/787] Built Mathlib.Data.Int.Order.Lemmas
✔ [710/787] Built Mathlib.Tactic.Positivity.Core
✔ [711/787] Built Mathlib.Data.Set.Function
✔ [712/787] Built Mathlib.Tactic.GCongr
✔ [713/787] Built Mathlib.Order.Bounds.Basic
✔ [714/787] Built Mathlib.Data.Int.Lemmas
✔ [715/787] Built Mathlib.GroupTheory.GroupAction.Pi
✔ [716/787] Built Mathlib.Order.LatticeIntervals
✔ [717/787] Built Mathlib.Order.Interval.Set.Image
✔ [718/787] Built Mathlib.Data.Set.Pairwise.Basic
✔ [719/787] Built Mathlib.Algebra.Group.Pi.Lemmas
✔ [720/787] Built Mathlib.Logic.Equiv.Set
✔ [721/787] Built Mathlib.Order.Hom.Set
✔ [722/787] Built Mathlib.Order.Bounds.OrderIso
✔ [723/787] Built Mathlib.Order.Antichain
✔ [724/787] Built Mathlib.GroupTheory.Perm.Basic
✔ [725/787] Built Mathlib.Order.Interval.Set.UnorderedInterval
✔ [726/787] Built Mathlib.Order.Interval.Set.OrderEmbedding
✔ [727/787] Built Mathlib.Algebra.Ring.Equiv
✔ [728/787] Built Mathlib.Algebra.Group.Aut
✔ [729/787] Built Mathlib.Algebra.Ring.CompTypeclasses
✔ [730/787] Built Mathlib.Order.Interval.Set.OrdConnected
✔ [731/787] Built Mathlib.Algebra.Ring.Pi
✔ [732/787] Built Mathlib.GroupTheory.GroupAction.Group
✔ [733/787] Built Mathlib.Order.CompleteLattice
✔ [734/787] Built Mathlib.Order.Cover
✔ [735/787] Built Mathlib.Algebra.Ring.Action.Basic
✔ [736/787] Built Mathlib.Algebra.Ring.Aut
✔ [737/787] Built Mathlib.Algebra.Function.Support
✔ [738/787] Built Mathlib.Order.GaloisConnection
✔ [739/787] Built Mathlib.Data.Int.CharZero
✔ [740/787] Built Mathlib.Order.CompleteBooleanAlgebra
✔ [741/787] Built Mathlib.Algebra.Order.Field.Basic
✔ [742/787] Built Mathlib.Data.Set.Lattice
✔ [743/787] Built Mathlib.Order.ConditionallyCompleteLattice.Basic
✔ [744/787] Built Mathlib.Order.CompleteLatticeIntervals
✔ [745/787] Built Mathlib.Algebra.Order.Nonneg.Ring
✔ [746/787] Built Mathlib.Data.NNRat.Defs
✔ [747/787] Built Mathlib.Algebra.Order.Nonneg.Field
✔ [748/787] Built Mathlib.Algebra.Order.Field.Rat
✔ [749/787] Built Mathlib.Data.Rat.Cast.Defs
✔ [750/787] Built Mathlib.Data.Rat.Cast.CharZero
✔ [751/787] Built Mathlib.Tactic.Positivity.Basic
✔ [752/787] Built Mathlib.Algebra.Star.Basic
✔ [753/787] Built Mathlib.Tactic.NormNum.Inv
✔ [754/787] Built Mathlib.Algebra.Order.Hom.Basic
✔ [755/787] Built Mathlib.Algebra.Order.AbsoluteValue
✔ [756/787] Built Mathlib.Tactic.Ring.Basic
✔ [757/787] Built Mathlib.Tactic.Ring.PNat
✔ [758/787] Built Mathlib.Tactic.Ring.RingNF
✔ [759/787] Built Mathlib.Tactic.Ring
✔ [760/787] Built Mathlib.Algebra.Order.CauSeq.Basic
✔ [761/787] Built Mathlib.Algebra.Order.CauSeq.Completion
✔ [762/787] Built Mathlib.Data.Real.Basic
✔ [763/787] Built SystemE.Theory.Sorts.Segments
✔ [764/787] Built SystemE.Theory.Sorts.Angles
✔ [765/787] Built SystemE.Theory.Sorts.Triangles
✔ [766/787] Built SystemE.Theory.Sorts
✔ [767/787] Built SystemE.Theory.Relations
✔ [768/787] Built SystemE.Theory.Inferences.Metric
✔ [769/787] Built SystemE.Theory.Inferences.Superposition
✔ [770/787] Built SystemE.Theory.Inferences.Diagrammatic
✔ [771/787] Built SystemE.Theory.Constructions.Points
✔ [772/787] Built SystemE.Theory.Constructions.LinesAndCircles
✔ [773/787] Built SystemE.Theory.Inferences.Transfer
✔ [774/787] Built SystemE.Meta.Smt.Esmt
✔ [775/787] Built UniGeo.Relations
✔ [776/787] Built SystemE.Theory.Inferences
✔ [777/787] Built SystemE.Theory.Constructions.Intersections
✔ [778/787] Built SystemE.Theory.Constructions
✔ [779/787] Built SystemE.Theory
✔ [780/787] Built SystemE.Meta.Smt.UniGeo
✔ [781/787] Built SystemE.Meta.Smt.Translator
✔ [782/787] Built SystemE.Meta.Smt.Solver
✔ [783/787] Built SystemE.Smt
✔ [784/787] Built SystemE.Meta.Tactics.Solve
✔ [785/787] Built SystemE.Tactics
✔ [786/787] Built SystemE
Build completed successfully.
2024-05-26 23:09:05.119 | INFO     | __main__:main:188 - Tracing LeanEuclid
2024-05-26 23:09:05.170 | DEBUG    | __main__:main:193 - lake env lean --threads 32 --run ExtractData.lean

  0%|          | 0/1622 [00:00<?, ?it/s]
  0%|          | 0/1622 [00:05<?, ?it/s]
  0%|          | 0/1622 [00:10<?, ?it/s]
  2%|▏         | 29/1622 [00:15<04:34,  5.80it/s]
  3%|▎         | 55/1622 [00:20<04:47,  5.44it/s]
  5%|▍         | 74/1622 [00:25<05:29,  4.69it/s]
  6%|▋         | 103/1622 [00:30<04:56,  5.13it/s]
  8%|▊         | 133/1622 [00:35<04:33,  5.44it/s]
 10%|▉         | 156/1622 [00:40<04:44,  5.15it/s]
 11%|█         | 179/1622 [00:45<04:50,  4.97it/s]
 12%|█▏        | 197/1622 [00:50<05:14,  4.53it/s]
 13%|█▎        | 213/1622 [00:55<05:42,  4.12it/s]
 14%|█▍        | 233/1622 [01:00<05:40,  4.08it/s]
 16%|█▌        | 253/1622 [01:05<05:37,  4.05it/s]
 17%|█▋        | 280/1622 [01:10<05:00,  4.46it/s]
 19%|█▉        | 312/1622 [01:15<04:19,  5.05it/s]
 21%|██        | 333/1622 [01:20<04:29,  4.79it/s]
 23%|██▎       | 365/1622 [01:25<03:58,  5.27it/s]
 24%|██▍       | 391/1622 [01:30<03:54,  5.25it/s]
 26%|██▌       | 414/1622 [01:35<03:59,  5.05it/s]
 27%|██▋       | 434/1622 [01:40<04:10,  4.74it/s]
 28%|██▊       | 456/1622 [01:45<04:11,  4.63it/s]
 29%|██▉       | 477/1622 [01:50<04:14,  4.50it/s]
 31%|███       | 496/1622 [01:55<04:22,  4.29it/s]
 32%|███▏      | 518/1622 [02:00<04:15,  4.32it/s]
 33%|███▎      | 541/1622 [02:05<04:05,  4.40it/s]
 35%|███▍      | 562/1622 [02:10<04:04,  4.34it/s]
 35%|███▌      | 575/1622 [02:15<04:34,  3.82it/s]
 37%|███▋      | 602/1622 [02:20<03:57,  4.29it/s]
 39%|███▉      | 630/1622 [02:25<03:31,  4.68it/s]
 41%|████      | 661/1622 [02:30<03:07,  5.14it/s]
 43%|████▎     | 691/1622 [02:35<02:52,  5.39it/s]
 45%|████▍     | 722/1622 [02:40<02:39,  5.63it/s]
 46%|████▋     | 754/1622 [02:45<02:28,  5.86it/s]
 48%|████▊     | 782/1622 [02:50<02:25,  5.78it/s]
 51%|█████     | 823/1622 [02:55<02:02,  6.51it/s]
 53%|█████▎    | 854/1622 [03:00<01:59,  6.41it/s]
 55%|█████▍    | 892/1622 [03:05<01:47,  6.77it/s]
 57%|█████▋    | 924/1622 [03:10<01:44,  6.66it/s]
 59%|█████▉    | 956/1622 [03:15<01:41,  6.58it/s]
 61%|██████    | 988/1622 [03:20<01:37,  6.52it/s]
 62%|██████▏   | 1012/1622 [03:25<01:41,  6.00it/s]
 64%|██████▍   | 1038/1622 [03:30<01:41,  5.76it/s]
 66%|██████▌   | 1067/1622 [03:35<01:36,  5.77it/s]
 68%|██████▊   | 1097/1622 [03:40<01:29,  5.84it/s]
 69%|██████▉   | 1122/1622 [03:45<01:29,  5.59it/s]
 71%|███████▏  | 1158/1622 [03:50<01:16,  6.07it/s]
 73%|███████▎  | 1190/1622 [03:55<01:10,  6.17it/s]
 75%|███████▌  | 1222/1622 [04:00<01:04,  6.23it/s]
 77%|███████▋  | 1252/1622 [04:05<01:00,  6.16it/s]
 79%|███████▉  | 1281/1622 [04:10<00:56,  6.05it/s]
 81%|████████▏ | 1318/1622 [04:15<00:47,  6.46it/s]
 83%|████████▎ | 1350/1622 [04:20<00:42,  6.44it/s]
 85%|████████▌ | 1384/1622 [04:25<00:36,  6.54it/s]
 87%|████████▋ | 1412/1622 [04:30<00:33,  6.26it/s]
 89%|████████▉ | 1440/1622 [04:35<00:30,  6.06it/s]
 91%|█████████ | 1474/1622 [04:40<00:23,  6.28it/s]
 92%|█████████▏| 1498/1622 [04:45<00:21,  5.84it/s]
 95%|█████████▍| 1533/1622 [04:50<00:14,  6.18it/s]
 97%|█████████▋| 1568/1622 [04:55<00:08,  6.43it/s]2024-05-26 23:14:06,456	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8267 [39m[22m

  0%|          | 0/1616 [00:00<?, ?it/s]
  0%|          | 1/1616 [00:01<48:56,  1.82s/it]
  1%|          | 10/1616 [00:02<04:17,  6.24it/s]
  2%|▏         | 39/1616 [00:02<00:52, 30.05it/s]
  3%|▎         | 53/1616 [00:02<00:47, 33.01it/s]
  4%|▍         | 63/1616 [00:02<00:51, 30.03it/s]
  4%|▍         | 71/1616 [00:03<00:59, 25.82it/s]
  5%|▍         | 77/1616 [00:04<01:17, 19.82it/s]
  6%|▌         | 90/1616 [00:04<00:52, 29.33it/s]
  6%|▌         | 97/1616 [00:04<01:12, 20.91it/s]
  6%|▋         | 103/1616 [00:04<01:04, 23.34it/s]
  7%|▋         | 109/1616 [00:05<01:34, 15.98it/s]
  8%|▊         | 130/1616 [00:05<00:46, 31.96it/s]
  9%|▊         | 141/1616 [00:05<00:36, 40.05it/s]
 10%|▉         | 160/1616 [00:06<00:49, 29.23it/s]
 10%|█         | 168/1616 [00:06<00:45, 31.82it/s]
 11%|█         | 178/1616 [00:07<00:38, 37.01it/s]
 12%|█▏        | 186/1616 [00:08<01:13, 19.56it/s]
 12%|█▏        | 198/1616 [00:08<00:52, 26.97it/s]
 13%|█▎        | 209/1616 [00:08<00:41, 33.50it/s]
 14%|█▍        | 223/1616 [00:08<00:30, 45.48it/s]
 14%|█▍        | 232/1616 [00:09<01:18, 17.68it/s]
 15%|█▌        | 244/1616 [00:10<00:56, 24.26it/s]
 16%|█▌        | 253/1616 [00:10<00:49, 27.50it/s]
 17%|█▋        | 273/1616 [00:10<00:30, 44.57it/s]
 18%|█▊        | 284/1616 [00:12<01:17, 17.09it/s]
 18%|█▊        | 292/1616 [00:12<01:05, 20.15it/s]
 19%|█▊        | 300/1616 [00:12<00:56, 23.34it/s]
 19%|█▉        | 312/1616 [00:12<00:40, 31.84it/s]
 20%|█▉        | 321/1616 [00:12<00:33, 38.12it/s]
 20%|██        | 330/1616 [00:14<01:49, 11.72it/s]
 21%|██        | 341/1616 [00:14<01:17, 16.40it/s]
 22%|██▏       | 352/1616 [00:15<00:56, 22.26it/s]
 23%|██▎       | 365/1616 [00:15<00:40, 30.81it/s]
 24%|██▍       | 386/1616 [00:15<00:24, 49.68it/s]
 25%|██▍       | 401/1616 [00:15<00:19, 62.16it/s]
 26%|██▌       | 418/1616 [00:15<00:15, 78.77it/s]
 27%|██▋       | 433/1616 [00:18<01:12, 16.24it/s]
 27%|██▋       | 444/1616 [00:18<01:02, 18.72it/s]
 28%|██▊       | 454/1616 [00:18<00:50, 22.99it/s]
 29%|██▊       | 464/1616 [00:18<00:41, 28.07it/s]
 29%|██▉       | 473/1616 [00:18<00:34, 32.66it/s]
 30%|██▉       | 484/1616 [00:21<01:57,  9.63it/s]
 30%|███       | 490/1616 [00:21<01:39, 11.36it/s]
 31%|███       | 496/1616 [00:22<01:23, 13.38it/s]
 31%|███▏      | 505/1616 [00:22<01:01, 18.02it/s]
 32%|███▏      | 512/1616 [00:22<00:51, 21.37it/s]
 32%|███▏      | 518/1616 [00:22<00:47, 23.01it/s]
 33%|███▎      | 533/1616 [00:22<00:28, 37.58it/s]
 34%|███▎      | 542/1616 [00:22<00:24, 44.23it/s]
 34%|███▍      | 556/1616 [00:22<00:18, 58.20it/s]
 35%|███▌      | 566/1616 [00:27<02:24,  7.29it/s]
 35%|███▌      | 573/1616 [00:27<01:55,  8.99it/s]
 36%|███▌      | 579/1616 [00:27<01:38, 10.48it/s]
 36%|███▋      | 586/1616 [00:27<01:17, 13.31it/s]
 37%|███▋      | 593/1616 [00:27<01:00, 16.98it/s]
 38%|███▊      | 609/1616 [00:28<00:35, 28.75it/s]
 39%|███▉      | 633/1616 [00:28<00:19, 51.39it/s]
 40%|████      | 647/1616 [00:28<00:16, 60.46it/s]
 41%|████      | 664/1616 [00:28<00:12, 75.93it/s]
 42%|████▏     | 677/1616 [00:28<00:12, 76.81it/s]
 43%|████▎     | 691/1616 [00:28<00:10, 88.41it/s]
 44%|████▎     | 704/1616 [00:34<02:10,  7.01it/s]
 44%|████▍     | 713/1616 [00:35<01:44,  8.67it/s]
 45%|████▍     | 725/1616 [00:35<01:15, 11.87it/s]
 46%|████▌     | 736/1616 [00:35<00:56, 15.65it/s]
 46%|████▌     | 746/1616 [00:35<00:43, 20.12it/s]
 47%|████▋     | 762/1616 [00:35<00:28, 29.84it/s]
 48%|████▊     | 775/1616 [00:35<00:21, 38.43it/s]
 49%|████▉     | 793/1616 [00:35<00:15, 54.45it/s]
 50%|████▉     | 807/1616 [00:35<00:12, 64.49it/s]
 51%|█████     | 821/1616 [00:35<00:10, 76.43it/s]
 52%|█████▏    | 834/1616 [00:36<00:09, 83.11it/s]
 53%|█████▎    | 853/1616 [00:36<00:07, 103.85it/s]
 54%|█████▎    | 867/1616 [00:36<00:06, 108.33it/s]
 55%|█████▍    | 881/1616 [00:36<00:07, 99.66it/s] 
 55%|█████▌    | 893/1616 [00:43<01:51,  6.47it/s]
 56%|█████▌    | 902/1616 [00:43<01:31,  7.84it/s]
 56%|█████▋    | 909/1616 [00:43<01:16,  9.24it/s]
 57%|█████▋    | 925/1616 [00:43<00:47, 14.58it/s]
 58%|█████▊    | 945/1616 [00:43<00:28, 23.45it/s]
 60%|█████▉    | 965/1616 [00:44<00:18, 34.68it/s]
 61%|██████    | 984/1616 [00:44<00:13, 47.49it/s]
 62%|██████▏   | 1000/1616 [00:44<00:11, 54.02it/s]
 63%|██████▎   | 1014/1616 [00:44<00:10, 58.15it/s]
 63%|██████▎   | 1026/1616 [00:44<00:09, 61.80it/s]
 64%|██████▍   | 1037/1616 [00:44<00:09, 62.89it/s]
 65%|██████▌   | 1057/1616 [00:44<00:06, 83.53it/s]
 66%|██████▌   | 1069/1616 [00:53<01:40,  5.43it/s]
 67%|██████▋   | 1078/1616 [00:53<01:21,  6.64it/s]
 67%|██████▋   | 1085/1616 [00:53<01:06,  8.01it/s]
 68%|██████▊   | 1092/1616 [00:53<00:55,  9.52it/s]
 68%|██████▊   | 1101/1616 [00:54<00:40, 12.72it/s]
 69%|██████▊   | 1108/1616 [00:54<00:32, 15.55it/s]
 69%|██████▉   | 1120/1616 [00:54<00:22, 22.10it/s]
 70%|██████▉   | 1128/1616 [00:54<00:18, 26.98it/s]
 71%|███████   | 1145/1616 [00:54<00:11, 42.37it/s]
 72%|███████▏  | 1162/1616 [00:54<00:07, 59.45it/s]
 73%|███████▎  | 1174/1616 [00:54<00:06, 67.77it/s]
 74%|███████▎  | 1191/1616 [00:54<00:04, 86.44it/s]
 75%|███████▍  | 1207/1616 [00:54<00:04, 100.54it/s]
 76%|███████▌  | 1221/1616 [00:55<00:03, 102.39it/s]
 76%|███████▋  | 1234/1616 [00:55<00:03, 98.41it/s] 
 77%|███████▋  | 1252/1616 [00:55<00:03, 114.01it/s]
 78%|███████▊  | 1267/1616 [00:55<00:02, 119.00it/s]
 79%|███████▉  | 1282/1616 [00:55<00:02, 123.93it/s]
 80%|████████  | 1296/1616 [00:55<00:02, 110.49it/s]
 80%|████████  | 1296/1616 [01:06<00:02, 110.49it/s]
 80%|████████  | 1298/1616 [01:06<01:33,  3.39it/s] 
 81%|████████  | 1303/1616 [01:06<01:19,  3.93it/s]
 81%|████████▏ | 1314/1616 [01:06<00:52,  5.78it/s]
 82%|████████▏ | 1323/1616 [01:06<00:37,  7.78it/s]
 82%|████████▏ | 1331/1616 [01:06<00:28, 10.02it/s]
 83%|████████▎ | 1342/1616 [01:06<00:18, 14.54it/s]
 84%|████████▍ | 1355/1616 [01:07<00:12, 21.30it/s]
 85%|████████▍ | 1372/1616 [01:07<00:07, 33.04it/s]
 86%|████████▌ | 1389/1616 [01:07<00:04, 45.62it/s]
 87%|████████▋ | 1406/1616 [01:07<00:03, 60.71it/s]
 88%|████████▊ | 1420/1616 [01:07<00:02, 68.60it/s]
 89%|████████▊ | 1433/1616 [01:07<00:02, 78.73it/s]
 90%|████████▉ | 1447/1616 [01:07<00:01, 90.24it/s]
 91%|█████████ | 1465/1616 [01:07<00:01, 109.47it/s]
 92%|█████████▏| 1480/1616 [01:08<00:01, 103.09it/s]
 92%|█████████▏| 1493/1616 [01:08<00:01, 80.25it/s] 
 93%|█████████▎| 1504/1616 [01:08<00:01, 78.16it/s]
 94%|█████████▎| 1514/1616 [01:08<00:01, 81.48it/s]
 94%|█████████▍| 1525/1616 [01:08<00:01, 87.06it/s]
 95%|█████████▌| 1539/1616 [01:08<00:00, 99.56it/s]
 96%|█████████▌| 1551/1616 [01:08<00:00, 101.44it/s]
 97%|█████████▋| 1570/1616 [01:08<00:00, 124.10it/s]
 98%|█████████▊| 1584/1616 [01:09<00:00, 125.52it/s]
 98%|█████████▊| 1584/1616 [01:22<00:00, 125.52it/s]
 99%|█████████▊| 1592/1616 [01:22<00:07,  3.08it/s] 
 99%|█████████▊| 1594/1616 [01:22<00:06,  3.26it/s]
 99%|█████████▉| 1604/1616 [01:22<00:02,  4.58it/s]
100%|█████████▉| 1612/1616 [01:22<00:00,  6.04it/s]
100%|██████████| 1616/1616 [01:22<00:00, 19.51it/s]
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-26 23:16:15.529 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-26 23:16:20.122 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-26 23:16:30.207 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-26 23:16:33.918 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-26 23:16:39.238 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-26 23:17:05,479	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8267 [39m[22m

  0%|          | 0/1616 [00:00<?, ?it/s]
  0%|          | 1/1616 [00:01<41:41,  1.55s/it]
  1%|          | 12/1616 [00:01<02:43,  9.81it/s]
  1%|          | 19/1616 [00:01<01:40, 15.81it/s]
  2%|▏         | 27/1616 [00:01<01:06, 23.87it/s]
  2%|▏         | 34/1616 [00:02<00:57, 27.50it/s]
  2%|▏         | 40/1616 [00:02<00:49, 31.76it/s]
  3%|▎         | 46/1616 [00:02<00:52, 30.02it/s]
  3%|▎         | 56/1616 [00:02<00:38, 40.41it/s]
  4%|▍         | 63/1616 [00:02<00:37, 40.97it/s]
  4%|▍         | 69/1616 [00:02<00:43, 35.58it/s]
  5%|▍         | 74/1616 [00:03<00:47, 32.16it/s]
  5%|▍         | 78/1616 [00:03<00:45, 33.50it/s]
  5%|▌         | 88/1616 [00:03<00:32, 46.94it/s]
  6%|▋         | 103/1616 [00:03<00:27, 55.79it/s]
  7%|▋         | 115/1616 [00:03<00:23, 63.44it/s]
  8%|▊         | 131/1616 [00:03<00:19, 75.21it/s]
  9%|▊         | 139/1616 [00:04<00:24, 60.24it/s]
  9%|▉         | 146/1616 [00:04<00:23, 61.45it/s]
  9%|▉         | 153/1616 [00:04<00:29, 50.01it/s]
 10%|▉         | 159/1616 [00:04<00:32, 45.06it/s]
 10%|█         | 166/1616 [00:04<00:29, 48.91it/s]
 11%|█         | 176/1616 [00:04<00:25, 55.63it/s]
 11%|█▏        | 182/1616 [00:05<00:29, 48.98it/s]
 12%|█▏        | 192/1616 [00:05<00:25, 55.71it/s]
 12%|█▏        | 198/1616 [00:05<00:29, 47.65it/s]
 13%|█▎        | 205/1616 [00:05<00:27, 51.28it/s]
 13%|█▎        | 211/1616 [00:05<00:26, 52.32it/s]
 13%|█▎        | 217/1616 [00:05<00:34, 40.93it/s]
 14%|█▎        | 222/1616 [00:05<00:35, 39.33it/s]
 15%|█▍        | 236/1616 [00:06<00:23, 59.58it/s]
 15%|█▌        | 250/1616 [00:06<00:27, 50.26it/s]
 16%|█▌        | 259/1616 [00:06<00:30, 44.23it/s]
 16%|█▋        | 265/1616 [00:06<00:32, 41.03it/s]
 17%|█▋        | 270/1616 [00:07<00:37, 36.25it/s]
 17%|█▋        | 276/1616 [00:07<00:33, 39.56it/s]
 17%|█▋        | 282/1616 [00:07<00:32, 40.96it/s]
 18%|█▊        | 291/1616 [00:07<00:26, 49.91it/s]
 18%|█▊        | 297/1616 [00:07<00:31, 41.56it/s]
 19%|█▉        | 306/1616 [00:07<00:29, 43.77it/s]
 19%|█▉        | 311/1616 [00:07<00:29, 44.52it/s]
 20%|█▉        | 321/1616 [00:08<00:24, 52.41it/s]
 20%|██        | 328/1616 [00:08<00:24, 52.91it/s]
 21%|██        | 340/1616 [00:08<00:18, 67.31it/s]
 22%|██▏       | 352/1616 [00:08<00:15, 79.94it/s]
 23%|██▎       | 365/1616 [00:08<00:13, 92.70it/s]
 23%|██▎       | 375/1616 [00:08<00:14, 87.05it/s]
 24%|██▍       | 385/1616 [00:08<00:13, 88.83it/s]
 24%|██▍       | 395/1616 [00:08<00:13, 90.74it/s]
 25%|██▌       | 405/1616 [00:09<00:23, 52.02it/s]
 26%|██▌       | 413/1616 [00:09<00:33, 35.70it/s]
 26%|██▌       | 419/1616 [00:09<00:32, 36.42it/s]
 26%|██▋       | 426/1616 [00:09<00:28, 41.22it/s]
 27%|██▋       | 433/1616 [00:10<00:27, 42.69it/s]
 27%|██▋       | 439/1616 [00:10<00:31, 37.23it/s]
 28%|██▊       | 449/1616 [00:10<00:24, 48.56it/s]
 28%|██▊       | 456/1616 [00:10<00:25, 44.70it/s]
 29%|██▊       | 462/1616 [00:10<00:24, 46.71it/s]
 29%|██▉       | 468/1616 [00:10<00:31, 35.89it/s]
 29%|██▉       | 474/1616 [00:11<00:31, 36.48it/s]
 30%|██▉       | 481/1616 [00:11<00:34, 33.22it/s]
 30%|███       | 486/1616 [00:11<00:42, 26.51it/s]
 30%|███       | 492/1616 [00:11<00:35, 31.67it/s]
 31%|███       | 503/1616 [00:11<00:24, 45.08it/s]
 32%|███▏      | 510/1616 [00:11<00:22, 49.28it/s]
 32%|███▏      | 518/1616 [00:12<00:19, 55.12it/s]
 33%|███▎      | 526/1616 [00:12<00:18, 59.00it/s]
 33%|███▎      | 533/1616 [00:12<00:18, 57.41it/s]
 33%|███▎      | 540/1616 [00:12<00:20, 51.29it/s]
 34%|███▍      | 546/1616 [00:12<00:24, 43.66it/s]
 34%|███▍      | 551/1616 [00:13<00:35, 29.60it/s]
 34%|███▍      | 555/1616 [00:13<00:34, 30.85it/s]
 35%|███▍      | 559/1616 [00:13<00:33, 31.62it/s]
 35%|███▍      | 565/1616 [00:13<00:28, 37.32it/s]
 35%|███▌      | 573/1616 [00:13<00:22, 45.71it/s]
 36%|███▌      | 585/1616 [00:13<00:16, 63.06it/s]
 37%|███▋      | 598/1616 [00:13<00:12, 79.77it/s]
 38%|███▊      | 611/1616 [00:13<00:11, 91.16it/s]
 38%|███▊      | 621/1616 [00:14<00:13, 72.28it/s]
 39%|███▉      | 633/1616 [00:14<00:12, 80.93it/s]
 40%|███▉      | 642/1616 [00:14<00:14, 65.60it/s]
 40%|████      | 651/1616 [00:14<00:13, 69.61it/s]
 41%|████      | 660/1616 [00:14<00:13, 69.16it/s]
 41%|████▏     | 668/1616 [00:14<00:15, 59.84it/s]
 42%|████▏     | 675/1616 [00:14<00:15, 59.03it/s]
 42%|████▏     | 682/1616 [00:15<00:17, 53.10it/s]
 43%|████▎     | 689/1616 [00:15<00:16, 56.05it/s]
 43%|████▎     | 698/1616 [00:15<00:14, 61.45it/s]
 44%|████▎     | 705/1616 [00:15<00:16, 56.35it/s]
 44%|████▍     | 711/1616 [00:15<00:16, 53.94it/s]
 44%|████▍     | 719/1616 [00:15<00:15, 59.58it/s]
 45%|████▌     | 729/1616 [00:15<00:12, 69.81it/s]
 46%|████▌     | 737/1616 [00:15<00:13, 66.82it/s]
 46%|████▌     | 744/1616 [00:16<00:13, 62.94it/s]
 47%|████▋     | 757/1616 [00:16<00:10, 78.49it/s]
 47%|████▋     | 766/1616 [00:16<00:11, 75.38it/s]
 48%|████▊     | 774/1616 [00:16<00:12, 67.72it/s]
 49%|████▊     | 786/1616 [00:16<00:10, 78.86it/s]
 49%|████▉     | 795/1616 [00:16<00:12, 67.97it/s]
 50%|████▉     | 803/1616 [00:16<00:12, 66.99it/s]
 51%|█████     | 817/1616 [00:16<00:09, 82.40it/s]
 51%|█████     | 827/1616 [00:17<00:09, 85.59it/s]
 52%|█████▏    | 836/1616 [00:17<00:10, 73.95it/s]
 52%|█████▏    | 844/1616 [00:17<00:12, 61.77it/s]
 53%|█████▎    | 851/1616 [00:17<00:15, 48.49it/s]
 53%|█████▎    | 857/1616 [00:17<00:15, 48.40it/s]
 53%|█████▎    | 863/1616 [00:17<00:18, 39.74it/s]
 54%|█████▎    | 868/1616 [00:18<00:18, 40.42it/s]
 54%|█████▍    | 873/1616 [00:18<00:26, 27.88it/s]
 54%|█████▍    | 877/1616 [00:18<00:29, 24.70it/s]
 55%|█████▍    | 881/1616 [00:18<00:28, 25.42it/s]
 55%|█████▍    | 888/1616 [00:18<00:21, 33.11it/s]
 55%|█████▌    | 894/1616 [00:19<00:18, 38.31it/s]
 56%|█████▌    | 902/1616 [00:19<00:15, 47.23it/s]
 57%|█████▋    | 914/1616 [00:19<00:10, 64.40it/s]
 57%|█████▋    | 927/1616 [00:19<00:09, 74.53it/s]
 58%|█████▊    | 938/1616 [00:19<00:08, 78.07it/s]
 59%|█████▉    | 953/1616 [00:19<00:06, 95.54it/s]
 60%|█████▉    | 964/1616 [00:19<00:08, 78.97it/s]
 60%|██████    | 973/1616 [00:19<00:09, 70.56it/s]
 61%|██████    | 981/1616 [00:20<00:10, 59.84it/s]
 61%|██████    | 988/1616 [00:20<00:10, 58.76it/s]
 62%|██████▏   | 995/1616 [00:20<00:10, 56.54it/s]
 62%|██████▏   | 1001/1616 [00:20<00:12, 49.76it/s]
 62%|██████▏   | 1007/1616 [00:20<00:13, 46.57it/s]
 63%|██████▎   | 1026/1616 [00:20<00:08, 71.79it/s]
 64%|██████▍   | 1034/1616 [00:21<00:08, 68.92it/s]
 64%|██████▍   | 1042/1616 [00:21<00:12, 44.72it/s]
 65%|██████▍   | 1048/1616 [00:21<00:13, 40.64it/s]
 65%|██████▌   | 1053/1616 [00:21<00:14, 38.18it/s]
 65%|██████▌   | 1058/1616 [00:21<00:17, 32.38it/s]
 66%|██████▌   | 1062/1616 [00:22<00:17, 32.28it/s]
 66%|██████▌   | 1066/1616 [00:22<00:18, 30.55it/s]
 67%|██████▋   | 1075/1616 [00:22<00:16, 32.63it/s]
 67%|██████▋   | 1082/1616 [00:22<00:13, 39.20it/s]
 67%|██████▋   | 1089/1616 [00:22<00:12, 41.91it/s]
 68%|██████▊   | 1094/1616 [00:22<00:13, 39.88it/s]
 68%|██████▊   | 1101/1616 [00:23<00:11, 45.08it/s]
 69%|██████▉   | 1114/1616 [00:23<00:07, 64.02it/s]
 70%|██████▉   | 1126/1616 [00:23<00:06, 76.74it/s]
 70%|███████   | 1137/1616 [00:23<00:05, 82.60it/s]
 71%|███████   | 1147/1616 [00:23<00:05, 85.98it/s]
 72%|███████▏  | 1158/1616 [00:23<00:05, 91.13it/s]
 72%|███████▏  | 1170/1616 [00:23<00:04, 97.25it/s]
 73%|███████▎  | 1180/1616 [00:23<00:05, 75.65it/s]
 74%|███████▎  | 1189/1616 [00:23<00:05, 77.53it/s]
 74%|███████▍  | 1198/1616 [00:24<00:05, 72.92it/s]
 75%|███████▍  | 1206/1616 [00:24<00:06, 66.42it/s]
 75%|███████▌  | 1214/1616 [00:24<00:06, 66.77it/s]
 76%|███████▌  | 1226/1616 [00:24<00:04, 78.67it/s]
 76%|███████▋  | 1235/1616 [00:24<00:04, 79.60it/s]
 77%|███████▋  | 1244/1616 [00:24<00:04, 77.45it/s]
 78%|███████▊  | 1255/1616 [00:24<00:04, 84.08it/s]
 78%|███████▊  | 1264/1616 [00:24<00:04, 74.98it/s]
 79%|███████▊  | 1272/1616 [00:25<00:09, 37.92it/s]
 79%|███████▉  | 1282/1616 [00:25<00:07, 46.77it/s]
 80%|███████▉  | 1289/1616 [00:25<00:08, 39.36it/s]
 80%|████████  | 1295/1616 [00:26<00:08, 39.37it/s]
 81%|████████  | 1301/1616 [00:26<00:09, 32.81it/s]
 81%|████████  | 1307/1616 [00:26<00:08, 37.07it/s]
 82%|████████▏ | 1320/1616 [00:26<00:05, 51.35it/s]
 82%|████████▏ | 1327/1616 [00:26<00:05, 50.14it/s]
 83%|████████▎ | 1339/1616 [00:26<00:04, 63.93it/s]
 83%|████████▎ | 1349/1616 [00:26<00:03, 71.12it/s]
 84%|████████▍ | 1358/1616 [00:27<00:03, 65.49it/s]
 85%|████████▍ | 1369/1616 [00:27<00:03, 73.59it/s]
 85%|████████▌ | 1378/1616 [00:27<00:03, 71.28it/s]
 86%|████████▌ | 1388/1616 [00:27<00:02, 76.37it/s]
 87%|████████▋ | 1398/1616 [00:27<00:02, 79.43it/s]
 87%|████████▋ | 1407/1616 [00:27<00:02, 81.27it/s]
 88%|████████▊ | 1416/1616 [00:27<00:02, 83.43it/s]
 89%|████████▊ | 1431/1616 [00:27<00:01, 99.93it/s]
 89%|████████▉ | 1442/1616 [00:28<00:02, 70.98it/s]
 90%|████████▉ | 1451/1616 [00:28<00:02, 73.64it/s]
 90%|█████████ | 1460/1616 [00:28<00:02, 67.06it/s]
 91%|█████████ | 1468/1616 [00:28<00:03, 45.37it/s]
 91%|█████████ | 1474/1616 [00:28<00:03, 46.11it/s]
 92%|█████████▏| 1480/1616 [00:28<00:02, 45.39it/s]
 92%|█████████▏| 1493/1616 [00:29<00:02, 61.44it/s]
 93%|█████████▎| 1501/1616 [00:29<00:01, 59.63it/s]
 93%|█████████▎| 1508/1616 [00:29<00:01, 61.68it/s]
 94%|█████████▍| 1518/1616 [00:29<00:01, 69.11it/s]
 95%|█████████▍| 1528/1616 [00:29<00:01, 73.89it/s]
 95%|█████████▌| 1541/1616 [00:29<00:00, 82.67it/s]
 96%|█████████▌| 1550/1616 [00:29<00:00, 81.50it/s]
 96%|█████████▋| 1559/1616 [00:29<00:00, 83.55it/s]
 97%|█████████▋| 1568/1616 [00:30<00:01, 34.58it/s]
 97%|█████████▋| 1575/1616 [00:30<00:01, 32.40it/s]
 98%|█████████▊| 1581/1616 [00:30<00:01, 33.61it/s]
 98%|█████████▊| 1586/1616 [00:31<00:00, 34.54it/s]
100%|█████████▉| 1615/1616 [00:31<00:00, 60.83it/s]
100%|██████████| 1616/1616 [00:31<00:00, 51.43it/s]
2024-05-26 23:17:53.011 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/loganrjmurphy-LeanEuclid-09ade8f56e94a1dd60fbf9570cc09cf6968c6b45/LeanEuclid
2024-05-26 23:17:55,481	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8267 [39m[22m

  0%|          | 0/1616 [00:00<?, ?it/s]
  0%|          | 1/1616 [00:01<48:42,  1.81s/it]
  2%|▏         | 37/1616 [00:01<00:59, 26.70it/s]
  4%|▎         | 57/1616 [00:02<00:38, 40.42it/s]
  5%|▍         | 74/1616 [00:02<00:32, 47.37it/s]
  5%|▌         | 87/1616 [00:02<00:27, 55.35it/s]
  6%|▌         | 99/1616 [00:02<00:27, 54.55it/s]
  7%|▋         | 120/1616 [00:02<00:19, 77.09it/s]
  8%|▊         | 134/1616 [00:03<00:20, 70.85it/s]
  9%|▉         | 145/1616 [00:03<00:22, 66.16it/s]
 10%|█         | 162/1616 [00:03<00:20, 72.28it/s]
 11%|█         | 176/1616 [00:03<00:17, 83.92it/s]
 12%|█▏        | 187/1616 [00:03<00:16, 85.25it/s]
 12%|█▏        | 198/1616 [00:03<00:17, 79.31it/s]
 13%|█▎        | 208/1616 [00:04<00:24, 57.43it/s]
 13%|█▎        | 216/1616 [00:04<00:27, 51.66it/s]
 14%|█▍        | 223/1616 [00:04<00:27, 50.24it/s]
 14%|█▍        | 223/1616 [00:33<00:27, 50.24it/s]
 14%|█▍        | 229/1616 [00:33<23:36,  1.02s/it]
 14%|█▍        | 234/1616 [00:33<18:59,  1.21it/s]
 15%|█▍        | 240/1616 [00:33<14:17,  1.60it/s]
 16%|█▌        | 251/1616 [00:33<08:34,  2.65it/s]
 16%|█▋        | 264/1616 [00:36<07:15,  3.10it/s]
 17%|█▋        | 272/1616 [00:36<05:24,  4.15it/s]
 18%|█▊        | 290/1616 [00:37<02:58,  7.44it/s]
 19%|█▉        | 306/1616 [00:37<01:54, 11.44it/s]
 20%|█▉        | 318/1616 [00:37<01:24, 15.35it/s]
 21%|██        | 343/1616 [00:37<00:47, 26.74it/s]
 22%|██▏       | 358/1616 [00:37<00:36, 34.69it/s]
 23%|██▎       | 373/1616 [00:41<01:59, 10.43it/s]
 24%|██▍       | 384/1616 [00:41<01:34, 13.07it/s]
 24%|██▍       | 394/1616 [00:41<01:16, 15.89it/s]
 25%|██▍       | 403/1616 [00:41<01:02, 19.46it/s]
 25%|██▌       | 412/1616 [00:42<00:53, 22.42it/s]
 26%|██▌       | 420/1616 [00:46<03:27,  5.77it/s]
 26%|██▋       | 426/1616 [00:46<02:50,  6.99it/s]
 27%|██▋       | 433/1616 [00:46<02:10,  9.03it/s]
 27%|██▋       | 441/1616 [00:47<01:37, 12.10it/s]
 28%|██▊       | 447/1616 [00:47<01:19, 14.78it/s]
 28%|██▊       | 453/1616 [00:47<01:04, 18.10it/s]
 28%|██▊       | 459/1616 [00:47<00:54, 21.38it/s]
 29%|██▉       | 466/1616 [00:47<00:42, 26.91it/s]
 29%|██▉       | 474/1616 [00:47<00:34, 33.45it/s]
 30%|██▉       | 482/1616 [00:47<00:28, 39.26it/s]
 30%|███       | 490/1616 [00:47<00:24, 46.23it/s]
 31%|███       | 497/1616 [00:53<04:26,  4.19it/s]
 31%|███▏      | 506/1616 [00:53<02:58,  6.21it/s]
 32%|███▏      | 513/1616 [00:53<02:14,  8.20it/s]
 32%|███▏      | 519/1616 [00:53<01:49, 10.06it/s]
 32%|███▏      | 524/1616 [00:54<01:32, 11.82it/s]
 33%|███▎      | 529/1616 [00:54<01:16, 14.15it/s]
 33%|███▎      | 535/1616 [00:54<01:01, 17.59it/s]
 33%|███▎      | 540/1616 [00:54<00:53, 20.29it/s]
 34%|███▎      | 544/1616 [00:54<00:59, 18.07it/s]
 34%|███▍      | 553/1616 [01:01<06:24,  2.76it/s]
 34%|███▍      | 557/1616 [01:01<05:07,  3.44it/s]
 35%|███▍      | 560/1616 [01:01<04:18,  4.09it/s]
 35%|███▍      | 564/1616 [01:02<03:19,  5.28it/s]
 35%|███▌      | 570/1616 [01:02<02:14,  7.81it/s]
 36%|███▌      | 574/1616 [01:02<01:52,  9.30it/s]
 36%|███▌      | 579/1616 [01:02<01:24, 12.33it/s]
 36%|███▌      | 583/1616 [01:02<01:14, 13.92it/s]
 36%|███▋      | 588/1616 [01:02<00:57, 17.98it/s]
 37%|███▋      | 592/1616 [01:02<00:48, 21.05it/s]
 37%|███▋      | 599/1616 [01:03<00:36, 28.10it/s]
 38%|███▊      | 610/1616 [01:03<00:23, 43.34it/s]
 38%|███▊      | 622/1616 [01:03<00:16, 59.24it/s]
 39%|███▉      | 630/1616 [01:03<00:17, 57.33it/s]
 39%|███▉      | 638/1616 [01:11<05:13,  3.12it/s]
 41%|████      | 665/1616 [01:11<02:08,  7.39it/s]
 42%|████▏     | 677/1616 [01:12<01:34,  9.89it/s]
 43%|████▎     | 695/1616 [01:12<01:00, 15.14it/s]
 44%|████▍     | 709/1616 [01:12<00:47, 19.01it/s]
 45%|████▍     | 721/1616 [01:12<00:36, 24.35it/s]
 46%|████▌     | 741/1616 [01:12<00:23, 36.71it/s]
 47%|████▋     | 755/1616 [01:12<00:18, 45.48it/s]
 48%|████▊     | 773/1616 [01:12<00:13, 60.22it/s]
 49%|████▉     | 788/1616 [01:13<00:12, 66.34it/s]
 50%|████▉     | 801/1616 [01:13<00:11, 70.82it/s]
 50%|█████     | 813/1616 [01:13<00:10, 78.08it/s]
 51%|█████     | 825/1616 [01:13<00:12, 65.55it/s]
 52%|█████▏    | 835/1616 [01:13<00:10, 71.01it/s]
 52%|█████▏    | 845/1616 [01:13<00:10, 74.98it/s]
 53%|█████▎    | 856/1616 [01:13<00:09, 76.29it/s]
 53%|█████▎    | 856/1616 [01:23<00:09, 76.29it/s]
 53%|█████▎    | 860/1616 [01:23<04:15,  2.96it/s]
 54%|█████▍    | 869/1616 [01:24<03:00,  4.13it/s]
 54%|█████▍    | 878/1616 [01:24<02:08,  5.73it/s]
 55%|█████▍    | 887/1616 [01:24<01:32,  7.91it/s]
 55%|█████▌    | 896/1616 [01:24<01:06, 10.86it/s]
 56%|█████▌    | 905/1616 [01:24<00:49, 14.44it/s]
 56%|█████▋    | 913/1616 [01:24<00:39, 17.72it/s]
 57%|█████▋    | 920/1616 [01:24<00:32, 21.63it/s]
 57%|█████▋    | 927/1616 [01:25<00:27, 24.80it/s]
 58%|█████▊    | 942/1616 [01:25<00:17, 39.35it/s]
 59%|█████▉    | 955/1616 [01:25<00:12, 51.36it/s]
 60%|██████    | 970/1616 [01:25<00:09, 67.64it/s]
 61%|██████    | 981/1616 [01:25<00:08, 72.05it/s]
 61%|██████▏   | 992/1616 [01:25<00:07, 78.05it/s]
 62%|██████▏   | 1004/1616 [01:25<00:07, 86.48it/s]
 63%|██████▎   | 1015/1616 [01:25<00:06, 91.55it/s]
 63%|██████▎   | 1026/1616 [01:25<00:06, 92.19it/s]
 64%|██████▍   | 1037/1616 [01:26<00:07, 76.80it/s]
 65%|██████▍   | 1046/1616 [01:26<00:07, 78.81it/s]
 65%|██████▌   | 1055/1616 [01:26<00:09, 57.06it/s]
 66%|██████▌   | 1063/1616 [01:26<00:09, 59.17it/s]
 66%|██████▌   | 1070/1616 [01:26<00:09, 60.14it/s]
 66%|██████▌   | 1070/1616 [01:38<00:09, 60.14it/s]
 66%|██████▋   | 1072/1616 [01:38<05:04,  1.79it/s]
 67%|██████▋   | 1077/1616 [01:39<03:52,  2.32it/s]
 67%|██████▋   | 1087/1616 [01:39<02:16,  3.86it/s]
 68%|██████▊   | 1100/1616 [01:39<01:17,  6.63it/s]
 69%|██████▉   | 1113/1616 [01:39<00:48, 10.33it/s]
 70%|██████▉   | 1125/1616 [01:39<00:33, 14.84it/s]
 70%|███████   | 1135/1616 [01:39<00:24, 19.57it/s]
 71%|███████   | 1148/1616 [01:39<00:16, 27.70it/s]
 72%|███████▏  | 1165/1616 [01:39<00:11, 40.77it/s]
 73%|███████▎  | 1178/1616 [01:39<00:08, 48.78it/s]
 74%|███████▎  | 1191/1616 [01:40<00:07, 59.79it/s]
 74%|███████▍  | 1203/1616 [01:40<00:07, 58.78it/s]
 75%|███████▌  | 1213/1616 [01:40<00:07, 54.55it/s]
 76%|███████▌  | 1224/1616 [01:40<00:06, 62.18it/s]
 76%|███████▋  | 1233/1616 [01:40<00:05, 64.97it/s]
 77%|███████▋  | 1246/1616 [01:40<00:04, 75.15it/s]
 78%|███████▊  | 1256/1616 [01:40<00:04, 75.72it/s]
 78%|███████▊  | 1268/1616 [01:41<00:04, 85.39it/s]
 79%|███████▉  | 1283/1616 [01:41<00:03, 100.31it/s]
 80%|████████  | 1296/1616 [01:41<00:02, 106.80it/s]
 81%|████████  | 1308/1616 [01:41<00:03, 92.32it/s] 
 82%|████████▏ | 1319/1616 [01:41<00:03, 83.86it/s]
 83%|████████▎ | 1337/1616 [01:41<00:02, 102.81it/s]
 84%|████████▍ | 1357/1616 [01:41<00:02, 125.95it/s]
 85%|████████▍ | 1372/1616 [01:41<00:01, 126.47it/s]
 86%|████████▌ | 1386/1616 [01:42<00:01, 128.76it/s]
 87%|████████▋ | 1400/1616 [01:42<00:01, 114.82it/s]
 87%|████████▋ | 1400/1616 [01:57<00:01, 114.82it/s]
 87%|████████▋ | 1409/1616 [01:57<01:13,  2.82it/s] 
 87%|████████▋ | 1412/1616 [01:57<01:06,  3.06it/s]
 88%|████████▊ | 1422/1616 [01:57<00:46,  4.17it/s]
 88%|████████▊ | 1430/1616 [01:57<00:34,  5.44it/s]
 89%|████████▉ | 1437/1616 [01:58<00:26,  6.81it/s]
 89%|████████▉ | 1443/1616 [01:58<00:20,  8.54it/s]
 90%|████████▉ | 1449/1616 [01:58<00:15, 10.61it/s]
 90%|█████████ | 1459/1616 [01:58<00:10, 15.50it/s]
 91%|█████████ | 1468/1616 [01:58<00:07, 20.14it/s]
 92%|█████████▏| 1479/1616 [01:58<00:04, 28.51it/s]
 92%|█████████▏| 1487/1616 [01:58<00:04, 32.23it/s]
 93%|█████████▎| 1495/1616 [01:59<00:03, 38.58it/s]
 93%|█████████▎| 1509/1616 [01:59<00:01, 54.51it/s]
 94%|█████████▍| 1519/1616 [01:59<00:01, 62.35it/s]
 95%|█████████▍| 1529/1616 [01:59<00:01, 67.54it/s]
 96%|█████████▌| 1545/1616 [01:59<00:00, 87.56it/s]
 96%|█████████▋| 1559/1616 [01:59<00:00, 100.03it/s]
 97%|█████████▋| 1573/1616 [01:59<00:00, 108.73it/s]
 98%|█████████▊| 1591/1616 [01:59<00:00, 125.37it/s]
100%|█████████▉| 1609/1616 [01:59<00:00, 139.07it/s]
100%|██████████| 1616/1616 [01:59<00:00, 13.47it/s] 
2024-05-26 23:20:25.621 | INFO     | __main__:retrieve_proof:272 - 6312
2024-05-26 23:20:25.625 | INFO     | prover.proof_search:__init__:422 - Launching 5 workers with 1 GPUs.
2024-05-26 23:20:28,113	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8267 [39m[22m
2024-05-26 23:20:29.157 | INFO     | prover.proof_search:search_unordered:467 - before theorem search: 
2024-05-26 23:20:29.157 | INFO     | prover.proof_search:search_unordered:474 - after theorem search: 
Processing david-christiansen/ssft24
2024-05-26 23:20:29.212 | INFO     | __main__:retrieve_proof:236 - lean toolchain version: {'content': 'leanprover/lean4:nightly-2024-05-21\n'}
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:238 - lean version v: nightly-2024-05-21
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:239 - is supported: False
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:241 - Unsupported version
Processing Adarsh321123/new-new-version-test
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:236 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc2\n'}
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:238 - lean version v: v4.8.0-rc2
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:239 - is supported: True
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:245 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:20:29.213 | INFO     | __main__:retrieve_proof:251 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:20:29.250 | INFO     | __main__:retrieve_proof:252 - lean --version: Lean (version 4.8.0-rc2, x86_64-unknown-linux-gnu, commit 873ef2d894af, Release)

2024-05-26 23:20:29.250 | INFO     | __main__:retrieve_proof:253 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-new-version-test', commit='779fc7d7cc36755b76bda552118e910289ed3aa3')
2024-05-26 23:20:29.251 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-new-version-test-779fc7d7cc36755b76bda552118e910289ed3aa3/new-new-version-test

-------------------------------------------------------------------------------
main.py 373 <module>
main()

main.py 362 main
proofs = retrieve_proof(lean_git_repo)

main.py 255 retrieve_proof
traced_repo = trace(repo)

trace.py 117 trace
traced_repo = TracedRepo.load_from_disk(cached_path, build_deps)

traced_data.py 1187 load_from_disk
with ray_actor_pool(_TracedRepoHelper, root_dir, repo) as pool:

contextlib.py 135 __enter__
return next(self.gen)

utils.py 72 ray_actor_pool
assert not ray.is_initialized()

AssertionError









ATTEMPT 2







[2024-05-26 23:39:06,175] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Cloning https://github.com/Oishiscarlett/error_detector.git
Repo name: Oishiscarlett/error_detector
Cloning into 'Oishiscarlett/error_detector'...
Failed to clone Oishiscarlett/error_detector because of HTTP Error 404: Not Found
Cloning https://github.com/JOSHCLUNE/DuperDemo.git
Repo name: JOSHCLUNE/DuperDemo
Cloning into 'JOSHCLUNE/DuperDemo'...
Cloning https://github.com/pthomas505/FOL.git
Repo name: pthomas505/FOL
Cloning into 'pthomas505/FOL'...
Cloning https://github.com/leanprover-community/duper.git
Repo name: leanprover-community/duper
Cloning into 'leanprover-community/duper'...
Cloning https://github.com/loganrjmurphy/LeanEuclid.git
Repo name: loganrjmurphy/LeanEuclid
Cloning into 'loganrjmurphy/LeanEuclid'...
Cloning https://github.com/bjoernkjoshanssen/jla.git
Repo name: bjoernkjoshanssen/jla
Cloning into 'bjoernkjoshanssen/jla'...
Failed to clone bjoernkjoshanssen/jla because of HTTP Error 404: Not Found
Cloning https://github.com/irene622/lean_ext.git
Repo name: irene622/lean_ext
Cloning into 'irene622/lean_ext'...
Failed to clone irene622/lean_ext because of HTTP Error 404: Not Found
Cloning https://github.com/david-christiansen/ssft24.git
Repo name: david-christiansen/ssft24
Deleting existing repository directory: david-christiansen/ssft24
Cloning into 'david-christiansen/ssft24'...
2024-05-26 23:39:46.319 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/david-christiansen/ssft24', commit='f1d9044a3213169c2e00ce45a02ad6977bf042f1') relies on an unsupported Lean version: 3de60bb1f63efe9bb56380f911f86980b9f3332c
Found 5 repositories
Processing JOSHCLUNE/DuperDemo
2024-05-26 23:39:46.322 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc2\n'}
2024-05-26 23:39:46.322 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc2
2024-05-26 23:39:46.322 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-26 23:39:46.322 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:39:46.322 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc2
2024-05-26 23:39:46.357 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc2, x86_64-unknown-linux-gnu, commit 873ef2d894af, Release)

2024-05-26 23:39:46.357 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/JOSHCLUNE/DuperDemo', commit='226ba13f7fb11f93f7a77e1fc76b2210ce1177c6')
2024-05-26 23:39:49,482	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8267 [39m[22m
2024-05-26 23:39:50.593 | INFO     | lean_dojo.data_extraction.trace:get_traced_repo_path:79 - Tracing LeanGitRepo(url='https://github.com/JOSHCLUNE/DuperDemo', commit='226ba13f7fb11f93f7a77e1fc76b2210ce1177c6')
2024-05-26 23:39:51.603 | INFO     | __main__:main:165 - Building DuperDemo
info: mathlib: cloning https://github.com/leanprover-community/mathlib4 to '././.lake/packages/mathlib'
info: Duper: cloning https://github.com/leanprover-community/duper.git to '././.lake/packages/Duper'
info: batteries: cloning https://github.com/leanprover-community/batteries to '././.lake/packages/batteries'
info: Qq: cloning https://github.com/leanprover-community/quote4 to '././.lake/packages/Qq'
info: aesop: cloning https://github.com/leanprover-community/aesop to '././.lake/packages/aesop'
info: proofwidgets: cloning https://github.com/leanprover-community/ProofWidgets4 to '././.lake/packages/proofwidgets'
info: Cli: cloning https://github.com/leanprover/lean4-cli to '././.lake/packages/Cli'
info: importGraph: cloning https://github.com/leanprover-community/import-graph.git to '././.lake/packages/importGraph'
info: auto: cloning https://github.com/leanprover-community/lean-auto.git to '././.lake/packages/auto'
✔ [1/2407] Fetched proofwidgets:optRelease
⚠ [2/2407] Fetched auto:optRelease
info: auto: wanted prebuilt release, but no tag found for revision
warning: failed to fetch cloud release; falling back to local build
✔ [3/2407] Built Batteries.Tactic.SeqFocus
✔ [4/2407] Built Batteries.Classes.Order
✔ [5/2407] Built Batteries.Control.ForInStep.Basic
✔ [6/2407] Built Duper.Util.Misc
⚠ [7/2407] Built Duper.Expr
warning: ././.lake/packages/Duper/././Duper/Expr.lean:259:6: unused variable `e`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [8/2407] Built Duper.Util.Reduction
✔ [9/2407] Built Duper.Util.Reduction:c.o
✔ [10/2407] Built Duper.Util.Reduction:dynlib
✔ [11/2407] Built Duper.Expr:c.o
✔ [12/2407] Built Duper.Expr:dynlib
✔ [13/2407] Built Duper.Util.MessageData
✔ [14/2407] Built Duper.Util.LazyList
✔ [15/2407] Built Duper.Util.MessageData:c.o
✔ [16/2407] Built Duper.Util.MessageData:dynlib
✔ [17/2407] Built Duper.Util.LazyList:c.o
✔ [18/2407] Built Duper.Util.LazyList:dynlib
✔ [19/2407] Built Duper.Util.OccursCheck
✔ [20/2407] Built Duper.DUnif.Utils
✔ [21/2407] Built Duper.Util.OccursCheck:c.o
✔ [22/2407] Built Duper.Util.OccursCheck:dynlib
✔ [23/2407] Built Duper.DUnif.Utils:c.o
✔ [24/2407] Built Duper.DUnif.Utils:dynlib
⚠ [25/2407] Built Duper.Unif
warning: ././.lake/packages/Duper/././Duper/Unif.lean:43:18: unused variable `mVarId`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:45:18: unused variable `mVarId`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:47:32: unused variable `mVarId`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:49:33: unused variable `mVarId`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:51:18: unused variable `mVarId`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:77:40: unused variable `g`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Unif.lean:77:42: unused variable `tt`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [26/2407] Built Duper.Match
warning: ././.lake/packages/Duper/././Duper/Match.lean:69:29: unused variable `match_target_hd`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Match.lean:69:45: unused variable `match_target_tl`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [27/2407] Built Duper.Unif:c.o
✔ [28/2407] Built Duper.Unif:dynlib
✔ [29/2407] Built Duper.Match:c.o
✔ [30/2407] Built Duper.Match:dynlib
✔ [31/2407] Built Batteries.Tactic.SeqFocus:c.o
✔ [32/2407] Built Batteries.Tactic.SeqFocus:dynlib
✔ [33/2407] Built Batteries.Classes.Order:c.o
✔ [34/2407] Built Batteries.Classes.Order:dynlib
✔ [35/2407] Built Batteries.Control.ForInStep.Basic:c.o
✔ [36/2407] Built Batteries.Control.ForInStep.Basic:dynlib
✔ [37/2407] Built Auto.Lib.Containers
✔ [38/2407] Built Auto.Lib.Containers:c.o
✔ [39/2407] Built Auto.Lib.Containers:dynlib
✔ [40/2407] Built Auto.Lib.LevelExtra
✔ [41/2407] Built Auto.Lib.LevelExtra:c.o
✔ [42/2407] Built Auto.Lib.LevelExtra:dynlib
✔ [43/2407] Built Auto.Lib.ExprExtra
✔ [44/2407] Built Auto.Lib.BoolExtra
✔ [45/2407] Built Auto.Lib.MessageData
✔ [46/2407] Built Auto.Lib.IsomType
✔ [47/2407] Built Auto.Lib.IsomType:c.o
✔ [48/2407] Built Auto.Lib.IsomType:dynlib
✔ [49/2407] Built Auto.Lib.ListExtra
✔ [50/2407] Built Auto.Lib.AbstractMVars
✔ [51/2407] Built Auto.Lib.BoolExtra:c.o
✔ [52/2407] Built Auto.Lib.BoolExtra:dynlib
✔ [53/2407] Built Auto.Lib.MessageData:c.o
✔ [54/2407] Built Auto.Lib.MessageData:dynlib
✔ [55/2407] Built Auto.Lib.ListExtra:c.o
✔ [56/2407] Built Auto.Lib.ListExtra:dynlib
✔ [57/2407] Built Auto.Lib.AbstractMVars:c.o
✔ [58/2407] Built Auto.Lib.AbstractMVars:dynlib
✔ [59/2407] Built Auto.Lib.StringExtra
✔ [60/2407] Built Auto.Lib.StringExtra:c.o
✔ [61/2407] Built Auto.Lib.StringExtra:dynlib
✔ [62/2407] Built Auto.Embedding.Lift
✔ [63/2407] Built Auto.Embedding.Lift:c.o
✔ [64/2407] Built Auto.Embedding.Lift:dynlib
⚠ [65/2407] Built Auto.Lib.HEqExtra
warning: ././.lake/packages/auto/././Auto/Lib/HEqExtra.lean:8:6: unused variable `α`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Lib/HEqExtra.lean:8:12: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Lib/HEqExtra.lean:8:25: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [66/2407] Built Auto.Lib.NatExtra
✔ [67/2407] Built Auto.Lib.HEqExtra:c.o
✔ [68/2407] Built Auto.Lib.HEqExtra:dynlib
✔ [69/2407] Built Auto.Lib.HList
✔ [70/2407] Built Auto.MathlibEmulator.Basic
✔ [71/2407] Built Auto.MathlibEmulator.ToLevel
✔ [72/2407] Built Auto.MathlibEmulator.ToLevel:c.o
✔ [73/2407] Built Auto.MathlibEmulator.ToLevel:dynlib
✔ [74/2407] Built Auto.MathlibEmulator.DeriveToExpr
✔ [75/2407] Built Auto.MathlibEmulator.Basic:c.o
✔ [76/2407] Built Auto.MathlibEmulator.Basic:dynlib
✔ [77/2407] Built Auto.Lib.OptionExtra
✔ [78/2407] Built Auto.Lib.NatExtra:c.o
✔ [79/2407] Built Auto.Lib.NatExtra:dynlib
✔ [80/2407] Built Auto.Lib.OptionExtra:c.o
✔ [81/2407] Built Auto.Lib.OptionExtra:dynlib
✔ [82/2407] Built Auto.Lib.HList:c.o
✔ [83/2407] Built Auto.Lib.HList:dynlib
✔ [84/2407] Built Auto.Lib.IntExtra
✔ [85/2407] Built Auto.Lib.IntExtra:c.o
✔ [86/2407] Built Auto.Lib.IntExtra:dynlib
✔ [87/2407] Built Auto.Translation.SMTAttributes
✔ [88/2407] Built Auto.Translation.SMTAttributes:c.o
✔ [89/2407] Built Auto.Translation.SMTAttributes:dynlib
✔ [90/2407] Built Auto.Parser.NDFA
✔ [91/2407] Built Auto.Lib.Rebind
✔ [92/2407] Built Auto.Lib.Rebind:c.o
✔ [93/2407] Built Auto.Lib.Rebind:dynlib
✔ [94/2407] Built Auto.LemDB
✔ [95/2407] Built Auto.LemDB:c.o
✔ [96/2407] Built Auto.LemDB:dynlib
✔ [97/2407] Built Mathlib.Mathport.Rename
✔ [98/2407] Built Mathlib.Init.Data.Nat.Notation
✔ [99/2407] Built Batteries.CodeAction.Attr
✔ [100/2407] Built Batteries.CodeAction.Basic
✔ [101/2407] Built Batteries.Lean.Position
✔ [102/2407] Built Batteries.CodeAction.Deprecated
✔ [103/2407] Built Batteries.Tactic.Alias
✔ [104/2407] Built Batteries.Data.Int.Order
✔ [105/2407] Built Mathlib.Init.Data.Int.Basic
✔ [106/2407] Built Batteries.Data.List.Init.Lemmas
✔ [107/2407] Built Mathlib.Data.Array.Defs
✔ [108/2407] Built Mathlib.Util.MemoFix
✔ [109/2407] Built Mathlib.Lean.Expr.ReplaceRec
✔ [110/2407] Built Mathlib.Lean.EnvExtension
✔ [111/2407] Built Batteries.Tactic.OpenPrivate
✔ [112/2407] Built Mathlib.Lean.Meta.Simp
✔ [113/2407] Built Batteries.Lean.NameMapAttribute
✔ [114/2407] Built Batteries.Tactic.Lint.Basic
✔ [115/2407] Built Batteries.Tactic.Lint.Misc
✔ [116/2407] Built Batteries.Util.LibraryNote
✔ [117/2407] Built Batteries.Tactic.Lint.Simp
✔ [118/2407] Built Batteries.Tactic.Lint.TypeClass
✔ [119/2407] Built Batteries.Tactic.Lint.Frontend
✔ [120/2407] Built Batteries.Tactic.Lint
✔ [121/2407] Built Batteries.Lean.Meta.Basic
✔ [122/2407] Built Batteries.Tactic.Init
✔ [123/2407] Built Batteries.Logic
✔ [124/2407] Built Mathlib.Tactic.Eqns
✔ [125/2407] Built Batteries.Lean.Expr
✔ [126/2407] Built Mathlib.Tactic.Simps.NotationClass
✔ [127/2407] Built Batteries.Data.Array.Match
✔ [128/2407] Built Batteries.Data.String.Basic
✔ [129/2407] Built Batteries.Lean.Name
✔ [130/2407] Built Batteries.Data.Nat.Gcd
✔ [131/2407] Built Batteries.Data.Int.DivMod
✔ [132/2407] Built Batteries.Lean.Float
✔ [133/2407] Built Mathlib.Tactic.Lemma
✔ [134/2407] Built Mathlib.Tactic.TypeStar
✔ [135/2407] Built Mathlib.Util.AssertExists
✔ [136/2407] Built Batteries.Classes.BEq
✔ [137/2407] Built Batteries.Classes.Cast
✔ [138/2407] Built Batteries.Classes.SatisfiesM
✔ [139/2407] Built Batteries.CodeAction.Misc
✔ [140/2407] Built Batteries.CodeAction
✔ [141/2407] Built Batteries.Control.ForInStep.Lemmas
✔ [142/2407] Built Batteries.Control.ForInStep
✔ [143/2407] Built Batteries.Control.Lemmas
✔ [144/2407] Built Batteries.Data.MLList.Basic
✔ [145/2407] Built Batteries.Control.Nondet.Basic
✔ [146/2407] Built Batteries.Data.List.Init.Attach
✔ [147/2407] Built Batteries.Data.Array.Init.Lemmas
✔ [148/2407] Built Batteries.Data.Array.Basic
✔ [149/2407] Built Batteries.Util.ProofWanted
✔ [150/2407] Built Batteries.Data.Array.Monadic
✔ [151/2407] Built Batteries.Data.BitVec.Lemmas
✔ [152/2407] Built Batteries.Data.BitVec
✔ [153/2407] Built Batteries.Data.Bool
✔ [154/2407] Built Batteries.Data.UInt
✔ [155/2407] Built Batteries.Data.Char
✔ [156/2407] Built Batteries.Data.DList
✔ [157/2407] Built Batteries.Data.Fin.Basic
✔ [158/2407] Built Batteries.Data.Fin.Lemmas
✔ [159/2407] Built Batteries.Data.Fin
✔ [160/2407] Built Batteries.Data.Nat.Basic
✔ [161/2407] Built Batteries.Data.Nat.Lemmas
✔ [162/2407] Built Batteries.Data.Int.Lemmas
✔ [163/2407] Built Batteries.Data.LazyList
✔ [164/2407] Built Batteries.Data.MLList.Heartbeats
✔ [165/2407] Built Batteries.Data.Nat
✔ [166/2407] Built Batteries.Data.Option.Lemmas
✔ [167/2407] Built Batteries.Data.Option
✔ [168/2407] Built Batteries.Data.PairingHeap
✔ [169/2407] Built Batteries.Data.Sum.Basic
✔ [170/2407] Built Batteries.Lean.TagAttribute
✔ [171/2407] Built Batteries.Lean.AttributeExtra
✔ [172/2407] Built Batteries.Lean.Delaborator
✔ [173/2407] Built Batteries.Lean.Except
✔ [174/2407] Built Batteries.Lean.HashMap
✔ [175/2407] Built Batteries.Lean.HashSet
✔ [176/2407] Built Batteries.Lean.IO.Process
✔ [177/2407] Built Batteries.Lean.Json
✔ [178/2407] Built Batteries.Lean.Meta.AssertHypotheses
✔ [179/2407] Built Batteries.Lean.Meta.Clear
✔ [180/2407] Built Batteries.Lean.Meta.Expr
✔ [181/2407] Built Batteries.Lean.PersistentHashMap
✔ [182/2407] Built Batteries.Lean.Meta.Inaccessible
✔ [183/2407] Built Batteries.Lean.Meta.InstantiateMVars
✔ [184/2407] Built Batteries.Lean.MonadBacktrack
✔ [185/2407] Built Batteries.Lean.Meta.SavedState
✔ [186/2407] Built Batteries.Lean.Meta.Simp
✔ [187/2407] Built Batteries.Lean.Meta.UnusedNames
✔ [188/2407] Built Batteries.Lean.NameMap
✔ [189/2407] Built Batteries.Lean.PersistentHashSet
✔ [190/2407] Built Batteries.Lean.SMap
✔ [191/2407] Built Batteries.Lean.Syntax
✔ [192/2407] Built Batteries.Lean.Util.EnvSearch
✔ [193/2407] Built Batteries.Lean.Util.Path
✔ [194/2407] Built Batteries.Tactic.Unreachable
✔ [195/2407] Built Batteries.Linter.UnreachableTactic
✔ [196/2407] Built Batteries.Linter.UnnecessarySeqFocus
✔ [197/2407] Built Batteries.Linter
✔ [198/2407] Built Batteries.Tactic.Basic
✔ [199/2407] Built Batteries.Tactic.Case
✔ [200/2407] Built Batteries.Tactic.Classical
✔ [201/2407] Built Batteries.Tactic.Congr
✔ [202/2407] Built Batteries.Tactic.Exact
✔ [203/2407] Built Batteries.Tactic.Instances
✔ [204/2407] Built Batteries.Tactic.NoMatch
✔ [205/2407] Built Batteries.Tactic.PrintDependents
✔ [206/2407] Built Batteries.Tactic.PrintPrefix
✔ [207/2407] Built Batteries.Tactic.ShowUnused
✔ [208/2407] Built Batteries.Tactic.SqueezeScope
✔ [209/2407] Built Batteries.Tactic.Where
✔ [210/2407] Built Batteries.Test.Internal.DummyLabelAttr
✔ [211/2407] Built Batteries.Util.CheckTactic
✔ [212/2407] Built Batteries.Util.ExtendedBinder
✔ [213/2407] Built Batteries.Util.Pickle
✔ [214/2407] Built Batteries.WF
✔ [215/2407] Built Mathlib.Tactic.PPWithUniv
✔ [216/2407] Built Mathlib.Tactic.ExtendDoc
✔ [217/2407] Built Mathlib.Tactic.AdaptationNote
✔ [218/2407] Built Mathlib.Tactic.Attr.Register
✔ [219/2407] Built Mathlib.Init.Set
✔ [220/2407] Built Mathlib.Mathport.Attributes
✔ [221/2407] Built Mathlib.Tactic.ProjectionNotation
✔ [222/2407] Built Mathlib.Tactic.Spread
✔ [223/2407] Built Aesop.Check
✔ [224/2407] Built Aesop.Nanos
✔ [225/2407] Built Aesop.Util.UnionFind
✔ [226/2407] Built Aesop.Options.Public
✔ [227/2407] Built Aesop.Options.Internal
✔ [228/2407] Built Aesop.Options
✔ [229/2407] Built Aesop.Percent
✔ [230/2407] Built Aesop.Util.EqualUpToIds
✔ [231/2407] Built Aesop.RuleSet.Name
✔ [232/2407] Built Aesop.ElabM
✔ [233/2407] Built Aesop.Frontend.Basic
✔ [234/2407] Built Aesop.RuleTac.ElabRuleTerm
✔ [235/2407] Built Aesop.Constants
✔ [236/2407] Built Aesop.Exception
✔ [237/2407] Built Mathlib.Util.CompileInductive
✔ [238/2407] Built Mathlib.Init.Data.Ordering.Basic
✔ [239/2407] Built Mathlib.Tactic.GCongr.ForwardAttr
✔ [240/2407] Built Mathlib.Tactic.Conv
✔ [241/2407] Built Mathlib.Tactic.SimpRw
✔ [242/2407] Built Mathlib.Tactic.Inhabit
✔ [243/2407] Built Mathlib.Data.Option.Defs
✔ [244/2407] Built Mathlib.Init.Data.Sigma.Basic
✔ [245/2407] Built Mathlib.Init.Data.Quot
✔ [246/2407] Built Mathlib.Lean.Elab.Term
✔ [247/2407] Built Mathlib.Lean.PrettyPrinter.Delaborator
✔ [248/2407] Built Mathlib.Util.WithWeakNamespace
✔ [249/2407] Built Mathlib.Tactic.ScopedNS
✔ [250/2407] Built Mathlib.Tactic.Coe
✔ [251/2407] Built Mathlib.Tactic.Substs
✔ [252/2407] Built Qq.ForLean.ReduceEval
✔ [253/2407] Built Qq.ForLean.ToExpr
✔ [254/2407] Built Qq.Typ
✔ [255/2407] Built Mathlib.Tactic.Attr.Core
✔ [256/2407] Built Mathlib.Util.Tactic
✔ [257/2407] Built Mathlib.Tactic.CasesM
✔ [258/2407] Built Qq.ForLean.Do
✔ [259/2407] Built Qq.SortLocalDecls
✔ [260/2407] Built ImportGraph.RequiredModules
✔ [261/2407] Built ImportGraph.Imports
✔ [262/2407] Built Mathlib.Tactic.ApplyCongr
✔ [263/2407] Built Mathlib.Lean.Meta.Basic
✔ [264/2407] Built Mathlib.Tactic.ApplyAt
✔ [265/2407] Built Mathlib.Tactic.ApplyWith
✔ [266/2407] Built Mathlib.Tactic.Check
✔ [267/2407] Built Mathlib.Tactic.ClearExclamation
✔ [268/2407] Built Mathlib.Tactic.ClearExcept
✔ [269/2407] Built Mathlib.Tactic.Clear_
✔ [270/2407] Built Mathlib.Tactic.Constructor
✔ [271/2407] Built Mathlib.Tactic.ToLevel
✔ [272/2407] Built Mathlib.Tactic.Existsi
✔ [273/2407] Built Mathlib.Tactic.ExtractGoal
✔ [274/2407] Built Mathlib.Tactic.FailIfNoProgress
✔ [275/2407] Built Mathlib.Tactic.GuardGoalNums
✔ [276/2407] Built Mathlib.Tactic.GuardHypNums
✔ [277/2407] Built Mathlib.Tactic.HigherOrder
✔ [278/2407] Built Mathlib.Tactic.Hint
✔ [279/2407] Built Mathlib.Tactic.InferParam
✔ [280/2407] Built Mathlib.Tactic.Lint
✔ [281/2407] Built Mathlib.Tactic.NthRewrite
✔ [282/2407] Built Mathlib.Tactic.Observe
✔ [283/2407] Built Mathlib.Tactic.Recover
✔ [284/2407] Built Mathlib.Tactic.Relation.Rfl
✔ [285/2407] Built Mathlib.Tactic.Rename
✔ [286/2407] Built Mathlib.Tactic.Set
✔ [287/2407] Built Mathlib.Tactic.SimpIntro
✔ [288/2407] Built Mathlib.Tactic.SuccessIfFailWithMsg
✔ [289/2407] Built Mathlib.Tactic.SudoSetOption
✔ [290/2407] Built Mathlib.Tactic.SwapVar
✔ [291/2407] Built Mathlib.Util.WhatsNew
✔ [292/2407] Built Mathlib.Tactic.Trace
✔ [293/2407] Built Mathlib.Tactic.TypeCheck
✔ [294/2407] Built Mathlib.Tactic.UnsetOption
✔ [295/2407] Built ProofWidgets.Compat
✔ [296/2407] Built ProofWidgets.Component.Basic
✔ [297/2407] Built ProofWidgets.Component.MakeEditLink
✔ [298/2407] Built ProofWidgets.Util
✔ [299/2407] Built ProofWidgets.Cancellable
✔ [300/2407] Built Mathlib.Tactic.Widget.SelectInsertParamsClass
✔ [301/2407] Built Mathlib.Util.CountHeartbeats
✔ [302/2407] Built Mathlib.Tactic.Monotonicity.Attr
✔ [303/2407] Built Mathlib.Init.Control.Combinators
✔ [304/2407] Built Mathlib.Data.Bracket
✔ [305/2407] Built Mathlib.Control.ULift
✔ [306/2407] Built Mathlib.Tactic.HaveI
✔ [307/2407] Built Mathlib.Util.AtomM
✔ [308/2407] Built Mathlib.Tactic.TryThis
✔ [309/2407] Built Mathlib.Init.Data.Fin.Basic
✔ [310/2407] Built Mathlib.Init.Quot
✔ [311/2407] Built Mathlib.Tactic.Relation.Symm
✔ [312/2407] Built Mathlib.Util.AddRelatedDecl
✔ [313/2407] Built Mathlib.CategoryTheory.ConcreteCategory.Bundled
✔ [314/2407] Built Mathlib.Util.DischargerAsTactic
✔ [315/2407] Built Mathlib.Tactic.Explode.Datatypes
✔ [316/2407] Built Mathlib.Tactic.Explode.Pretty
✔ [317/2407] Built Mathlib.Tactic.FunProp.StateList
✔ [318/2407] Built Mathlib.Init.Data.Sigma.Lex
✔ [319/2407] Built Batteries.Data.Sum.Lemmas
✔ [320/2407] Built Mathlib.Tactic.Clean
✔ [321/2407] Built Mathlib.Init.Data.Prod
✔ [322/2407] Built Batteries.Data.Array.Merge
✔ [323/2407] Built Batteries.Data.Int
✔ [324/2407] Built Mathlib.Tactic.FunProp.Decl
✔ [325/2407] Built Mathlib.Tactic.FunProp.ToBatteries
✔ [326/2407] Built Mathlib.Tactic.Monotonicity.Basic
✔ [327/2407] Built Mathlib.Tactic.ReduceModChar.Ext
✔ [328/2407] Built Mathlib.Tactic.Generalize
✔ [329/2407] Built Mathlib.Lean.Thunk
✔ [330/2407] Built Mathlib.Tactic.Variable
✔ [331/2407] Built Batteries.Data.Sum
✔ [332/2407] Built Auto.MathlibEmulator.DeriveToExpr:c.o
✔ [333/2407] Built Batteries.Lean.Meta.DiscrTree
✔ [334/2407] Built Mathlib.Tactic.Have
✔ [335/2407] Built Mathlib.Tactic.Recall
✔ [336/2407] Built Auto.MathlibEmulator.DeriveToExpr:dynlib
✔ [337/2407] Built Aesop.Util.UnorderedArraySet
✔ [338/2407] Built Mathlib.Tactic.DeriveToExpr
✔ [339/2407] Built Batteries.Data.Rat.Basic
✔ [340/2407] Built Mathlib.Tactic.Explode
✔ [341/2407] Built Mathlib.Tactic.Replace
✔ [342/2407] Built Mathlib.Tactic.SuppressCompilation
✔ [343/2407] Built Batteries.Data.BinomialHeap.Basic
✔ [344/2407] Built Batteries.Classes.RatCast
✔ [345/2407] Built Mathlib.Tactic.Use
⚠ [346/2407] Built Duper.DUnif.UnifProblem
warning: ././.lake/packages/Duper/././Duper/DUnif/UnifProblem.lean:324:15: unused variable `a`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [347/2407] Built Batteries.Util.Cache
✔ [348/2407] Built Mathlib.Tactic.Linarith.SimplexAlgorithm.Datatypes
✔ [349/2407] Built Mathlib.Tactic.ToExpr
✔ [350/2407] Built Batteries.Data.BinomialHeap.Lemmas
✔ [351/2407] Built Auto.MathlibEmulator.ToExpr
✔ [352/2407] Built Mathlib.Util.Delaborators
✔ [353/2407] Built Auto.Lib.ExprExtra:c.o
✔ [354/2407] Built Batteries.Data.BinomialHeap.Lemmas:c.o
✔ [355/2407] Built Auto.Lib.ExprExtra:dynlib
✔ [356/2407] Built Batteries.Data.BinomialHeap
✔ [357/2407] Built Mathlib.Data.Rat.Init
✔ [358/2407] Built Batteries.Data.BinomialHeap:c.o
✔ [359/2407] Built Batteries.Data.RBMap.Basic
✔ [360/2407] Built Mathlib.Tactic.HelpCmd
✔ [361/2407] Built Mathlib.Tactic.Linarith.SimplexAlgorithm.Gauss
✔ [362/2407] Built Batteries.Data.BinomialHeap.Basic:c.o
✔ [363/2407] Built Auto.MathlibEmulator.ToExpr:c.o
✔ [364/2407] Built Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithm
✔ [365/2407] Built Batteries.Data.BinomialHeap.Basic:dynlib
✔ [366/2407] Built Mathlib.Tactic.Find
✔ [367/2407] Built Auto.MathlibEmulator.ToExpr:dynlib
✔ [368/2407] Built ProofWidgets.Data.Html
✔ [369/2407] Built Batteries.Data.BinomialHeap.Lemmas:dynlib
✔ [370/2407] Built Batteries.Data.BinomialHeap:dynlib
✔ [371/2407] Built Auto.Translation.Reduction
✔ [372/2407] Built Mathlib.Tactic.Linarith.SimplexAlgorithm.PositiveVector
✔ [373/2407] Built Duper.Util.IdStrategyHeap
✔ [374/2407] Built Auto.MathlibEmulator
✔ [375/2407] Built ProofWidgets.Component.PenroseDiagram
✔ [376/2407] Built Auto.Lib.DeCompile
✔ [377/2407] Built Auto.Lib.MetaExtra
✔ [378/2407] Built Auto.MathlibEmulator:c.o
✔ [379/2407] Built Auto.MathlibEmulator:dynlib
✔ [380/2407] Built ProofWidgets.Component.OfRpcMethod
ℹ [381/2407] Built Duper.Util.StrategyHeap
info: ././.lake/packages/Duper/././Duper/Util/StrategyHeap.lean:142:0: 0
1
39
38
2
3
37
36
4
5
35
34
6
7
33
32
8
9
31
30
10
11
29
28
12
13
27
26
14
15
25
24
16
17
23
22
18
19
21
20
No
No
No
No
No
No
No
No
No
No
✔ [382/2407] Built Auto.Translation.Reduction:c.o
✔ [383/2407] Built Batteries.Data.Rat.Lemmas
✔ [384/2407] Built ProofWidgets.Presentation.Expr
✔ [385/2407] Built Auto.Translation.Reduction:dynlib
✔ [386/2407] Built Auto.Lib.ToExprExtra
✔ [387/2407] Built Batteries.Data.Rat
✔ [388/2407] Built Auto.Lib.ToExprExtra:c.o
✔ [389/2407] Built Mathlib.Tactic.FBinop
✔ [390/2407] Built Auto.Translation.Assumptions
✔ [391/2407] Built Auto.Lib.ToExprExtra:dynlib
✔ [392/2407] Built Duper.DUnif.UnifProblem:c.o
✔ [393/2407] Built Duper.Util.IdStrategyHeap:c.o
✔ [394/2407] Built Auto.Lib.MetaExtra:c.o
✔ [395/2407] Built Mathlib.Tactic.Widget.SelectPanelUtils
✔ [396/2407] Built Auto.Lib.DeCompile:c.o
✔ [397/2407] Built Auto.Lib.MetaExtra:dynlib
✔ [398/2407] Built Duper.DUnif.UnifProblem:dynlib
✔ [399/2407] Built Duper.Util.IdStrategyHeap:dynlib
✔ [400/2407] Built Mathlib.Data.SProd
✔ [401/2407] Built Auto.Lib.DeCompile:dynlib
⚠ [402/2407] Built Auto.Lib.Pos
warning: ././.lake/packages/auto/././Auto/Lib/Pos.lean:43:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Lib/Pos.lean:56:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [403/2407] Built Auto.Lib.Pos:c.o
✔ [404/2407] Built Auto.Lib.Pos:dynlib
✔ [405/2407] Built Duper.Util.StrategyHeap:c.o
✔ [406/2407] Built Duper.Util.StrategyHeap:dynlib
✔ [407/2407] Built Batteries.Data.List.Basic
✔ [408/2407] Built Mathlib.Data.String.Defs
✔ [409/2407] Built Qq.Macro
✔ [410/2407] Built Mathlib.Init.Data.List.Basic
✔ [411/2407] Built Auto.Lib.MonadUtils
✔ [412/2407] Built Batteries.Tactic.PermuteGoals
✔ [413/2407] Built Mathlib.Lean.Meta
✔ [414/2407] Built Mathlib.Tactic.Eval
✔ [415/2407] Built Auto.Translation.Assumptions:c.o
✔ [416/2407] Built Auto.Translation.Assumptions:dynlib
✔ [417/2407] Built Batteries.Data.AssocList
✔ [418/2407] Built Mathlib.Tactic.Widget.Conv
✔ [419/2407] Built Auto.Solver.Native
✔ [420/2407] Built Mathlib.Lean.Elab.Tactic.Basic
✔ [421/2407] Built Mathlib.Tactic.Widget.Calc
✔ [422/2407] Built Auto.Parser.NDFA:c.o
✔ [423/2407] Built Mathlib.Lean.Expr.Basic
✔ [424/2407] Built Auto.Parser.NDFA:dynlib
✔ [425/2407] Built Qq.Delab
✔ [426/2407] Built Auto.Solver.Native:c.o
✔ [427/2407] Built Auto.Solver.Native:dynlib
✔ [428/2407] Built Auto.Lib.MonadUtils:c.o
✔ [429/2407] Built Auto.Translation.Inhabitation
⚠ [430/2407] Built Auto.Lib.BinTree
warning: ././.lake/packages/auto/././Auto/Lib/BinTree.lean:33:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Lib/BinTree.lean:120:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Lib/BinTree.lean:200:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [431/2407] Built Duper.DUnif.Oracles
✔ [432/2407] Built Auto.Lib.MonadUtils:dynlib
✔ [433/2407] Built Auto.Translation.Preprocessing
✔ [434/2407] Built Mathlib.Tactic.RenameBVar
✔ [435/2407] Built Batteries.Data.HashMap.Basic
✔ [436/2407] Built Qq.MetaM
✔ [437/2407] Built Auto.Lib.BinTree:c.o
✔ [438/2407] Built Auto.Lib.BinTree:dynlib
✔ [439/2407] Built Mathlib.Data.HashMap
✔ [440/2407] Built Mathlib.Lean.Name
✔ [441/2407] Built Auto.Lib.MetaState
✔ [442/2407] Built Duper.DUnif.Oracles:c.o
✔ [443/2407] Built Mathlib.Tactic.Core
✔ [444/2407] Built Mathlib.Tactic.Cases
✔ [445/2407] Built Duper.DUnif.Oracles:dynlib
✔ [446/2407] Built Auto.Translation.Inhabitation:c.o
✔ [447/2407] Built Auto.Translation.Inhabitation:dynlib
ℹ [448/2407] Built Auto.Translation.Inductive
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:175:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Bool, Ctors : [false : Bool, true : Bool] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ List Bool, Ctors : [[] : List Bool, List.cons : Bool → List Bool → List Bool] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Bool, Ctors : [Array.mk : List Bool → Array Bool], Projs : [Array.data] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ List Nat, Ctors : [[] : List Nat, List.cons : Nat → List Nat → List Nat] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Nat, Ctors : [Array.mk : List Nat → Array Nat], Projs : [Array.data] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Bool ×
  Array Nat, Ctors : [Prod.mk : Array Bool → Array Nat → Array Bool × Array Nat], Projs : [Prod.fst, Prod.snd] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ tree, Ctors : [tree.leaf : Nat → tree, tree.node : treelist → tree] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ treelist, Ctors : [treelist.nil : treelist, treelist.cons : tree → treelist → treelist] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Int, Ctors : [Int.ofNat : Nat → Int, Int.negSucc : Nat → Int] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Tree Int, Ctors : [Tree.leaf : Int → Tree Int, Tree.node : TreeList Int → Tree Int] ⦘⦘
info: ././.lake/packages/auto/././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ TreeList
  Int, Ctors : [TreeList.nil : TreeList Int, TreeList.cons : Tree Int → TreeList Int → TreeList Int] ⦘⦘
✔ [449/2407] Built Mathlib.Mathport.Notation
✔ [450/2407] Built Qq.AssertInstancesCommute
✔ [451/2407] Built Auto.Lib.MetaState:c.o
⚠ [452/2407] Built Auto.Parser.LeanLex
warning: ././.lake/packages/auto/././Auto/Parser/LeanLex.lean:159:10: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [453/2407] Built Auto.Translation.Preprocessing:c.o
✔ [454/2407] Built Auto.Lib.MetaState:dynlib
✔ [455/2407] Built Auto.Translation.Preprocessing:dynlib
✔ [456/2407] Built Mathlib.Tactic.Relation.Trans
✔ [457/2407] Built Mathlib.Tactic.WLOG
✔ [458/2407] Built Auto.IR.SMT
✔ [459/2407] Built Mathlib.Tactic.Propose
✔ [460/2407] Built Mathlib.Tactic.CC.Datatypes
✔ [461/2407] Built Mathlib.Init.Core
⚠ [462/2407] Built Auto.Embedding.LCtx
warning: ././.lake/packages/auto/././Auto/Embedding/LCtx.lean:768:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [463/2407] Built Batteries.Data.RBMap.WF
✔ [464/2407] Built Auto.Embedding.LCtx:c.o
✔ [465/2407] Built Mathlib.Tactic.MkIffOfInductiveProp
✔ [466/2407] Built Auto.Embedding.LCtx:dynlib
✔ [467/2407] Built Auto.Translation.Inductive:c.o
✔ [468/2407] Built Auto.Translation.Inductive:dynlib
✔ [469/2407] Built Batteries.Data.RBMap.Depth
✔ [470/2407] Built Mathlib.Init.Logic
✔ [471/2407] Built Auto.IR.SMT:c.o
✔ [472/2407] Built Mathlib.Tactic.GeneralizeProofs
✔ [473/2407] Built Auto.Translation.ReifM
✔ [474/2407] Built Auto.IR.SMT:dynlib
✔ [475/2407] Built Mathlib.Init.Align
✔ [476/2407] Built Mathlib.Tactic.CC.Lemmas
✔ [477/2407] Built Mathlib.Init.Data.Bool.Lemmas
✔ [478/2407] Built Auto.Translation.ReifM:c.o
✔ [479/2407] Built Auto.Translation.ReifM:dynlib
✔ [480/2407] Built Mathlib.Init.Algebra.Classes
✔ [481/2407] Built Mathlib.Tactic.SplitIfs
✔ [482/2407] Built Batteries.Data.RBMap.Alter
✔ [483/2407] Built Mathlib.Tactic.Simps.Basic
✔ [484/2407] Built Mathlib.Init.Order.Defs
✔ [485/2407] Built Auto.Parser.LeanLex:c.o
✔ [486/2407] Built Auto.Parser.LeanLex:dynlib
✔ [487/2407] Built Qq.Match
✔ [488/2407] Built Mathlib.Init.Order.LinearOrder
✔ [489/2407] Built Mathlib.Init.Data.Int.Order
✔ [490/2407] Built Qq
ℹ [491/2407] Built Auto.Parser.LexInit
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:147:0: ADFA ⦗⦗
  Accept states := [4, 1, 0]
  Size (Malformed-input state) = 5
  Number of groups := 2
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\"\x7f"
  Group representing beginning of string := 2
  Group representing end of string := 3
  Group representing other utf-8 characters := 4
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
    1 : "\""
  (State, GroupIdx → State'):
    (0, 1 → 2)
    (0, 2 → 1)
    (1, 1 → 2)
    (1, 2 → 1)
    (2, 1 → 4)
    (2, 4 → 3)
    (3, 1 → 4)
    (3, 4 → 3)
    (4, 1 → 2)
  (State, Attributes)
    0 : []
    1 : []
    2 : []
    3 : []
    4 : []
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:148:0: ADFA ⦗⦗
  Accept states := [15, 14, 13, 12, 11, 7, 5, 4, 1, 17, 0, 16]
  Size (Malformed-input state) = 18
  Number of groups := 10
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\"#.0123456789ABCDEFabcdefx\x7f"
  Group representing beginning of string := 10
  Group representing end of string := 11
  Group representing other utf-8 characters := 12
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
    1 : "x"
    2 : "ABCDEFacdef"
    3 : "b"
    4 : "23456789"
    5 : "1"
    6 : "0"
    7 : "."
    8 : "#"
    9 : "\""
  (State, GroupIdx → State'):
    (0, 4 → 5)
    (0, 5 → 5)
    (0, 6 → 4)
    (0, 8 → 3)
    (0, 9 → 2)
    (0, 10 → 1)
    (1, 4 → 5)
    (1, 5 → 5)
    (1, 6 → 4)
    (1, 8 → 3)
    (1, 9 → 2)
    (1, 10 → 1)
    (2, 1 → 6)
    (2, 2 → 6)
    (2, 3 → 6)
    (2, 4 → 6)
    (2, 5 → 6)
    (2, 6 → 6)
    (2, 7 → 6)
    (2, 8 → 6)
    (2, 9 → 7)
    (2, 12 → 6)
    (3, 1 → 9)
    (3, 3 → 8)
    (4, 7 → 10)
    (5, 4 → 11)
    (5, 5 → 11)
    (5, 6 → 11)
    (5, 7 → 10)
    (6, 1 → 6)
    (6, 2 → 6)
    (6, 3 → 6)
    (6, 4 → 6)
    (6, 5 → 6)
    (6, 6 → 6)
    (6, 7 → 6)
    (6, 8 → 6)
    (6, 9 → 7)
    (6, 12 → 6)
    (7, 9 → 2)
    (8, 5 → 12)
    (8, 6 → 12)
    (9, 2 → 13)
    (9, 3 → 13)
    (9, 4 → 13)
    (9, 5 → 13)
    (9, 6 → 13)
    (10, 4 → 14)
    (10, 5 → 14)
    (10, 6 → 14)
    (11, 4 → 11)
    (11, 5 → 11)
    (11, 6 → 11)
    (11, 7 → 10)
    (12, 5 → 15)
    (12, 6 → 15)
    (13, 2 → 16)
    (13, 3 → 16)
    (13, 4 → 16)
    (13, 5 → 16)
    (13, 6 → 16)
    (14, 4 → 17)
    (14, 5 → 17)
    (14, 6 → 17)
    (15, 5 → 15)
    (15, 6 → 15)
    (16, 2 → 16)
    (16, 3 → 16)
    (16, 4 → 16)
    (16, 5 → 16)
    (16, 6 → 16)
    (17, 4 → 17)
    (17, 5 → 17)
    (17, 6 → 17)
  (State, Attributes)
    0 : [string]
    1 : [string]
    2 : []
    3 : []
    4 : [numeral]
    5 : [numeral]
    6 : []
    7 : [string]
    8 : []
    9 : []
    10 : []
    11 : [numeral]
    12 : [binary]
    13 : [hexadecimal]
    14 : [decimal]
    15 : [binary]
    16 : [hexadecimal]
    17 : [decimal]
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:149:0: ADFA ⦗⦗
  Accept states := [30, 29, 28, 27, 26, 25, 24, 23, 21, 19, 18, 16, 13, 8, 7, 6, 5, 4, 1, 0]
  Size (Malformed-input state) = 31
  Number of groups := 19
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!\"#$%&()*+-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_abcdefghijklmnopqrstuvwxyz|~\x7f"
  Group representing beginning of string := 19
  Group representing end of string := 20
  Group representing other utf-8 characters := 21
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
    1 : "!$%&*+-/<=>?@GHIJKLMNOPQRSTUVWXYZ^_ghijklmnopqrstuvwyz~"
    2 : "|"
    3 : "x"
    4 : "ABCDEFacdef"
    5 : "b"
    6 : "\\"
    7 : ";"
    8 : ":"
    9 : "23456789"
    10 : "1"
    11 : "0"
    12 : "."
    13 : ")"
    14 : "("
    15 : "#"
    16 : "\""
    17 : "\t\x0d"
    18 : "\n"
  (State, GroupIdx → State'):
    (0, 1 → 6)
    (0, 2 → 11)
    (0, 3 → 6)
    (0, 4 → 6)
    (0, 5 → 6)
    (0, 7 → 10)
    (0, 8 → 9)
    (0, 9 → 8)
    (0, 10 → 8)
    (0, 11 → 7)
    (0, 12 → 6)
    (0, 13 → 5)
    (0, 14 → 4)
    (0, 15 → 3)
    (0, 16 → 2)
    (0, 19 → 1)
    (1, 1 → 6)
    (1, 2 → 11)
    (1, 3 → 6)
    (1, 4 → 6)
    (1, 5 → 6)
    (1, 7 → 10)
    (1, 8 → 9)
    (1, 9 → 8)
    (1, 10 → 8)
    (1, 11 → 7)
    (1, 12 → 6)
    (1, 13 → 5)
    (1, 14 → 4)
    (1, 15 → 3)
    (1, 16 → 2)
    (1, 19 → 1)
    (2, 1 → 12)
    (2, 2 → 12)
    (2, 3 → 12)
    (2, 4 → 12)
    (2, 5 → 12)
    (2, 6 → 12)
    (2, 7 → 12)
    (2, 8 → 12)
    (2, 9 → 12)
    (2, 10 → 12)
    (2, 11 → 12)
    (2, 12 → 12)
    (2, 13 → 12)
    (2, 14 → 12)
    (2, 15 → 12)
    (2, 16 → 13)
    (2, 21 → 12)
    (3, 3 → 15)
    (3, 5 → 14)
    (6, 1 → 16)
    (6, 3 → 16)
    (6, 4 → 16)
    (6, 5 → 16)
    (6, 9 → 16)
    (6, 10 → 16)
    (6, 11 → 16)
    (6, 12 → 16)
    (7, 12 → 17)
    (8, 9 → 18)
    (8, 10 → 18)
    (8, 11 → 18)
    (8, 12 → 17)
    (9, 1 → 19)
    (9, 3 → 19)
    (9, 4 → 19)
    (9, 5 → 19)
    (9, 12 → 19)
    (10, 0 → 20)
    (10, 1 → 20)
    (10, 2 → 20)
    (10, 3 → 20)
    (10, 4 → 20)
    (10, 5 → 20)
    (10, 6 → 20)
    (10, 7 → 20)
    (10, 8 → 20)
    (10, 9 → 20)
    (10, 10 → 20)
    (10, 11 → 20)
    (10, 12 → 20)
    (10, 13 → 20)
    (10, 14 → 20)
    (10, 15 → 20)
    (10, 16 → 20)
    (10, 17 → 20)
    (10, 18 → 21)
    (10, 21 → 20)
    (11, 1 → 22)
    (11, 2 → 23)
    (11, 3 → 22)
    (11, 4 → 22)
    (11, 5 → 22)
    (11, 7 → 22)
    (11, 8 → 22)
    (11, 9 → 22)
    (11, 10 → 22)
    (11, 11 → 22)
    (11, 12 → 22)
    (11, 13 → 22)
    (11, 14 → 22)
    (11, 15 → 22)
    (11, 16 → 22)
    (11, 17 → 22)
    (11, 18 → 22)
    (11, 21 → 22)
    (12, 1 → 12)
    (12, 2 → 12)
    (12, 3 → 12)
    (12, 4 → 12)
    (12, 5 → 12)
    (12, 6 → 12)
    (12, 7 → 12)
    (12, 8 → 12)
    (12, 9 → 12)
    (12, 10 → 12)
    (12, 11 → 12)
    (12, 12 → 12)
    (12, 13 → 12)
    (12, 14 → 12)
    (12, 15 → 12)
    (12, 16 → 13)
    (12, 21 → 12)
    (13, 16 → 2)
    (14, 10 → 24)
    (14, 11 → 24)
    (15, 4 → 25)
    (15, 5 → 25)
    (15, 9 → 25)
    (15, 10 → 25)
    (15, 11 → 25)
    (16, 1 → 16)
    (16, 3 → 16)
    (16, 4 → 16)
    (16, 5 → 16)
    (16, 9 → 16)
    (16, 10 → 16)
    (16, 11 → 16)
    (16, 12 → 16)
    (17, 9 → 26)
    (17, 10 → 26)
    (17, 11 → 26)
    (18, 9 → 18)
    (18, 10 → 18)
    (18, 11 → 18)
    (18, 12 → 17)
    (19, 1 → 27)
    (19, 3 → 27)
    (19, 4 → 27)
    (19, 5 → 27)
    (19, 9 → 27)
    (19, 10 → 27)
    (19, 11 → 27)
    (19, 12 → 27)
    (20, 0 → 20)
    (20, 1 → 20)
    (20, 2 → 20)
    (20, 3 → 20)
    (20, 4 → 20)
    (20, 5 → 20)
    (20, 6 → 20)
    (20, 7 → 20)
    (20, 8 → 20)
    (20, 9 → 20)
    (20, 10 → 20)
    (20, 11 → 20)
    (20, 12 → 20)
    (20, 13 → 20)
    (20, 14 → 20)
    (20, 15 → 20)
    (20, 16 → 20)
    (20, 17 → 20)
    (20, 18 → 21)
    (20, 21 → 20)
    (22, 1 → 22)
    (22, 2 → 23)
    (22, 3 → 22)
    (22, 4 → 22)
    (22, 5 → 22)
    (22, 7 → 22)
    (22, 8 → 22)
    (22, 9 → 22)
    (22, 10 → 22)
    (22, 11 → 22)
    (22, 12 → 22)
    (22, 13 → 22)
    (22, 14 → 22)
    (22, 15 → 22)
    (22, 16 → 22)
    (22, 17 → 22)
    (22, 18 → 22)
    (22, 21 → 22)
    (24, 10 → 28)
    (24, 11 → 28)
    (25, 4 → 29)
    (25, 5 → 29)
    (25, 9 → 29)
    (25, 10 → 29)
    (25, 11 → 29)
    (26, 9 → 30)
    (26, 10 → 30)
    (26, 11 → 30)
    (27, 1 → 27)
    (27, 3 → 27)
    (27, 4 → 27)
    (27, 5 → 27)
    (27, 9 → 27)
    (27, 10 → 27)
    (27, 11 → 27)
    (27, 12 → 27)
    (28, 10 → 28)
    (28, 11 → 28)
    (29, 4 → 29)
    (29, 5 → 29)
    (29, 9 → 29)
    (29, 10 → 29)
    (29, 11 → 29)
    (30, 9 → 30)
    (30, 10 → 30)
    (30, 11 → 30)
  (State, Attributes)
    0 : [string]
    1 : [string]
    2 : []
    3 : []
    4 : [(]
    5 : [)]
    6 : [simplesymbol]
    7 : [numeral]
    8 : [numeral]
    9 : []
    10 : []
    11 : []
    12 : []
    13 : [string]
    14 : []
    15 : []
    16 : [simplesymbol]
    17 : []
    18 : [numeral]
    19 : [keyword]
    20 : []
    21 : [comment]
    22 : []
    23 : [quotedsymbol]
    24 : [binary]
    25 : [hexadecimal]
    26 : [decimal]
    27 : [keyword]
    28 : [binary]
    29 : [hexadecimal]
    30 : [decimal]
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:150:0: ADFA ⦗⦗
  Accept states := [12, 10, 9, 8, 6, 5, 4, 3, 2]
  Size (Malformed-input state) = 13
  Number of groups := 8
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!$%&()*+-./0123456789<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_abcdefghijklmnopqrstuvwxyz|~\x7f"
  Group representing beginning of string := 8
  Group representing end of string := 9
  Group representing other utf-8 characters := 10
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\\\x7f"
    1 : "!$%&*+-./<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^abcdefghijklmnopqrstuvwxyz~"
    2 : "|"
    3 : "_"
    4 : "123456789"
    5 : "0"
    6 : ")"
    7 : "("
  (State, GroupIdx → State'):
    (0, 1 → 8)
    (0, 2 → 7)
    (0, 3 → 6)
    (0, 4 → 5)
    (0, 5 → 4)
    (0, 6 → 3)
    (0, 7 → 2)
    (0, 8 → 1)
    (1, 1 → 8)
    (1, 2 → 7)
    (1, 3 → 6)
    (1, 4 → 5)
    (1, 5 → 4)
    (1, 6 → 3)
    (1, 7 → 2)
    (1, 8 → 1)
    (5, 4 → 9)
    (5, 5 → 9)
    (6, 1 → 10)
    (6, 3 → 10)
    (6, 4 → 10)
    (6, 5 → 10)
    (7, 1 → 11)
    (7, 2 → 12)
    (7, 3 → 11)
    (7, 4 → 11)
    (7, 5 → 11)
    (7, 6 → 11)
    (7, 7 → 11)
    (7, 10 → 11)
    (8, 1 → 10)
    (8, 3 → 10)
    (8, 4 → 10)
    (8, 5 → 10)
    (9, 4 → 9)
    (9, 5 → 9)
    (10, 1 → 10)
    (10, 3 → 10)
    (10, 4 → 10)
    (10, 5 → 10)
    (11, 1 → 11)
    (11, 2 → 12)
    (11, 3 → 11)
    (11, 4 → 11)
    (11, 5 → 11)
    (11, 6 → 11)
    (11, 7 → 11)
    (11, 10 → 11)
  (State, Attributes)
    0 : []
    1 : []
    2 : [(]
    3 : [)]
    4 : [numeral]
    5 : [numeral]
    6 : [_, simplesymbol]
    7 : []
    8 : [simplesymbol]
    9 : [numeral]
    10 : [simplesymbol]
    11 : []
    12 : [quotedsymbol]
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:151:0: ADFA ⦗⦗
  Accept states := [12, 10, 9, 8, 6, 5, 4, 3, 2]
  Size (Malformed-input state) = 13
  Number of groups := 8
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!$%&()*+-./0123456789<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_abcdefghijklmnopqrstuvwxyz|~\x7f"
  Group representing beginning of string := 8
  Group representing end of string := 9
  Group representing other utf-8 characters := 10
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\\\x7f"
    1 : "!$%&*+-./<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^abcdefghijklmnopqrstuvwxyz~"
    2 : "|"
    3 : "_"
    4 : "123456789"
    5 : "0"
    6 : ")"
    7 : "("
  (State, GroupIdx → State'):
    (0, 1 → 8)
    (0, 2 → 7)
    (0, 3 → 6)
    (0, 4 → 5)
    (0, 5 → 4)
    (0, 6 → 3)
    (0, 7 → 2)
    (0, 8 → 1)
    (1, 1 → 8)
    (1, 2 → 7)
    (1, 3 → 6)
    (1, 4 → 5)
    (1, 5 → 4)
    (1, 6 → 3)
    (1, 7 → 2)
    (1, 8 → 1)
    (5, 4 → 9)
    (5, 5 → 9)
    (6, 1 → 10)
    (6, 3 → 10)
    (6, 4 → 10)
    (6, 5 → 10)
    (7, 1 → 11)
    (7, 2 → 12)
    (7, 3 → 11)
    (7, 4 → 11)
    (7, 5 → 11)
    (7, 6 → 11)
    (7, 7 → 11)
    (7, 10 → 11)
    (8, 1 → 10)
    (8, 3 → 10)
    (8, 4 → 10)
    (8, 5 → 10)
    (9, 4 → 9)
    (9, 5 → 9)
    (10, 1 → 10)
    (10, 3 → 10)
    (10, 4 → 10)
    (10, 5 → 10)
    (11, 1 → 11)
    (11, 2 → 12)
    (11, 3 → 11)
    (11, 4 → 11)
    (11, 5 → 11)
    (11, 6 → 11)
    (11, 7 → 11)
    (11, 10 → 11)
  (State, Attributes)
    0 : []
    1 : []
    2 : [(]
    3 : [)]
    4 : [numeral]
    5 : [numeral]
    6 : [_, simplesymbol]
    7 : []
    8 : [simplesymbol]
    9 : [numeral]
    10 : [simplesymbol]
    11 : []
    12 : [quotedsymbol]
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:152:0: ADFA ⦗⦗
  Accept states := [12, 10, 9, 8, 6, 5, 4, 3, 2]
  Size (Malformed-input state) = 13
  Number of groups := 8
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!$%&()*+-./0123456789<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_abcdefghijklmnopqrstuvwxyz|~\x7f"
  Group representing beginning of string := 8
  Group representing end of string := 9
  Group representing other utf-8 characters := 10
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\\\x7f"
    1 : "!$%&*+-./<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^abcdefghijklmnopqrstuvwxyz~"
    2 : "|"
    3 : "_"
    4 : "123456789"
    5 : "0"
    6 : ")"
    7 : "("
  (State, GroupIdx → State'):
    (0, 1 → 8)
    (0, 2 → 7)
    (0, 3 → 6)
    (0, 4 → 5)
    (0, 5 → 4)
    (0, 6 → 3)
    (0, 7 → 2)
    (0, 8 → 1)
    (1, 1 → 8)
    (1, 2 → 7)
    (1, 3 → 6)
    (1, 4 → 5)
    (1, 5 → 4)
    (1, 6 → 3)
    (1, 7 → 2)
    (1, 8 → 1)
    (5, 4 → 9)
    (5, 5 → 9)
    (6, 1 → 10)
    (6, 3 → 10)
    (6, 4 → 10)
    (6, 5 → 10)
    (7, 1 → 11)
    (7, 2 → 12)
    (7, 3 → 11)
    (7, 4 → 11)
    (7, 5 → 11)
    (7, 6 → 11)
    (7, 7 → 11)
    (7, 10 → 11)
    (8, 1 → 10)
    (8, 3 → 10)
    (8, 4 → 10)
    (8, 5 → 10)
    (9, 4 → 9)
    (9, 5 → 9)
    (10, 1 → 10)
    (10, 3 → 10)
    (10, 4 → 10)
    (10, 5 → 10)
    (11, 1 → 11)
    (11, 2 → 12)
    (11, 3 → 11)
    (11, 4 → 11)
    (11, 5 → 11)
    (11, 6 → 11)
    (11, 7 → 11)
    (11, 10 → 11)
  (State, Attributes)
    0 : []
    1 : []
    2 : [(]
    3 : [)]
    4 : [numeral]
    5 : [numeral]
    6 : [_, simplesymbol]
    7 : []
    8 : [simplesymbol]
    9 : [numeral]
    10 : [simplesymbol]
    11 : []
    12 : [quotedsymbol]
⦘⦘
info: ././.lake/packages/auto/././Auto/Parser/LexInit.lean:153:0: ADFA ⦗⦗
  Accept states := [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 23, 22, 21, 20, 18, 15, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0]
  Size (Malformed-input state) = 41
  Number of groups := 26
  All relevant characters := "\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!\"#$%&()*+-./0123456789<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_abcdefghijklmnopqrstuvwxyz|~\x7f"
  Group representing beginning of string := 26
  Group representing end of string := 27
  Group representing other utf-8 characters := 28
  (GroupIdx, Group members):
    0 : "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
    1 : "!$%&*+-/<=>?@GHIJKLMNOPQRSTUVWXYZ^ghjkmnpquvwyz~"
    2 : "|"
    3 : "x"
    4 : "t"
    5 : "s"
    6 : "r"
    7 : "o"
    8 : "l"
    9 : "i"
    10 : "f"
    11 : "e"
    12 : "ABCDEFcd"
    13 : "b"
    14 : "a"
    15 : "_"
    16 : "\\"
    17 : "23456789"
    18 : "1"
    19 : "0"
    20 : "."
    21 : ")"
    22 : "("
    23 : "#"
    24 : "\""
    25 : "\t\n\x0d"
  (State, GroupIdx → State'):
    (0, 1 → 6)
    (0, 2 → 13)
    (0, 3 → 6)
    (0, 4 → 6)
    (0, 5 → 6)
    (0, 6 → 6)
    (0, 7 → 6)
    (0, 8 → 12)
    (0, 9 → 6)
    (0, 10 → 11)
    (0, 11 → 10)
    (0, 12 → 6)
    (0, 13 → 6)
    (0, 14 → 6)
    (0, 15 → 9)
    (0, 17 → 8)
    (0, 18 → 8)
    (0, 19 → 7)
    (0, 20 → 6)
    (0, 21 → 5)
    (0, 22 → 4)
    (0, 23 → 3)
    (0, 24 → 2)
    (0, 26 → 1)
    (1, 1 → 6)
    (1, 2 → 13)
    (1, 3 → 6)
    (1, 4 → 6)
    (1, 5 → 6)
    (1, 6 → 6)
    (1, 7 → 6)
    (1, 8 → 12)
    (1, 9 → 6)
    (1, 10 → 11)
    (1, 11 → 10)
    (1, 12 → 6)
    (1, 13 → 6)
    (1, 14 → 6)
    (1, 15 → 9)
    (1, 17 → 8)
    (1, 18 → 8)
    (1, 19 → 7)
    (1, 20 → 6)
    (1, 21 → 5)
    (1, 22 → 4)
    (1, 23 → 3)
    (1, 24 → 2)
    (1, 26 → 1)
    (2, 1 → 14)
    (2, 2 → 14)
    (2, 3 → 14)
    (2, 4 → 14)
    (2, 5 → 14)
    (2, 6 → 14)
    (2, 7 → 14)
    (2, 8 → 14)
    (2, 9 → 14)
    (2, 10 → 14)
    (2, 11 → 14)
    (2, 12 → 14)
    (2, 13 → 14)
    (2, 14 → 14)
    (2, 15 → 14)
    (2, 16 → 14)
    (2, 17 → 14)
    (2, 18 → 14)
    (2, 19 → 14)
    (2, 20 → 14)
    (2, 21 → 14)
    (2, 22 → 14)
    (2, 23 → 14)
    (2, 24 → 15)
    (2, 28 → 14)
    (3, 3 → 17)
    (3, 13 → 16)
    (6, 1 → 18)
    (6, 3 → 18)
    (6, 4 → 18)
    (6, 5 → 18)
    (6, 6 → 18)
    (6, 7 → 18)
    (6, 8 → 18)
    (6, 9 → 18)
    (6, 10 → 18)
    (6, 11 → 18)
    (6, 12 → 18)
    (6, 13 → 18)
    (6, 14 → 18)
    (6, 15 → 18)
    (6, 17 → 18)
    (6, 18 → 18)
    (6, 19 → 18)
    (6, 20 → 18)
    (7, 20 → 19)
    (8, 17 → 20)
    (8, 18 → 20)
    (8, 19 → 20)
    (8, 20 → 19)
    (9, 1 → 18)
    (9, 3 → 18)
    (9, 4 → 18)
    (9, 5 → 18)
    (9, 6 → 18)
    (9, 7 → 18)
    (9, 8 → 18)
    (9, 9 → 18)
    (9, 10 → 18)
    (9, 11 → 18)
    (9, 12 → 18)
    (9, 13 → 18)
    (9, 14 → 18)
    (9, 15 → 18)
    (9, 17 → 18)
    (9, 18 → 18)
    (9, 19 → 18)
    (9, 20 → 18)
    (10, 1 → 18)
    (10, 3 → 21)
    (10, 4 → 18)
    (10, 5 → 18)
    (10, 6 → 18)
    (10, 7 → 18)
    (10, 8 → 18)
    (10, 9 → 18)
    (10, 10 → 18)
    (10, 11 → 18)
    (10, 12 → 18)
    (10, 13 → 18)
    (10, 14 → 18)
    (10, 15 → 18)
    (10, 17 → 18)
    (10, 18 → 18)
    (10, 19 → 18)
    (10, 20 → 18)
    (11, 1 → 18)
    (11, 3 → 18)
    (11, 4 → 18)
    (11, 5 → 18)
    (11, 6 → 18)
    (11, 7 → 22)
    (11, 8 → 18)
    (11, 9 → 18)
    (11, 10 → 18)
    (11, 11 → 18)
    (11, 12 → 18)
    (11, 13 → 18)
    (11, 14 → 18)
    (11, 15 → 18)
    (11, 17 → 18)
    (11, 18 → 18)
    (11, 19 → 18)
    (11, 20 → 18)
    (12, 1 → 18)
    (12, 3 → 18)
    (12, 4 → 18)
    (12, 5 → 18)
    (12, 6 → 18)
    (12, 7 → 18)
    (12, 8 → 18)
    (12, 9 → 18)
    (12, 10 → 18)
    (12, 11 → 23)
    (12, 12 → 18)
    (12, 13 → 18)
    (12, 14 → 18)
    (12, 15 → 18)
    (12, 17 → 18)
    (12, 18 → 18)
    (12, 19 → 18)
    (12, 20 → 18)
    (13, 1 → 24)
    (13, 2 → 25)
    (13, 3 → 24)
    (13, 4 → 24)
    (13, 5 → 24)
    (13, 6 → 24)
    (13, 7 → 24)
    (13, 8 → 24)
    (13, 9 → 24)
    (13, 10 → 24)
    (13, 11 → 24)
    (13, 12 → 24)
    (13, 13 → 24)
    (13, 14 → 24)
    (13, 15 → 24)
    (13, 17 → 24)
    (13, 18 → 24)
    (13, 19 → 24)
    (13, 20 → 24)
    (13, 21 → 24)
    (13, 22 → 24)
    (13, 23 → 24)
    (13, 24 → 24)
    (13, 25 → 24)
    (13, 28 → 24)
    (14, 1 → 14)
    (14, 2 → 14)
    (14, 3 → 14)
    (14, 4 → 14)
    (14, 5 → 14)
    (14, 6 → 14)
    (14, 7 → 14)
    (14, 8 → 14)
    (14, 9 → 14)
    (14, 10 → 14)
    (14, 11 → 14)
    (14, 12 → 14)
    (14, 13 → 14)
    (14, 14 → 14)
    (14, 15 → 14)
    (14, 16 → 14)
    (14, 17 → 14)
    (14, 18 → 14)
    (14, 19 → 14)
    (14, 20 → 14)
    (14, 21 → 14)
    (14, 22 → 14)
    (14, 23 → 14)
    (14, 24 → 15)
    (14, 28 → 14)
    (15, 24 → 2)
    (16, 18 → 26)
    (16, 19 → 26)
    (17, 17 → 27)
    (17, 18 → 27)
    (17, 19 → 27)
    (17, 10 → 27)
    (17, 11 → 27)
    (17, 12 → 27)
    (17, 13 → 27)
    (17, 14 → 27)
    (18, 1 → 18)
    (18, 3 → 18)
    (18, 4 → 18)
    (18, 5 → 18)
    (18, 6 → 18)
    (18, 7 → 18)
    (18, 8 → 18)
    (18, 9 → 18)
    (18, 10 → 18)
    (18, 11 → 18)
    (18, 12 → 18)
    (18, 13 → 18)
    (18, 14 → 18)
    (18, 15 → 18)
    (18, 17 → 18)
    (18, 18 → 18)
    (18, 19 → 18)
    (18, 20 → 18)
    (19, 17 → 28)
    (19, 18 → 28)
    (19, 19 → 28)
    (20, 17 → 20)
    (20, 18 → 20)
    (20, 19 → 20)
    (20, 20 → 19)
    (21, 1 → 18)
    (21, 3 → 18)
    (21, 4 → 18)
    (21, 5 → 18)
    (21, 6 → 18)
    (21, 7 → 18)
    (21, 8 → 18)
    (21, 9 → 29)
    (21, 10 → 18)
    (21, 11 → 18)
    (21, 12 → 18)
    (21, 13 → 18)
    (21, 14 → 18)
    (21, 15 → 18)
    (21, 17 → 18)
    (21, 18 → 18)
    (21, 19 → 18)
    (21, 20 → 18)
    (22, 1 → 18)
    (22, 3 → 18)
    (22, 4 → 18)
    (22, 5 → 18)
    (22, 6 → 30)
    (22, 7 → 18)
    (22, 8 → 18)
    (22, 9 → 18)
    (22, 10 → 18)
    (22, 11 → 18)
    (22, 12 → 18)
    (22, 13 → 18)
    (22, 14 → 18)
    (22, 15 → 18)
    (22, 17 → 18)
    (22, 18 → 18)
    (22, 19 → 18)
    (22, 20 → 18)
    (23, 1 → 18)
    (23, 3 → 18)
    (23, 4 → 31)
    (23, 5 → 18)
    (23, 6 → 18)
    (23, 7 → 18)
    (23, 8 → 18)
    (23, 9 → 18)
    (23, 10 → 18)
    (23, 11 → 18)
    (23, 12 → 18)
    (23, 13 → 18)
    (23, 14 → 18)
    (23, 15 → 18)
    (23, 17 → 18)
    (23, 18 → 18)
    (23, 19 → 18)
    (23, 20 → 18)
    (24, 1 → 24)
    (24, 2 → 25)
    (24, 3 → 24)
    (24, 4 → 24)
    (24, 5 → 24)
    (24, 6 → 24)
    (24, 7 → 24)
    (24, 8 → 24)
    (24, 9 → 24)
    (24, 10 → 24)
    (24, 11 → 24)
    (24, 12 → 24)
    (24, 13 → 24)
    (24, 14 → 24)
    (24, 15 → 24)
    (24, 17 → 24)
    (24, 18 → 24)
    (24, 19 → 24)
    (24, 20 → 24)
    (24, 21 → 24)
    (24, 22 → 24)
    (24, 23 → 24)
    (24, 24 → 24)
    (24, 25 → 24)
    (24, 28 → 24)
    (26, 18 → 32)
    (26, 19 → 32)
    (27, 17 → 33)
    (27, 18 → 33)
    (27, 19 → 33)
    (27, 10 → 33)
    (27, 11 → 33)
    (27, 12 → 33)
    (27, 13 → 33)
    (27, 14 → 33)
    (28, 17 → 34)
    (28, 18 → 34)
    (28, 19 → 34)
    (29, 1 → 18)
    (29, 3 → 18)
    (29, 4 → 18)
    (29, 5 → 35)
    (29, 6 → 18)
    (29, 7 → 18)
    (29, 8 → 18)
    (29, 9 → 18)
    (29, 10 → 18)
    (29, 11 → 18)
    (29, 12 → 18)
    (29, 13 → 18)
    (29, 14 → 18)
    (29, 15 → 18)
    (29, 17 → 18)
    (29, 18 → 18)
    (29, 19 → 18)
    (29, 20 → 18)
    (30, 1 → 18)
    (30, 3 → 18)
    (30, 4 → 18)
    (30, 5 → 18)
    (30, 6 → 18)
    (30, 7 → 18)
    (30, 8 → 18)
    (30, 9 → 18)
    (30, 10 → 18)
    (30, 11 → 18)
    (30, 12 → 18)
    (30, 13 → 18)
    (30, 14 → 36)
    (30, 15 → 18)
    (30, 17 → 18)
    (30, 18 → 18)
    (30, 19 → 18)
    (30, 20 → 18)
    (31, 1 → 18)
    (31, 3 → 18)
    (31, 4 → 18)
    (31, 5 → 18)
    (31, 6 → 18)
    (31, 7 → 18)
    (31, 8 → 18)
    (31, 9 → 18)
    (31, 10 → 18)
    (31, 11 → 18)
    (31, 12 → 18)
    (31, 13 → 18)
    (31, 14 → 18)
    (31, 15 → 18)
    (31, 17 → 18)
    (31, 18 → 18)
    (31, 19 → 18)
    (31, 20 → 18)
    (32, 18 → 32)
    (32, 19 → 32)
    (33, 17 → 33)
    (33, 18 → 33)
    (33, 19 → 33)
    (33, 10 → 33)
    (33, 11 → 33)
    (33, 12 → 33)
    (33, 13 → 33)
    (33, 14 → 33)
    (34, 17 → 34)
    (34, 18 → 34)
    (34, 19 → 34)
    (35, 1 → 18)
    (35, 3 → 18)
    (35, 4 → 37)
    (35, 5 → 18)
    (35, 6 → 18)
    (35, 7 → 18)
    (35, 8 → 18)
    (35, 9 → 18)
    (35, 10 → 18)
    (35, 11 → 18)
    (35, 12 → 18)
    (35, 13 → 18)
    (35, 14 → 18)
    (35, 15 → 18)
    (35, 17 → 18)
    (35, 18 → 18)
    (35, 19 → 18)
    (35, 20 → 18)
    (36, 1 → 18)
    (36, 3 → 18)
    (36, 4 → 18)
    (36, 5 → 18)
    (36, 6 → 18)
    (36, 7 → 18)
    (36, 8 → 38)
    (36, 9 → 18)
    (36, 10 → 18)
    (36, 11 → 18)
    (36, 12 → 18)
    (36, 13 → 18)
    (36, 14 → 18)
    (36, 15 → 18)
    (36, 17 → 18)
    (36, 18 → 18)
    (36, 19 → 18)
    (36, 20 → 18)
    (37, 1 → 18)
    (37, 3 → 18)
    (37, 4 → 18)
    (37, 5 → 39)
    (37, 6 → 18)
    (37, 7 → 18)
    (37, 8 → 18)
    (37, 9 → 18)
    (37, 10 → 18)
    (37, 11 → 18)
    (37, 12 → 18)
    (37, 13 → 18)
    (37, 14 → 18)
    (37, 15 → 18)
    (37, 17 → 18)
    (37, 18 → 18)
    (37, 19 → 18)
    (37, 20 → 18)
    (38, 1 → 18)
    (38, 3 → 18)
    (38, 4 → 18)
    (38, 5 → 18)
    (38, 6 → 18)
    (38, 7 → 18)
    (38, 8 → 40)
    (38, 9 → 18)
    (38, 10 → 18)
    (38, 11 → 18)
    (38, 12 → 18)
    (38, 13 → 18)
    (38, 14 → 18)
    (38, 15 → 18)
    (38, 17 → 18)
    (38, 18 → 18)
    (38, 19 → 18)
    (38, 20 → 18)
    (39, 1 → 18)
    (39, 3 → 18)
    (39, 4 → 18)
    (39, 5 → 18)
    (39, 6 → 18)
    (39, 7 → 18)
    (39, 8 → 18)
    (39, 9 → 18)
    (39, 10 → 18)
    (39, 11 → 18)
    (39, 12 → 18)
    (39, 13 → 18)
    (39, 14 → 18)
    (39, 15 → 18)
    (39, 17 → 18)
    (39, 18 → 18)
    (39, 19 → 18)
    (39, 20 → 18)
    (40, 1 → 18)
    (40, 3 → 18)
    (40, 4 → 18)
    (40, 5 → 18)
    (40, 6 → 18)
    (40, 7 → 18)
    (40, 8 → 18)
    (40, 9 → 18)
    (40, 10 → 18)
    (40, 11 → 18)
    (40, 12 → 18)
    (40, 13 → 18)
    (40, 14 → 18)
    (40, 15 → 18)
    (40, 17 → 18)
    (40, 18 → 18)
    (40, 19 → 18)
    (40, 20 → 18)
  (State, Attributes)
    0 : [string]
    1 : [string]
    2 : []
    3 : []
    4 : [(]
    5 : [)]
    6 : [simplesymbol]
    7 : [numeral]
    8 : [numeral]
    9 : [_, simplesymbol]
    10 : [simplesymbol]
    11 : [simplesymbol]
    12 : [simplesymbol]
    13 : []
    14 : []
    15 : [string]
    16 : []
    17 : []
    18 : [simplesymbol]
    19 : []
    20 : [numeral]
    21 : [simplesymbol]
    22 : [simplesymbol]
    23 : [simplesymbol]
    24 : []
    25 : [quotedsymbol]
    26 : [binary]
    27 : [hexadecimal]
    28 : [decimal]
    29 : [simplesymbol]
    30 : [simplesymbol]
    31 : [simplesymbol, let]
    32 : [binary]
    33 : [hexadecimal]
    34 : [decimal]
    35 : [simplesymbol]
    36 : [simplesymbol]
    37 : [simplesymbol]
    38 : [simplesymbol]
    39 : [simplesymbol, exists]
    40 : [forall, simplesymbol]
⦘⦘
✔ [492/2407] Built Auto.Parser.LexInit:c.o
✔ [493/2407] Built Auto.Parser.LexInit:dynlib
✔ [494/2407] Built Mathlib.Util.Qq
✔ [495/2407] Built Mathlib.Util.SynthesizeUsing
✔ [496/2407] Built Mathlib.Tactic.Says
✔ [497/2407] Built Mathlib.Tactic.GCongr.Core
✔ [498/2407] Built Batteries.Data.List.Lemmas
⚠ [499/2407] Built Auto.Parser.SMTParser
warning: ././.lake/packages/auto/././Auto/Parser/SMTParser.lean:340:47: unused variable `val`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Parser/SMTParser.lean:426:10: unused variable `arg1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Parser/SMTParser.lean:426:19: unused variable `arg2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Parser/SMTParser.lean:426:27: unused variable `restArgs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [500/2407] Built Auto.Translation.Monomorphization
warning: ././.lake/packages/auto/././Auto/Translation/Monomorphization.lean:265:79: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [501/2407] Built Batteries.Lean.System.IO
✔ [502/2407] Built Mathlib.Init.Data.List.Instances
✔ [503/2407] Built Mathlib.Init.Data.List.Lemmas
✔ [504/2407] Built Batteries.Data.List.EraseIdx
✔ [505/2407] Built Mathlib.Data.List.TFAE
✔ [506/2407] Built Batteries.Data.MLList.IO
✔ [507/2407] Built Batteries.Data.List.Count
✔ [508/2407] Built Batteries.Data.MLList
✔ [509/2407] Built Batteries.Data.Range.Lemmas
✔ [510/2407] Built Mathlib.Tactic.ToAdditive
✔ [511/2407] Built Batteries.Data.Range
✔ [512/2407] Built Mathlib.Init.ZeroOne
✔ [513/2407] Built Mathlib.Init.Data.Nat.Basic
✔ [514/2407] Built Batteries.Data.List.Pairwise
✔ [515/2407] Built Mathlib.Tactic.TFAE
✔ [516/2407] Built Mathlib.Init.Data.Nat.Lemmas
✔ [517/2407] Built Auto.Parser.SMTParser:c.o
✔ [518/2407] Built Auto.Parser.SMTParser:dynlib
✔ [519/2407] Built Mathlib.Algebra.Group.Defs
✔ [520/2407] Built Batteries.Data.List.Perm
✔ [521/2407] Built Mathlib.Algebra.Group.Commutator
✔ [522/2407] Built Batteries.Data.List
✔ [523/2407] Built Mathlib.Algebra.Group.Semiconj.Defs
✔ [524/2407] Built Batteries.Data.String.Lemmas
✔ [525/2407] Built Mathlib.Data.Nat.Cast.Defs
✔ [526/2407] Built Mathlib.Algebra.Invertible.Defs
✔ [527/2407] Built Batteries.Data.String
✔ [528/2407] Built Mathlib.Data.List.EditDistance.Defs
✔ [529/2407] Built Auto.Solver.SMT
✔ [530/2407] Built Mathlib.Data.Int.Cast.Defs
✔ [531/2407] Built Mathlib.Algebra.Group.Commute.Defs
✔ [532/2407] Built Batteries.Data.Array.Lemmas
✔ [533/2407] Built Aesop.Util.Basic
✔ [534/2407] Built Batteries.Data.Array
✔ [535/2407] Built Batteries.Data.HashMap.Lemmas
✔ [536/2407] Built Batteries.Data.RBMap.Lemmas
✔ [537/2407] Built Auto.Translation.Monomorphization:c.o
✔ [538/2407] Built Batteries.Data.RBMap
✔ [539/2407] Built Auto.Translation.Monomorphization:dynlib
✔ [540/2407] Built Aesop.Rule.Name
✔ [541/2407] Built Auto.Solver.SMT:c.o
✔ [542/2407] Built Auto.Solver.SMT:dynlib
✔ [543/2407] Built Batteries.Data.ByteArray
✔ [544/2407] Built Aesop.Tracing
✔ [545/2407] Built Aesop.Util.Tactic
✔ [546/2407] Built Duper.Util.Misc:c.o
✔ [547/2407] Built Duper.Util.Misc:dynlib
✔ [548/2407] Built Aesop.Stats.Basic
✔ [549/2407] Built Aesop.Stats.Extension
✔ [550/2407] Built Aesop.RulePattern
✔ [551/2407] Built Duper.Util.AbstractMVars
✔ [552/2407] Built Aesop.Stats.Report
✔ [553/2407] Built Aesop.Index.Basic
✔ [554/2407] Built Aesop.Script
✔ [555/2407] Built Batteries.Data.HashMap.WF
✔ [556/2407] Built Batteries.Data.UnionFind.Basic
✔ [557/2407] Built Batteries.Data.HashMap
✔ [558/2407] Built Aesop.RuleTac.Basic
✔ [559/2407] Built Duper.Util.AbstractMVars:c.o
✔ [560/2407] Built Duper.Util.AbstractMVars:dynlib
⚠ [561/2407] Built Auto.Embedding.LamBase
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3388:14: unused variable `s₁`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3442:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3447:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3457:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3565:11: unused variable `s'`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3565:21: unused variable `s'`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3781:9: unused variable `lctxr_def`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:3947:2: unused variable `lctxTy`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:4030:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:4037:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBase.lean:4058:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [562/2407] Built Aesop.Rule.Basic
✔ [563/2407] Built Aesop.RuleTac.Preprocess
✔ [564/2407] Built Aesop.RuleTac.Apply
✔ [565/2407] Built Aesop.RuleTac.Tactic
✔ [566/2407] Built Aesop.RuleTac.Cases
✔ [567/2407] Built Aesop.Search.Expansion.Basic
⚠ [568/2407] Built Duper.DUnif.Bindings
warning: ././.lake/packages/Duper/././Duper/DUnif/Bindings.lean:317:52: unused variable `β`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/DUnif/Bindings.lean:317:97: unused variable `δ`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [569/2407] Built Aesop.RuleTac.Forward
⚠ [570/2407] Built Duper.Order
warning: ././.lake/packages/Duper/././Duper/Order.lean:350:26: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Order.lean:361:12: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Order.lean:441:23: unused variable `symbolPrecMap`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Order.lean:441:55: unused variable `highesetPrecSymbolHasArityZero`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [571/2407] Built Batteries.Data.UnionFind.Lemmas
✔ [572/2407] Built Aesop.RuleTac
✔ [573/2407] Built Batteries.Data.UnionFind
✔ [574/2407] Built Aesop.Index
✔ [575/2407] Built Batteries.StdDeprecations
✔ [576/2407] Built Aesop.Rule
✔ [577/2407] Built Batteries
✔ [578/2407] Built Aesop.RuleSet.Member
✔ [579/2407] Built Aesop.Tree.UnsafeQueue
✔ [580/2407] Built Aesop.RuleSet.Filter
✔ [581/2407] Built Aesop.Builder.Basic
✔ [582/2407] Built Mathlib.Tactic.Basic
✔ [583/2407] Built Aesop.Builder.Apply
✔ [584/2407] Built Aesop.Builder.Unfold
✔ [585/2407] Built Aesop.Builder.Cases
✔ [586/2407] Built Duper.Order:c.o
✔ [587/2407] Built Duper.DUnif.Bindings:c.o
✔ [588/2407] Built Aesop.Builder.Tactic
✔ [589/2407] Built Mathlib.Tactic.RSuffices
✔ [590/2407] Built Duper.Order:dynlib
✔ [591/2407] Built Aesop.Builder.NormSimp
✔ [592/2407] Built Aesop.Tree.Data
✔ [593/2407] Built Duper.DUnif.Bindings:dynlib
✔ [594/2407] Built Mathlib.Tactic.Change
✔ [595/2407] Built Mathlib.Init.Control.Lawful
✔ [596/2407] Built Mathlib.Init.Function
✔ [597/2407] Built Aesop.Builder.Constructors
✔ [598/2407] Built Auto.Embedding.LamBase:c.o
✔ [599/2407] Built Aesop.Builder.Forward
✔ [600/2407] Built Mathlib.Tactic.ExtractLets
✔ [601/2407] Built Mathlib.Tactic.LiftLets
✔ [602/2407] Built Auto.Embedding.LamBase:dynlib
✔ [603/2407] Built Mathlib.Order.Notation
✔ [604/2407] Built Aesop.Tree.RunMetaM
✔ [605/2407] Built Aesop.Tree.Traversal
✔ [606/2407] Built Mathlib.Data.Prod.PProd
✔ [607/2407] Built Mathlib.Logic.Function.CompTypeclasses
✔ [608/2407] Built Mathlib.Logic.Nonempty
✔ [609/2407] Built Mathlib.Logic.Nontrivial.Defs
✔ [610/2407] Built Mathlib.Logic.Relator
✔ [611/2407] Built Mathlib.Tactic.DefEqTransformations
✔ [612/2407] Built Auto.Embedding.LamInhReasoning
✔ [613/2407] Built Mathlib.Tactic.Lift
✔ [614/2407] Built Aesop.Builder.Default
✔ [615/2407] Built Auto.Embedding.LamInhReasoning:c.o
✔ [616/2407] Built Mathlib.Data.Bool.Basic
✔ [617/2407] Built Mathlib.Control.Basic
✔ [618/2407] Built Auto.Embedding.LamInhReasoning:dynlib
✔ [619/2407] Built Aesop.Tree.TreeM
✔ [620/2407] Built Mathlib.Data.Option.NAry
✔ [621/2407] Built Aesop.RuleSet
✔ [622/2407] Built Aesop.Builder
✔ [623/2407] Built Aesop.Tree.State
✔ [624/2407] Built Aesop.Tree.Tracing
✔ [625/2407] Built Aesop.Frontend.Extension.Init
✔ [626/2407] Built Aesop.Tree.Free
✔ [627/2407] Built Aesop.Tree.ExtractScript
✔ [628/2407] Built Aesop.Search.Expansion.Simp
✔ [629/2407] Built Mathlib.Control.Functor
✔ [630/2407] Built Mathlib.Logic.Basic
✔ [631/2407] Built Auto.Translation.LamUtils
✔ [632/2407] Built Aesop.Frontend.Extension
⚠ [633/2407] Built Duper.Clause
warning: ././.lake/packages/Duper/././Duper/Clause.lean:310:20: unused variable `instMonad`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [634/2407] Built Aesop.Tree.AddRapp
⚠ [635/2407] Built Auto.Embedding.LamBVarOp
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:419:12: unused variable `h₁`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:422:23: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:429:12: unused variable `h₁`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:430:12: unused variable `h₂`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:433:12: unused variable `h₁`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamBVarOp.lean:435:14: unused variable `h₂`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [636/2407] Built Mathlib.Algebra.NeZero
✔ [637/2407] Built Aesop.Tree.ExtractProof
✔ [638/2407] Built Mathlib.Control.Traversable.Basic
✔ [639/2407] Built Aesop.Tree.Check
✔ [640/2407] Built Mathlib.Data.Nat.Cast.NeZero
✔ [641/2407] Built Mathlib.Control.Applicative
✔ [642/2407] Built Mathlib.Data.List.Defs
✔ [643/2407] Built Aesop.Tree
✔ [644/2407] Built Auto.Embedding.LamBVarOp:c.o
✔ [645/2407] Built Auto.Embedding.LamBVarOp:dynlib
✔ [646/2407] Built Aesop.Search.Queue.Class
✔ [647/2407] Built Aesop.Frontend.RuleExpr
✔ [648/2407] Built Mathlib.Control.Traversable.Lemmas
✔ [649/2407] Built Mathlib.Tactic.Tauto
✔ [650/2407] Built Mathlib.Logic.Function.Basic
✔ [651/2407] Built Duper.DUnif.UnifRules
✔ [652/2407] Built Aesop.Search.SearchM
✔ [653/2407] Built Aesop.Search.Queue
✔ [654/2407] Built Aesop.Frontend.Attribute
✔ [655/2407] Built Auto.Translation.LamUtils:c.o
✔ [656/2407] Built Mathlib.Data.FunLike.Basic
✔ [657/2407] Built Auto.Translation.LamUtils:dynlib
✔ [658/2407] Built Mathlib.Logic.IsEmpty
✔ [659/2407] Built Mathlib.Tactic.PushNeg
✔ [660/2407] Built Mathlib.Algebra.CharZero.Defs
✔ [661/2407] Built Aesop.Search.RuleSelection
✔ [662/2407] Built Aesop.BuiltinRules.Ext
✔ [663/2407] Built Aesop.BuiltinRules.Intros
✔ [664/2407] Built Mathlib.Logic.Function.Conjugate
✔ [665/2407] Built Mathlib.Data.Subtype
✔ [666/2407] Built Aesop.BuiltinRules.Assumption
✔ [667/2407] Built Aesop.BuiltinRules.ApplyHyps
✔ [668/2407] Built Mathlib.Data.FunLike.Embedding
✔ [669/2407] Built Mathlib.Algebra.GroupWithZero.Defs
✔ [670/2407] Built Aesop.BuiltinRules.DestructProducts
✔ [671/2407] Built Aesop.BuiltinRules.Split
✔ [672/2407] Built Mathlib.Data.Prod.Basic
✔ [673/2407] Built Mathlib.Data.Sum.Basic
✔ [674/2407] Built Mathlib.Data.Sigma.Basic
✔ [675/2407] Built Duper.Clause:c.o
✔ [676/2407] Built Aesop.BuiltinRules.Subst
✔ [677/2407] Built Duper.Clause:dynlib
✔ [678/2407] Built Mathlib.Logic.Unique
✔ [679/2407] Built Mathlib.Tactic.Contrapose
✔ [680/2407] Built Mathlib.Tactic.FunProp.Mor
✔ [681/2407] Built Mathlib.Tactic.ByContra
✔ [682/2407] Built Aesop.Frontend.Command
✔ [683/2407] Built Mathlib.Data.FunLike.Equiv
✔ [684/2407] Built Mathlib.Algebra.GroupWithZero.NeZero
✔ [685/2407] Built Mathlib.Logic.Function.Iterate
✔ [686/2407] Built Mathlib.Logic.Relation
✔ [687/2407] Built Mathlib.Tactic.Choose
✔ [688/2407] Built Aesop.Frontend.Tactic
✔ [689/2407] Built Mathlib.Data.Set.Defs
✔ [690/2407] Built Mathlib.Logic.Nontrivial.Basic
✔ [691/2407] Built Aesop.Frontend
✔ [692/2407] Built Mathlib.Lean.Meta.CongrTheorems
✔ [693/2407] Built Mathlib.Algebra.Invertible.GroupWithZero
✔ [694/2407] Built Mathlib.Lean.Expr.ExtraRecognizers
✔ [695/2407] Built Duper.MClause
✔ [696/2407] Built Mathlib.Tactic.IrreducibleDef
✔ [697/2407] Built Aesop.BuiltinRules
✔ [698/2407] Built Mathlib.Tactic.FunProp.FunctionData
✔ [699/2407] Built Aesop.Search.Expansion.Norm
✔ [700/2407] Built Mathlib.Init.Classical
✔ [701/2407] Built Mathlib.Tactic.Nontriviality.Core
✔ [702/2407] Built Mathlib.Algebra.Ring.Defs
✔ [703/2407] Built Mathlib.Data.Quot
✔ [704/2407] Built Mathlib.Tactic.DeriveTraversable
✔ [705/2407] Built Mathlib.Tactic.FunProp.Types
✔ [706/2407] Built Mathlib.Tactic.Nontriviality
✔ [707/2407] Built Mathlib.Algebra.Group.Pi.Basic
✔ [708/2407] Built Duper.DUnif.UnifRules:c.o
✔ [709/2407] Built Duper.DUnif.UnifRules:dynlib
✔ [710/2407] Built Mathlib.Algebra.Ring.Semiconj
✔ [711/2407] Built Mathlib.Algebra.Field.Defs
⚠ [712/2407] Built Auto.Parser.TPTP
warning: ././.lake/packages/auto/././Auto/Parser/TPTP.lean:852:17: unused variable `name`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [713/2407] Built Duper.MClause:c.o
✔ [714/2407] Built Duper.MClause:dynlib
⚠ [715/2407] Built Duper.Util.DeeplyOccurringVars
warning: ././.lake/packages/Duper/././Duper/Util/DeeplyOccurringVars.lean:16:21: unused variable `ty`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/DeeplyOccurringVars.lean:17:17: unused variable `ty`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/DeeplyOccurringVars.lean:21:18: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [716/2407] Built Duper.Util.DeeplyOccurringVars:c.o
✔ [717/2407] Built Duper.Util.DeeplyOccurringVars:dynlib
✔ [718/2407] Built Aesop.Search.Expansion
✔ [719/2407] Built Mathlib.Logic.Equiv.Defs
✔ [720/2407] Built Mathlib.Tactic.Congr!
✔ [721/2407] Built Mathlib.Order.SetNotation
✔ [722/2407] Built Mathlib.Data.Finite.Defs
✔ [723/2407] Built Mathlib.Control.Monad.Basic
✔ [724/2407] Built Mathlib.Logic.Small.Defs
✔ [725/2407] Built Mathlib.Data.Opposite
✔ [726/2407] Built Aesop.Search.ExpandSafePrefix
✔ [727/2407] Built Mathlib.Control.Monad.Writer
✔ [728/2407] Built Mathlib.Tactic.Convert
✔ [729/2407] Built Mathlib.Data.Countable.Defs
✔ [730/2407] Built Mathlib.Algebra.Opposites
✔ [731/2407] Built Mathlib.Logic.UnivLE
✔ [732/2407] Built Mathlib.Tactic.ProdAssoc
✔ [733/2407] Built Mathlib.Combinatorics.Quiver.Basic
✔ [734/2407] Built Mathlib.Logic.Lemmas
✔ [735/2407] Built Mathlib.Control.EquivFunctor
✔ [736/2407] Built Mathlib.Tactic.ProxyType
✔ [737/2407] Built Mathlib.Control.Monad.Cont
✔ [738/2407] Built Mathlib.Combinatorics.Quiver.Push
✔ [739/2407] Built Mathlib.Algebra.Group.Hom.Defs
⚠ [740/2407] Built Duper.RuleM
warning: ././.lake/packages/Duper/././Duper/RuleM.lean:244:14: unused variable `bis`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/RuleM.lean:256:14: unused variable `bis`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/RuleM.lean:272:14: unused variable `bis`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [741/2407] Built Mathlib.Data.Nat.Defs
✔ [742/2407] Built Mathlib.Combinatorics.Quiver.Path
✔ [743/2407] Built Mathlib.Algebra.Group.Commute.Hom
✔ [744/2407] Built Mathlib.Algebra.GroupWithZero.Pi
✔ [745/2407] Built Mathlib.Algebra.Group.Hom.CompTypeclasses
✔ [746/2407] Built Mathlib.Data.Matrix.DMatrix
✔ [747/2407] Built Mathlib.Tactic.TermCongr
✔ [748/2407] Built Auto.Parser.TPTP:c.o
✔ [749/2407] Built Auto.Parser.TPTP:dynlib
✔ [750/2407] Built Mathlib.Combinatorics.Quiver.Symmetric
✔ [751/2407] Built Mathlib.Algebra.Group.TypeTags
✔ [752/2407] Built Mathlib.Tactic.Congrm
✔ [753/2407] Built Duper.RuleM:c.o
✔ [754/2407] Built Duper.RuleM:dynlib
✔ [755/2407] Built Mathlib.Data.Int.Defs
✔ [756/2407] Built Mathlib.Order.Basic
✔ [757/2407] Built Mathlib.Tactic.Widget.Congrm
✔ [758/2407] Built Mathlib.Order.ULift
✔ [759/2407] Built Mathlib.Algebra.Order.ZeroLEOne
✔ [760/2407] Built Mathlib.Order.Synonym
✔ [761/2407] Built Mathlib.Data.PNat.Defs
✔ [762/2407] Built Mathlib.Order.Compare
✔ [763/2407] Built Mathlib.Tactic.FunProp.RefinedDiscrTree
✔ [764/2407] Built Mathlib.Order.RelClasses
✔ [765/2407] Built Mathlib.Order.Max
✔ [766/2407] Built Mathlib.Algebra.Order.Group.Synonym
✔ [767/2407] Built Mathlib.Logic.Equiv.Basic
✔ [768/2407] Built Duper.Util.ClauseSubsumptionCheck
✔ [769/2407] Built Mathlib.Algebra.Order.Ring.Synonym
✔ [770/2407] Built Mathlib.Data.ULift
✔ [771/2407] Built Mathlib.Data.Sigma.Lex
✔ [772/2407] Built Duper.Util.ClauseSubsumptionCheck:c.o
✔ [773/2407] Built Duper.SubsumptionTrie
✔ [774/2407] Built Duper.Util.ClauseSubsumptionCheck:dynlib
✔ [775/2407] Built Aesop.Search.Main
⚠ [776/2407] Built Duper.Selection
warning: ././.lake/packages/Duper/././Duper/Selection.lean:220:10: unused variable `idx1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Selection.lean:220:27: unused variable `idx2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [777/2407] Built Mathlib.Tactic.FunProp.Theorems
✔ [778/2407] Built Aesop.Main
✔ [779/2407] Built Mathlib.Tactic.CC.Addition
✔ [780/2407] Built Aesop
✔ [781/2407] Built Mathlib.Tactic.FunProp.Attr
✔ [782/2407] Built Mathlib.Order.Monotone.Basic
✔ [783/2407] Built Mathlib.Tactic.SetLike
✔ [784/2407] Built Mathlib.Data.Finset.Attr
✔ [785/2407] Built Mathlib.Tactic.ArithMult.Init
✔ [786/2407] Built Mathlib.CategoryTheory.Category.Init
✔ [787/2407] Built Mathlib.Tactic.Measurability.Init
✔ [788/2407] Built Mathlib.Tactic.Continuity.Init
✔ [789/2407] Built Duper.Selection:c.o
✔ [790/2407] Built Mathlib.Tactic.Common
✔ [791/2407] Built Duper.Selection:dynlib
✔ [792/2407] Built Duper.SubsumptionTrie:c.o
✔ [793/2407] Built Mathlib.Tactic.CC
✔ [794/2407] Built Duper.SubsumptionTrie:dynlib
✔ [795/2407] Built Mathlib.Tactic.Measurability
✔ [796/2407] Built Mathlib.Tactic.ArithMult
✔ [797/2407] Built Mathlib.Order.Iterate
✔ [798/2407] Built Mathlib.Tactic.Continuity
✔ [799/2407] Built Mathlib.Data.Option.Basic
⚠ [800/2407] Built Auto.Embedding.LamSystem
warning: ././.lake/packages/auto/././Auto/Embedding/LamSystem.lean:594:14: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamSystem.lean:594:24: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamSystem.lean:600:14: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamSystem.lean:600:24: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [801/2407] Built Mathlib.Logic.Pairwise
✔ [802/2407] Built Mathlib.Data.Int.Sqrt
✔ [803/2407] Built Mathlib.Algebra.Quotient
✔ [804/2407] Built Mathlib.Control.Bifunctor
✔ [805/2407] Built Mathlib.Algebra.Group.WithOne.Defs
✔ [806/2407] Built Auto.Embedding.LamSystem:c.o
✔ [807/2407] Built Mathlib.Data.List.GetD
✔ [808/2407] Built Auto.Embedding.LamSystem:dynlib
✔ [809/2407] Built Mathlib.Data.Nat.Factorial.Basic
✔ [810/2407] Built Mathlib.Logic.Equiv.Functor
✔ [811/2407] Built Mathlib.CategoryTheory.Category.Basic
✔ [812/2407] Built Mathlib.Logic.Equiv.Option
✔ [813/2407] Built Mathlib.Logic.Embedding.Basic
✔ [814/2407] Built Mathlib.Control.ULiftable
✔ [815/2407] Built Mathlib.Order.Lattice
✔ [816/2407] Built Mathlib.Tactic.CategoryTheory.Slice
✔ [817/2407] Built Auto.Embedding.LamTermInterp
✔ [818/2407] Built Mathlib.Tactic.Widget.CommDiag
✔ [819/2407] Built Mathlib.CategoryTheory.Functor.Basic
✔ [820/2407] Built Mathlib.Data.Nat.Choose.Basic
✔ [821/2407] Built Auto.Embedding.LamTermInterp:c.o
✔ [822/2407] Built Mathlib.Algebra.Field.IsField
✔ [823/2407] Built Auto.Embedding.LamTermInterp:dynlib
⚠ [824/2407] Built Duper.Fingerprint
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:223:42: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:236:28: unused variable `childA`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:236:49: unused variable `childF`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:240:44: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:263:35: unused variable `childB`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:263:42: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:275:28: unused variable `childA`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:275:35: unused variable `childB`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:275:49: unused variable `childF`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:278:30: unused variable `childA`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:278:37: unused variable `childB`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:278:44: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:294:42: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:294:49: unused variable `childF`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:298:28: unused variable `childA`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:298:42: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:298:49: unused variable `childF`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:301:28: unused variable `childA`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:301:49: unused variable `childF`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Fingerprint.lean:305:44: unused variable `childN`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [825/2407] Built Mathlib.Tactic.CategoryTheory.Reassoc
✔ [826/2407] Built Mathlib.Order.MinMax
✔ [827/2407] Built Mathlib.Order.RelIso.Basic
✔ [828/2407] Built Mathlib.Tactic.FunProp.Core
✔ [829/2407] Built Mathlib.CategoryTheory.NatTrans
✔ [830/2407] Built Mathlib.Order.BoundedOrder
✔ [831/2407] Built Mathlib.Algebra.Group.Basic
✔ [832/2407] Built Mathlib.Tactic.FunProp.Elab
✔ [833/2407] Built Duper.Fingerprint:c.o
✔ [834/2407] Built Mathlib.Algebra.Group.Semiconj.Basic
✔ [835/2407] Built Mathlib.Algebra.Group.Embedding
✔ [836/2407] Built Mathlib.Tactic.FunProp
✔ [837/2407] Built Duper.Fingerprint:dynlib
✔ [838/2407] Built Mathlib.Data.Int.Cast.Basic
✔ [839/2407] Built Mathlib.Data.Prod.Lex
✔ [840/2407] Built Mathlib.Algebra.CovariantAndContravariant
✔ [841/2407] Built Mathlib.CategoryTheory.Iso
✔ [842/2407] Built Mathlib.GroupTheory.GroupAction.Defs
✔ [843/2407] Built Mathlib.Algebra.Ring.Idempotents
✔ [844/2407] Built Mathlib.Algebra.Ring.Basic
⚠ [845/2407] Built Auto.Embedding.LamLCtx
warning: ././.lake/packages/auto/././Auto/Embedding/LamLCtx.lean:45:33: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [846/2407] Built Mathlib.Algebra.Divisibility.Basic
✔ [847/2407] Built Auto.Embedding.LamLCtx:c.o
✔ [848/2407] Built Auto.Embedding.LamLCtx:dynlib
✔ [849/2407] Built Mathlib.Topology.Defs.Basic
✔ [850/2407] Built Mathlib.Algebra.Group.Commute.Basic
✔ [851/2407] Built Mathlib.Tactic.Zify
✔ [852/2407] Built Mathlib.Algebra.Group.Hom.Basic
✔ [853/2407] Built Mathlib.Tactic.MoveAdd
✔ [854/2407] Built Mathlib.GroupTheory.GroupAction.Ring
✔ [855/2407] Built Mathlib.Algebra.GroupWithZero.Basic
✔ [856/2407] Built Mathlib.Order.Disjoint
✔ [857/2407] Built Mathlib.Algebra.EuclideanDomain.Defs
✔ [858/2407] Built Mathlib.Order.PropInstances
✔ [859/2407] Built Mathlib.Algebra.Group.InjSurj
✔ [860/2407] Built Mathlib.CategoryTheory.Functor.Category
✔ [861/2407] Built Mathlib.Order.WithBot
✔ [862/2407] Built Mathlib.Data.List.Basic
✔ [863/2407] Built Mathlib.Algebra.Order.Ring.Lemmas
✔ [864/2407] Built Mathlib.Algebra.Group.Hom.Instances
✔ [865/2407] Built Mathlib.Algebra.Group.Units
✔ [866/2407] Built Mathlib.CategoryTheory.Thin
✔ [867/2407] Built Mathlib.Data.List.Count
✔ [868/2407] Built Mathlib.Algebra.Group.Equiv.Basic
✔ [869/2407] Built Mathlib.Data.List.Palindrome
✔ [870/2407] Built Mathlib.Data.List.Pairwise
✔ [871/2407] Built Mathlib.Data.List.ProdSigma
✔ [872/2407] Built Mathlib.Algebra.GroupWithZero.InjSurj
✔ [873/2407] Built Mathlib.Data.List.Enum
✔ [874/2407] Built Mathlib.Data.List.InsertNth
✔ [875/2407] Built Mathlib.Data.List.Join
✔ [876/2407] Built Mathlib.Data.List.Lattice
✔ [877/2407] Built Mathlib.Algebra.Order.Monoid.Lemmas
✔ [878/2407] Built Mathlib.Algebra.Group.Hom.End
✔ [879/2407] Built Mathlib.Algebra.Group.Semiconj.Units
✔ [880/2407] Built Mathlib.Data.List.Lex
✔ [881/2407] Built Mathlib.Algebra.Divisibility.Units
✔ [882/2407] Built Mathlib.CategoryTheory.NatIso
⚠ [883/2407] Built Duper.ProverM
warning: ././.lake/packages/Duper/././Duper/ProverM.lean:534:4: unused variable `allClauses`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [884/2407] Built Mathlib.Data.List.Infix
✔ [885/2407] Built Mathlib.GroupTheory.GroupAction.Units
✔ [886/2407] Built Mathlib.Algebra.Group.Units.Hom
✔ [887/2407] Built Mathlib.Algebra.Group.Equiv.TypeTags
✔ [888/2407] Built Mathlib.Algebra.Ring.Divisibility.Basic
✔ [889/2407] Built Mathlib.Algebra.GroupWithZero.Hom
✔ [890/2407] Built Mathlib.Algebra.Order.Monoid.NatCast
✔ [891/2407] Built Mathlib.Algebra.Order.Monoid.Defs
✔ [892/2407] Built Mathlib.Algebra.Order.Monoid.MinMax
✔ [893/2407] Built Mathlib.Algebra.Group.Commute.Units
✔ [894/2407] Built Mathlib.Data.List.Forall2
✔ [895/2407] Built Mathlib.Algebra.Regular.Basic
✔ [896/2407] Built Mathlib.Data.List.Permutation
✔ [897/2407] Built Mathlib.Algebra.Field.Equiv
✔ [898/2407] Built Mathlib.Algebra.GroupWithZero.Units.Basic
✔ [899/2407] Built Mathlib.Algebra.Order.Sub.Defs
✔ [900/2407] Built Mathlib.Data.List.MinMax
✔ [901/2407] Built Mathlib.Algebra.Group.Units.Equiv
✔ [902/2407] Built Mathlib.Algebra.Group.ULift
✔ [903/2407] Built Mathlib.Algebra.Order.Monoid.OrderDual
✔ [904/2407] Built Mathlib.Algebra.Ring.Regular
✔ [905/2407] Built Mathlib.Algebra.GroupWithZero.Semiconj
✔ [906/2407] Built Mathlib.Algebra.GroupWithZero.Units.Equiv
✔ [907/2407] Built Mathlib.Algebra.GroupWithZero.Divisibility
✔ [908/2407] Built Mathlib.Algebra.Ring.InjSurj
✔ [909/2407] Built Mathlib.Data.List.Zip
✔ [910/2407] Built Mathlib.CategoryTheory.Functor.FullyFaithful
✔ [911/2407] Built Mathlib.Algebra.Group.Opposite
✔ [912/2407] Built Mathlib.Algebra.Invertible.Basic
✔ [913/2407] Built Mathlib.Algebra.Order.Monoid.Canonical.Defs
✔ [914/2407] Built Mathlib.Order.Hom.Basic
✔ [915/2407] Built Mathlib.Algebra.GroupWithZero.Commute
✔ [916/2407] Built Mathlib.Algebra.GroupWithZero.WithZero
✔ [917/2407] Built Mathlib.Algebra.GroupPower.Ring
✔ [918/2407] Built Mathlib.Algebra.Invertible.Ring
✔ [919/2407] Built Mathlib.Order.Heyting.Basic
✔ [920/2407] Built Mathlib.Algebra.Group.Even
✔ [921/2407] Built Mathlib.Algebra.Ring.Hom.Defs
✔ [922/2407] Built Mathlib.Algebra.GroupPower.CovariantClass
✔ [923/2407] Built Mathlib.Algebra.Order.Monoid.Units
✔ [924/2407] Built Mathlib.Algebra.Order.Monoid.TypeTags
✔ [925/2407] Built Mathlib.Algebra.GroupWithZero.Units.Lemmas
✔ [926/2407] Built Mathlib.Algebra.Order.Monoid.Basic
✔ [927/2407] Built Mathlib.CategoryTheory.FullSubcategory
✔ [928/2407] Built Mathlib.Order.Antisymmetrization
✔ [929/2407] Built Mathlib.Data.List.Chain
✔ [930/2407] Built Mathlib.Algebra.EuclideanDomain.Basic
✔ [931/2407] Built Mathlib.GroupTheory.GroupAction.Opposite
✔ [932/2407] Built Mathlib.Data.List.EditDistance.Bounds
✔ [933/2407] Built Mathlib.Algebra.Group.Nat
✔ [934/2407] Built Mathlib.Tactic.ApplyFun
✔ [935/2407] Built Mathlib.CategoryTheory.EssentialImage
✔ [936/2407] Built Mathlib.Order.Estimator
✔ [937/2407] Built Mathlib.Algebra.Ring.Units
✔ [938/2407] Built Mathlib.CategoryTheory.Functor.Trifunctor
✔ [939/2407] Built Mathlib.Algebra.Ring.Nat
✔ [940/2407] Built Mathlib.Algebra.Order.Group.Nat
✔ [941/2407] Built Duper.ProverM:c.o
✔ [942/2407] Built Mathlib.Order.Hom.Bounded
✔ [943/2407] Built Duper.ProverM:dynlib
✔ [944/2407] Built Mathlib.Algebra.Ring.Opposite
✔ [945/2407] Built Mathlib.Algebra.Group.Int
✔ [946/2407] Built Mathlib.Algebra.Order.Monoid.WithTop
✔ [947/2407] Built Mathlib.Algebra.Order.Sub.Canonical
✔ [948/2407] Built Mathlib.Data.List.EditDistance.Estimator
✔ [949/2407] Built Mathlib.Data.Nat.Bits
✔ [950/2407] Built Mathlib.Data.Sum.Order
✔ [951/2407] Built Mathlib.Tactic.Sat.FromLRAT
✔ [952/2407] Built Mathlib.Algebra.Group.Prod
✔ [953/2407] Built Mathlib.Algebra.Ring.Commute
✔ [954/2407] Built Mathlib.CategoryTheory.Bicategory.Basic
✔ [955/2407] Built Mathlib.Algebra.Order.Sub.WithTop
✔ [956/2407] Built Mathlib.Data.Nat.Cast.WithTop
✔ [957/2407] Built Mathlib.Algebra.Ring.Int
✔ [958/2407] Built Mathlib.Data.Nat.Cast.Basic
✔ [959/2407] Built Mathlib.Data.Nat.Cast.Prod
✔ [960/2407] Built Mathlib.Algebra.GroupPower.IterateHom
✔ [961/2407] Built Mathlib.Data.Nat.Size
✔ [962/2407] Built Mathlib.Algebra.GroupWithZero.Prod
✔ [963/2407] Built Mathlib.Data.Nat.Cast.Commute
✔ [964/2407] Built Mathlib.Algebra.Order.Group.Defs
✔ [965/2407] Built Mathlib.Data.Int.Cast.Field
✔ [966/2407] Built Mathlib.Data.Num.Basic
✔ [967/2407] Built Mathlib.Tactic.NormNum.Result
✔ [968/2407] Built Mathlib.Algebra.Order.Monoid.Prod
✔ [969/2407] Built Mathlib.Data.Int.Cast.Prod
✔ [970/2407] Built Mathlib.Algebra.Order.Group.Units
✔ [971/2407] Built Mathlib.Algebra.Order.Group.Instances
✔ [972/2407] Built Mathlib.Algebra.Order.Group.TypeTags
✔ [973/2407] Built Duper.Simp
✔ [974/2407] Built Mathlib.Algebra.Order.Group.InjSurj
✔ [975/2407] Built Mathlib.Order.BooleanAlgebra
⚠ [976/2407] Built Duper.Util.ProofReconstruction
warning: ././.lake/packages/Duper/././Duper/Util/ProofReconstruction.lean:21:16: unused variable `bis`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [977/2407] Built Mathlib.Data.Tree
✔ [978/2407] Built Mathlib.Algebra.Order.Group.Prod
✔ [979/2407] Built Mathlib.Algebra.Order.Group.OrderIso
✔ [980/2407] Built Mathlib.GroupTheory.GroupAction.Prod
⚠ [981/2407] Built Duper.ClauseStreamHeap
warning: ././.lake/packages/Duper/././Duper/ClauseStreamHeap.lean:69:13: unused variable `c`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [982/2407] Built Duper.Simp:c.o
✔ [983/2407] Built Duper.Simp:dynlib
✔ [984/2407] Built Duper.Util.ProofReconstruction:c.o
✔ [985/2407] Built Duper.Util.ProofReconstruction:dynlib
✔ [986/2407] Built Mathlib.Algebra.Order.Group.Lattice
✔ [987/2407] Built Mathlib.Data.Nat.Bitwise
✔ [988/2407] Built Mathlib.Tactic.NormNum.Core
✔ [989/2407] Built Mathlib.CategoryTheory.Whiskering
✔ [990/2407] Built Mathlib.Algebra.SMulWithZero
✔ [991/2407] Built Mathlib.Algebra.Order.GroupWithZero.Canonical
✔ [992/2407] Built Mathlib.Algebra.Associated
✔ [993/2407] Built Duper.Rules.SyntacticTautologyDeletion1
✔ [994/2407] Built Mathlib.Algebra.Regular.SMul
✔ [995/2407] Built Duper.Rules.SyntacticTautologyDeletion1:c.o
✔ [996/2407] Built Duper.Rules.ClauseSubsumption
✔ [997/2407] Built Duper.Rules.SyntacticTautologyDeletion1:dynlib
✔ [998/2407] Built Duper.Rules.SyntacticTautologyDeletion2
✔ [999/2407] Built Duper.ClauseStreamHeap:c.o
✔ [1000/2407] Built Duper.Rules.SyntacticTautologyDeletion3
✔ [1001/2407] Built Duper.ClauseStreamHeap:dynlib
⚠ [1002/2407] Built Duper.Rules.BetaEtaReduction
warning: ././.lake/packages/Duper/././Duper/Rules/BetaEtaReduction.lean:17:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/BetaEtaReduction.lean:18:9: unused variable `parentsLits`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/BetaEtaReduction.lean:18:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1003/2407] Built Duper.Rules.EqualityResolution
warning: ././.lake/packages/Duper/././Duper/Rules/EqualityResolution.lean:16:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/EqualityResolution.lean:58:55: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1004/2407] Built Duper.Rules.IdentBoolFalseElim
warning: ././.lake/packages/Duper/././Duper/Rules/IdentBoolFalseElim.lean:26:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1005/2407] Built Duper.Rules.NeHoist
warning: ././.lake/packages/Duper/././Duper/Rules/NeHoist.lean:23:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/NeHoist.lean:95:44: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1006/2407] Built Duper.Rules.ClauseSubsumption:c.o
✔ [1007/2407] Built Duper.Rules.SyntacticTautologyDeletion2:c.o
✔ [1008/2407] Built Duper.Rules.SyntacticTautologyDeletion3:c.o
✔ [1009/2407] Built Duper.Rules.ClauseSubsumption:dynlib
⚠ [1010/2407] Built Duper.Rules.ClausifyPropEq
warning: ././.lake/packages/Duper/././Duper/Rules/ClausifyPropEq.lean:21:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ClausifyPropEq.lean:23:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ClausifyPropEq.lean:56:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ClausifyPropEq.lean:58:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ClausifyPropEq.lean:80:51: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1011/2407] Built Duper.Rules.ElimResolvedLit
warning: ././.lake/packages/Duper/././Duper/Rules/ElimResolvedLit.lean:17:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1012/2407] Built Duper.Rules.DestructiveEqualityResolution
warning: ././.lake/packages/Duper/././Duper/Rules/DestructiveEqualityResolution.lean:21:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1013/2407] Built Mathlib.Data.Int.Bitwise
⚠ [1014/2407] Built Duper.Rules.IdentPropFalseElim
warning: ././.lake/packages/Duper/././Duper/Rules/IdentPropFalseElim.lean:32:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1015/2407] Built Duper.Rules.SyntacticTautologyDeletion2:dynlib
✔ [1016/2407] Built Duper.Rules.SyntacticTautologyDeletion3:dynlib
✔ [1017/2407] Built Duper.Rules.BetaEtaReduction:c.o
⚠ [1018/2407] Built Duper.Rules.ArgumentCongruence
warning: ././.lake/packages/Duper/././Duper/Rules/ArgumentCongruence.lean:14:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ArgumentCongruence.lean:16:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ArgumentCongruence.lean:84:44: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1019/2407] Built Duper.Rules.BetaEtaReduction:dynlib
⚠ [1020/2407] Built Duper.Rules.EqualitySubsumption
warning: ././.lake/packages/Duper/././Duper/Rules/EqualitySubsumption.lean:35:24: unused variable `cToLoad`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1021/2407] Built Duper.Rules.DecElim
warning: ././.lake/packages/Duper/././Duper/Rules/DecElim.lean:27:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1022/2407] Built Duper.Rules.ExistsHoist
warning: ././.lake/packages/Duper/././Duper/Rules/ExistsHoist.lean:22:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ExistsHoist.lean:96:48: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1023/2407] Built Duper.Rules.ElimDupLit
warning: ././.lake/packages/Duper/././Duper/Rules/ElimDupLit.lean:14:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ElimDupLit.lean:16:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1024/2407] Built Duper.Rules.EqualityResolution:c.o
✔ [1025/2407] Built Duper.Rules.IdentBoolFalseElim:c.o
⚠ [1026/2407] Built Duper.Rules.FalseElim
warning: ././.lake/packages/Duper/././Duper/Rules/FalseElim.lean:28:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/FalseElim.lean:75:46: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1027/2407] Built Duper.Rules.IdentBoolHoist
warning: ././.lake/packages/Duper/././Duper/Rules/IdentBoolHoist.lean:35:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/IdentBoolHoist.lean:37:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1028/2407] Built Duper.Rules.FluidSup
warning: ././.lake/packages/Duper/././Duper/Rules/FluidSup.lean:15:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1029/2407] Built Duper.Rules.IdentBoolFalseElim:dynlib
✔ [1030/2407] Built Mathlib.Order.SymmDiff
⚠ [1031/2407] Built Duper.Rules.Demodulation
warning: ././.lake/packages/Duper/././Duper/Rules/Demodulation.lean:17:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Demodulation.lean:19:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Demodulation.lean:89:7: unused variable `partnerClauseNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Demodulation.lean:172:7: unused variable `partnerClauseNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1032/2407] Built Duper.Rules.EqualityResolution:dynlib
✔ [1033/2407] Built Duper.Rules.DestructiveEqualityResolution:c.o
⚠ [1034/2407] Built Duper.Rules.ContextualLiteralCutting
warning: ././.lake/packages/Duper/././Duper/Rules/ContextualLiteralCutting.lean:18:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1035/2407] Built Duper.Rules.EqHoist
warning: ././.lake/packages/Duper/././Duper/Rules/EqHoist.lean:24:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/EqHoist.lean:95:44: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1036/2407] Built Duper.Rules.EqualityFactoring
warning: ././.lake/packages/Duper/././Duper/Rules/EqualityFactoring.lean:54:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/EqualityFactoring.lean:56:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/EqualityFactoring.lean:169:54: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1037/2407] Built Duper.Rules.IdentPropFalseElim:c.o
✔ [1038/2407] Built Duper.Rules.DestructiveEqualityResolution:dynlib
⚠ [1039/2407] Built Duper.Rules.ForallHoist
warning: ././.lake/packages/Duper/././Duper/Rules/ForallHoist.lean:22:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/ForallHoist.lean:106:48: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1040/2407] Built Duper.Rules.IdentPropFalseElim:dynlib
✔ [1041/2407] Built Duper.Rules.ClausifyPropEq:c.o
✔ [1042/2407] Built Duper.Rules.ElimResolvedLit:c.o
✔ [1043/2407] Built Duper.Rules.ElimDupLit:c.o
✔ [1044/2407] Built Duper.Rules.ElimResolvedLit:dynlib
✔ [1045/2407] Built Duper.Rules.ClausifyPropEq:dynlib
✔ [1046/2407] Built Duper.Rules.ElimDupLit:dynlib
✔ [1047/2407] Built Duper.Rules.FalseElim:c.o
✔ [1048/2407] Built Duper.Rules.DecElim:c.o
✔ [1049/2407] Built Duper.Rules.FalseElim:dynlib
✔ [1050/2407] Built Duper.Rules.DecElim:dynlib
✔ [1051/2407] Built Duper.Rules.NeHoist:c.o
✔ [1052/2407] Built Duper.Rules.ArgumentCongruence:c.o
✔ [1053/2407] Built Mathlib.Algebra.Field.Basic
⚠ [1054/2407] Built Duper.Rules.SimplifyReflect
warning: ././.lake/packages/Duper/././Duper/Rules/SimplifyReflect.lean:18:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/SimplifyReflect.lean:60:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1055/2407] Built Duper.Rules.NeHoist:dynlib
✔ [1056/2407] Built Duper.Rules.ArgumentCongruence:dynlib
✔ [1057/2407] Built Duper.Rules.ExistsHoist:c.o
✔ [1058/2407] Built Duper.Rules.ExistsHoist:dynlib
✔ [1059/2407] Built Duper.Rules.IdentBoolHoist:c.o
✔ [1060/2407] Built Duper.Rules.IdentBoolHoist:dynlib
✔ [1061/2407] Built Duper.Rules.EqualitySubsumption:c.o
✔ [1062/2407] Built Duper.Rules.EqHoist:c.o
✔ [1063/2407] Built Duper.Rules.ForallHoist:c.o
✔ [1064/2407] Built Duper.Rules.ContextualLiteralCutting:c.o
✔ [1065/2407] Built Duper.Rules.EqualitySubsumption:dynlib
✔ [1066/2407] Built Duper.Rules.ForallHoist:dynlib
✔ [1067/2407] Built Duper.Rules.ContextualLiteralCutting:dynlib
✔ [1068/2407] Built Duper.Rules.EqHoist:dynlib
✔ [1069/2407] Built Mathlib.Algebra.Order.Group.Abs
✔ [1070/2407] Built Duper.Rules.EqualityFactoring:c.o
✔ [1071/2407] Built Duper.Rules.EqualityFactoring:dynlib
✔ [1072/2407] Built Duper.Rules.Demodulation:c.o
✔ [1073/2407] Built Mathlib.Algebra.Order.Hom.Monoid
✔ [1074/2407] Built Duper.Rules.Demodulation:dynlib
✔ [1075/2407] Built Mathlib.Algebra.Order.Group.Int
✔ [1076/2407] Built Duper.Rules.FluidSup:c.o
✔ [1077/2407] Built Mathlib.Algebra.Order.Group.MinMax
✔ [1078/2407] Built Duper.Rules.FluidSup:dynlib
⚠ [1079/2407] Built Duper.Rules.Superposition
warning: ././.lake/packages/Duper/././Duper/Rules/Superposition.lean:65:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Superposition.lean:67:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Superposition.lean:113:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/Superposition.lean:115:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [1080/2407] Built Duper.Rules.Clausification
warning: ././.lake/packages/Duper/././Duper/Rules/Clausification.lean:273:44: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1081/2407] Built Mathlib.Algebra.EuclideanDomain.Instances
⚠ [1082/2407] Built Duper.Rules.BoolHoist
warning: ././.lake/packages/Duper/././Duper/Rules/BoolHoist.lean:45:46: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1083/2407] Built Duper.Rules.SimplifyReflect:c.o
⚠ [1084/2407] Built Duper.Rules.BoolSimp
warning: ././.lake/packages/Duper/././Duper/Rules/BoolSimp.lean:701:49: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/BoolSimp.lean:722:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/BoolSimp.lean:724:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1085/2407] Built Duper.Rules.SimplifyReflect:dynlib
✔ [1086/2407] Built Duper.Rules.BoolHoist:c.o
✔ [1087/2407] Built Duper.Rules.BoolHoist:dynlib
✔ [1088/2407] Built Mathlib.Algebra.Order.Group.PosPart
✔ [1089/2407] Built Mathlib.Tactic.NormNum.Basic
✔ [1090/2407] Built Duper.Rules.Clausification:c.o
✔ [1091/2407] Built Duper.Rules.Clausification:dynlib
✔ [1092/2407] Built Mathlib.Algebra.GCDMonoid.Basic
⚠ [1093/2407] Built Duper.Rules.FluidBoolHoist
warning: ././.lake/packages/Duper/././Duper/Rules/FluidBoolHoist.lean:30:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Rules/FluidBoolHoist.lean:135:51: unused variable `cNum`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1094/2407] Built Mathlib.Order.Hom.Lattice
✔ [1095/2407] Built Mathlib.Algebra.GCDMonoid.Nat
✔ [1096/2407] Built Duper.BackwardSimplification
✔ [1097/2407] Built Mathlib.Algebra.Order.Ring.Defs
✔ [1098/2407] Built Duper.BackwardSimplification:c.o
✔ [1099/2407] Built Duper.BackwardSimplification:dynlib
✔ [1100/2407] Built Duper.Rules.FluidBoolHoist:c.o
✔ [1101/2407] Built Mathlib.Algebra.Order.Ring.CharZero
✔ [1102/2407] Built Duper.Rules.FluidBoolHoist:dynlib
✔ [1103/2407] Built Mathlib.Algebra.Order.Ring.Int
✔ [1104/2407] Built Duper.Rules.BoolSimp:c.o
✔ [1105/2407] Built Mathlib.Data.Set.Basic
✔ [1106/2407] Built Duper.Preprocessing
✔ [1107/2407] Built Duper.Rules.BoolSimp:dynlib
✔ [1108/2407] Built Mathlib.Data.Int.LeastGreatest
✔ [1109/2407] Built Mathlib.Data.Int.Range
✔ [1110/2407] Built Mathlib.Algebra.Order.Positive.Ring
✔ [1111/2407] Built Duper.Rules.Superposition:c.o
✔ [1112/2407] Built Mathlib.Data.Nat.Order.Lemmas
✔ [1113/2407] Built Mathlib.Algebra.Ring.Hom.Basic
✔ [1114/2407] Built Mathlib.Data.Set.BoolIndicator
✔ [1115/2407] Built Duper.Rules.Superposition:dynlib
✔ [1116/2407] Built Mathlib.Order.WellFounded
✔ [1117/2407] Built Mathlib.Data.SetLike.Basic
✔ [1118/2407] Built Mathlib.CategoryTheory.Equivalence
✔ [1119/2407] Built Mathlib.Data.Set.Subsingleton
✔ [1120/2407] Built Mathlib.Algebra.Group.Center
✔ [1121/2407] Built Mathlib.Algebra.Order.Ring.InjSurj
✔ [1122/2407] Built Duper.Preprocessing:c.o
✔ [1123/2407] Built Mathlib.Data.Rat.Defs
✔ [1124/2407] Built Mathlib.Order.Circular
✔ [1125/2407] Built Duper.Preprocessing:dynlib
✔ [1126/2407] Built Mathlib.CategoryTheory.Category.Preorder
✔ [1127/2407] Built Mathlib.Data.PEquiv
✔ [1128/2407] Built Mathlib.Order.PiLex
✔ [1129/2407] Built Mathlib.Algebra.Group.Centralizer
✔ [1130/2407] Built Mathlib.Algebra.Ring.Parity
✔ [1131/2407] Built Mathlib.Algebra.Ring.Centralizer
✔ [1132/2407] Built Mathlib.Algebra.Order.Ring.Canonical
✔ [1133/2407] Built Mathlib.Data.Part
✔ [1134/2407] Built Mathlib.Algebra.Order.Ring.Nat
✔ [1135/2407] Built Mathlib.Algebra.Order.Field.Defs
✔ [1136/2407] Built Mathlib.Data.Set.Image
✔ [1137/2407] Built Mathlib.CategoryTheory.Bicategory.Functor
✔ [1138/2407] Built Mathlib.Data.Vector
✔ [1139/2407] Built Mathlib.Data.Nat.MaxPowDiv
✔ [1140/2407] Built Mathlib.Data.Nat.WithBot
✔ [1141/2407] Built Mathlib.Data.Bool.Set
✔ [1142/2407] Built Mathlib.Data.Nat.Set
✔ [1143/2407] Built Mathlib.Algebra.Order.Field.Canonical.Defs
✔ [1144/2407] Built Mathlib.Data.Set.List
✔ [1145/2407] Built Mathlib.Data.Nat.GCD.Basic
✔ [1146/2407] Built Mathlib.Logic.Embedding.Set
✔ [1147/2407] Built Mathlib.CategoryTheory.Adjunction.Basic
✔ [1148/2407] Built Mathlib.Algebra.Order.Field.InjSurj
✔ [1149/2407] Built Mathlib.Order.Directed
✔ [1150/2407] Built Mathlib.Algebra.Order.Field.Canonical.Basic
✔ [1151/2407] Built Mathlib.Data.PNat.Basic
✔ [1152/2407] Built Mathlib.Logic.Equiv.Embedding
✔ [1153/2407] Built Mathlib.CategoryTheory.Opposites
✔ [1154/2407] Built Mathlib.Data.Nat.Cast.Order
✔ [1155/2407] Built Mathlib.Order.Interval.Set.Basic
✔ [1156/2407] Built Mathlib.CategoryTheory.EqToHom
✔ [1157/2407] Built Mathlib.Algebra.Order.Invertible
✔ [1158/2407] Built Mathlib.Tactic.Linarith.Lemmas
✔ [1159/2407] Built Mathlib.CategoryTheory.Bicategory.Strict
✔ [1160/2407] Built Mathlib.Algebra.Order.Ring.WithTop
✔ [1161/2407] Built Mathlib.Order.Interval.Set.WithBotTop
✔ [1162/2407] Built Mathlib.Algebra.Order.Ring.Pow
✔ [1163/2407] Built Mathlib.Data.Nat.Log
✔ [1164/2407] Built Mathlib.Algebra.GroupPower.Order
✔ [1165/2407] Built Mathlib.Order.Bounded
✔ [1166/2407] Built Mathlib.CategoryTheory.Functor.Const
✔ [1167/2407] Built Mathlib.Data.Set.Prod
✔ [1168/2407] Built Mathlib.Data.Rat.Lemmas
✔ [1169/2407] Built Mathlib.Data.Rat.Order
✔ [1170/2407] Built Mathlib.Data.Int.Cast.Lemmas
✔ [1171/2407] Built Mathlib.Tactic.CancelDenoms.Core
✔ [1172/2407] Built Mathlib.CategoryTheory.Category.ULift
✔ [1173/2407] Built Mathlib.Data.Set.NAry
✔ [1174/2407] Built Mathlib.Algebra.Ring.Center
✔ [1175/2407] Built Mathlib.Algebra.Field.Opposite
✔ [1176/2407] Built Mathlib.Algebra.Order.Interval.Set.Instances
⚠ [1177/2407] Built Duper.Util.TypeInhabitationReasoning
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:38:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:39:9: unused variable `parentsLits`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:39:39: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:50:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:52:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:52:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:54:85: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:71:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:73:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:73:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:75:85: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:97:85: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:125:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:127:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:127:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:129:109: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:129:115: unused variable `t1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:129:119: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:143:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:145:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:145:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:147:109: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:147:115: unused variable `t1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:147:119: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:161:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:163:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:163:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:165:110: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:165:116: unused variable `t1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:165:120: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:179:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:181:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:181:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:183:110: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:183:116: unused variable `t1`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:183:120: unused variable `t2`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:197:87: unused variable `transferExprs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:199:42: unused variable `xs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:199:45: unused variable `body`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:225:48: unused variable `c`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:490:42: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:520:43: unused variable `lvls`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/Duper/././Duper/Util/TypeInhabitationReasoning.lean:576:45: unused variable `c`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1178/2407] Built Mathlib.CategoryTheory.Bicategory.Free
✔ [1179/2407] Built Mathlib.Algebra.Order.Ring.Abs
✔ [1180/2407] Built Mathlib.Tactic.NormNum.Pow
✔ [1181/2407] Built Mathlib.Data.Int.Order.Lemmas
✔ [1182/2407] Built Mathlib.Data.Int.Order.Units
✔ [1183/2407] Built Mathlib.Algebra.Order.Interval.Set.Group
✔ [1184/2407] Built Mathlib.Tactic.Positivity.Core
✔ [1185/2407] Built Mathlib.Tactic.CategoryTheory.BicategoryCoherence
✔ [1186/2407] Built Mathlib.Tactic.GCongr
✔ [1187/2407] Built Mathlib.Data.Set.Function
✔ [1188/2407] Built Mathlib.Order.Bounds.Basic
✔ [1189/2407] Built Mathlib.Tactic.Widget.Gcongr
✔ [1190/2407] Built Mathlib.Tactic.FieldSimp
✔ [1191/2407] Built Mathlib.Data.Int.Lemmas
✔ [1192/2407] Built Mathlib.Algebra.Order.Interval.Set.Monoid
✔ [1193/2407] Built Mathlib.GroupTheory.GroupAction.Pi
✔ [1194/2407] Built Duper.Util.TypeInhabitationReasoning:c.o
✔ [1195/2407] Built Duper.Util.TypeInhabitationReasoning:dynlib
✔ [1196/2407] Built Mathlib.Order.LatticeIntervals
✔ [1197/2407] Built Mathlib.Order.Interval.Set.Image
✔ [1198/2407] Built Mathlib.Data.Set.Pairwise.Basic
✔ [1199/2407] Built Mathlib.Algebra.Group.Pi.Lemmas
✔ [1200/2407] Built Mathlib.Data.Int.GCD
✔ [1201/2407] Built Mathlib.Logic.Equiv.Set
✔ [1202/2407] Built Mathlib.Logic.Equiv.PartialEquiv
✔ [1203/2407] Built Mathlib.Data.List.Nodup
✔ [1204/2407] Built Mathlib.Logic.Small.Basic
✔ [1205/2407] Built Mathlib.Order.RelIso.Set
✔ [1206/2407] Built Mathlib.Order.Hom.Set
✔ [1207/2407] Built Mathlib.GroupTheory.GroupAction.DomAct.Basic
✔ [1208/2407] Built Mathlib.Data.Nat.Prime
✔ [1209/2407] Built Mathlib.Data.List.Dedup
✔ [1210/2407] Built Mathlib.Data.List.Duplicate
✔ [1211/2407] Built Mathlib.Data.Prod.TProd
✔ [1212/2407] Built Mathlib.Data.List.Range
✔ [1213/2407] Built Mathlib.Order.Bounds.OrderIso
✔ [1214/2407] Built Mathlib.Order.Interval.Set.OrderIso
✔ [1215/2407] Built Duper.Saturate
⚠ [1216/2407] Built Auto.Embedding.LamConv
warning: ././.lake/packages/auto/././Auto/Embedding/LamConv.lean:633:11: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamConv.lean:1459:40: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamConv.lean:1467:40: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamConv.lean:1500:61: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamConv.lean:1508:61: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1217/2407] Built Mathlib.Order.Antichain
✔ [1218/2407] Built Mathlib.Data.PNat.Prime
✔ [1219/2407] Built Mathlib.Data.Nat.ModEq
✔ [1220/2407] Built Mathlib.Data.List.NatAntidiagonal
✔ [1221/2407] Built Mathlib.Tactic.NormNum.Prime
✔ [1222/2407] Built Mathlib.Data.List.Rotate
✔ [1223/2407] Built Mathlib.Order.InitialSeg
✔ [1224/2407] Built Mathlib.Order.Interval.Set.UnorderedInterval
✔ [1225/2407] Built Mathlib.GroupTheory.Perm.Basic
✔ [1226/2407] Built Mathlib.CategoryTheory.Products.Basic
✔ [1227/2407] Built Mathlib.GroupTheory.Perm.ViaEmbedding
✔ [1228/2407] Built Duper.Saturate:c.o
✔ [1229/2407] Built Auto.Embedding.LamConv:c.o
✔ [1230/2407] Built Mathlib.Order.Interval.Set.OrderEmbedding
✔ [1231/2407] Built Auto.Embedding.LamConv:dynlib
✔ [1232/2407] Built Mathlib.Algebra.Ring.Equiv
✔ [1233/2407] Built Mathlib.Dynamics.FixedPoints.Basic
✔ [1234/2407] Built Duper.Saturate:dynlib
✔ [1235/2407] Built Mathlib.Data.List.Perm
✔ [1236/2407] Built Auto.Embedding.LamInductive
✔ [1237/2407] Built Auto.IR.TPTP_TH0
✔ [1238/2407] Built Mathlib.Data.Fin.Basic
✔ [1239/2407] Built Auto.Embedding.LamInductive:c.o
✔ [1240/2407] Built Mathlib.Algebra.Group.Aut
✔ [1241/2407] Built Auto.Embedding.LamInductive:dynlib
✔ [1242/2407] Built Mathlib.Algebra.Ring.CompTypeclasses
✔ [1243/2407] Built Auto.IR.TPTP_TH0:c.o
✔ [1244/2407] Built Auto.IR.TPTP_TH0:dynlib
✔ [1245/2407] Built Mathlib.Order.Interval.Set.OrdConnected
✔ [1246/2407] Built Mathlib.Algebra.Group.Fin
✔ [1247/2407] Built Auto.Translation.Lam2TH0
✔ [1248/2407] Built Auto.Solver.TPTP
✔ [1249/2407] Built Auto.Translation.Lam2TH0:c.o
✔ [1250/2407] Built Mathlib.Algebra.Group.Conj
✔ [1251/2407] Built Auto.Translation.Lam2TH0:dynlib
✔ [1252/2407] Built Mathlib.Algebra.Ring.Pi
✔ [1253/2407] Built Mathlib.Data.List.Sublists
✔ [1254/2407] Built Mathlib.Control.Random
✔ [1255/2407] Built Auto.Solver.TPTP:c.o
✔ [1256/2407] Built Auto.Solver.TPTP:dynlib
✔ [1257/2407] Built Mathlib.Algebra.Ring.ULift
✔ [1258/2407] Built Mathlib.Order.Interval.Set.ProjIcc
✔ [1259/2407] Built Mathlib.Order.Cover
✔ [1260/2407] Built Mathlib.Testing.SlimCheck.Gen
✔ [1261/2407] Built Mathlib.GroupTheory.GroupAction.Group
✔ [1262/2407] Built Mathlib.Order.CompleteLattice
✔ [1263/2407] Built Mathlib.Data.Fin.OrderHom
⚠ [1264/2407] Built Duper.ProofReconstruction
warning: ././.lake/packages/Duper/././Duper/ProofReconstruction.lean:120:21: unused variable `lvl`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1265/2407] Built Mathlib.Algebra.Order.Pi
✔ [1266/2407] Built Mathlib.Algebra.GroupRingAction.Basic
✔ [1267/2407] Built Mathlib.Algebra.Ring.Prod
✔ [1268/2407] Built Mathlib.CategoryTheory.Comma.Basic
✔ [1269/2407] Built Mathlib.Algebra.BigOperators.Group.List
✔ [1270/2407] Built Mathlib.Testing.SlimCheck.Sampleable
⚠ [1271/2407] Built Auto.Embedding.LamInference
warning: ././.lake/packages/auto/././Auto/Embedding/LamInference.lean:180:33: unused variable `p`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1272/2407] Built Auto.Embedding.LamInference:c.o
✔ [1273/2407] Built Auto.Embedding.LamInference:dynlib
✔ [1274/2407] Built Mathlib.Algebra.Ring.Aut
✔ [1275/2407] Built Mathlib.Algebra.Function.Support
✔ [1276/2407] Built Mathlib.Algebra.Order.BigOperators.Ring.List
✔ [1277/2407] Built Mathlib.Data.List.Prime
✔ [1278/2407] Built Mathlib.Algebra.BigOperators.Ring.List
✔ [1279/2407] Built Mathlib.Data.Int.CharZero
✔ [1280/2407] Built Mathlib.Order.GaloisConnection
✔ [1281/2407] Built Mathlib.Algebra.Order.BigOperators.Group.List
✔ [1282/2407] Built Mathlib.Algebra.FreeMonoid.Basic
✔ [1283/2407] Built Duper.ProofReconstruction:c.o
✔ [1284/2407] Built Mathlib.Tactic.Qify
✔ [1285/2407] Built Mathlib.Testing.SlimCheck.Testable
✔ [1286/2407] Built Mathlib.Order.SuccPred.Basic
✔ [1287/2407] Built Duper.ProofReconstruction:dynlib
✔ [1288/2407] Built Mathlib.Algebra.Order.Kleene
✔ [1289/2407] Built Mathlib.Order.Hom.Order
✔ [1290/2407] Built Mathlib.Data.Setoid.Basic
✔ [1291/2407] Built Mathlib.Order.CompleteBooleanAlgebra
✔ [1292/2407] Built Mathlib.Data.Nat.SuccPred
✔ [1293/2407] Built Mathlib.Order.SuccPred.Relation
✔ [1294/2407] Built Mathlib.Tactic.SlimCheck
✔ [1295/2407] Built Mathlib.Algebra.Order.Field.Basic
✔ [1296/2407] Built Mathlib.Data.Fin.Tuple.Basic
✔ [1297/2407] Built Mathlib.CategoryTheory.Comma.Arrow
✔ [1298/2407] Built Mathlib.Order.SuccPred.Limit
✔ [1299/2407] Built Mathlib.Algebra.Function.Indicator
✔ [1300/2407] Built Mathlib.Order.ModularLattice
✔ [1301/2407] Built Mathlib.Data.Int.SuccPred
✔ [1302/2407] Built Auto.Embedding.LamBitVec
✔ [1303/2407] Built Mathlib.Order.FixedPoints
✔ [1304/2407] Built Auto.Embedding.LamBitVec:c.o
✔ [1305/2407] Built Auto.Embedding.LamBitVec:dynlib
✔ [1306/2407] Built Mathlib.Data.Nat.Cast.Field
✔ [1307/2407] Built Mathlib.CategoryTheory.CommSq
✔ [1308/2407] Built Mathlib.Data.List.OfFn
✔ [1309/2407] Built Mathlib.CategoryTheory.LiftingProperties.Basic
✔ [1310/2407] Built Mathlib.Data.List.FinRange
✔ [1311/2407] Built Mathlib.Data.Fin.VecNotation
✔ [1312/2407] Built Mathlib.Algebra.CharZero.Lemmas
✔ [1313/2407] Built Mathlib.Data.Multiset.Basic
✔ [1314/2407] Built Mathlib.Data.List.Indexes
✔ [1315/2407] Built Mathlib.Data.Multiset.Range
✔ [1316/2407] Built Mathlib.Data.ENat.Basic
✔ [1317/2407] Built Mathlib.CategoryTheory.Pi.Basic
✔ [1318/2407] Built Mathlib.Data.List.Sort
✔ [1319/2407] Built Mathlib.Data.Vector.Basic
✔ [1320/2407] Built Mathlib.CategoryTheory.LiftingProperties.Adjunction
✔ [1321/2407] Built Mathlib.Logic.Equiv.Fin
✔ [1322/2407] Built Mathlib.Algebra.BigOperators.Group.Multiset
✔ [1323/2407] Built Mathlib.Data.Multiset.Sort
✔ [1324/2407] Built Mathlib.CategoryTheory.Groupoid
✔ [1325/2407] Built Mathlib.Data.Multiset.Nodup
✔ [1326/2407] Built Mathlib.Algebra.Ring.Fin
✔ [1327/2407] Built Mathlib.Algebra.Order.BigOperators.Ring.Multiset
✔ [1328/2407] Built Mathlib.CategoryTheory.MorphismProperty.Basic
✔ [1329/2407] Built Mathlib.Data.List.NodupEquivFin
✔ [1330/2407] Built Mathlib.Data.Multiset.NatAntidiagonal
✔ [1331/2407] Built Mathlib.Data.Nat.Factors
✔ [1332/2407] Built Mathlib.Data.Multiset.Dedup
✔ [1333/2407] Built Mathlib.Data.Multiset.Sum
✔ [1334/2407] Built Mathlib.CategoryTheory.EpiMono
✔ [1335/2407] Built Mathlib.CategoryTheory.Monoidal.Category
✔ [1336/2407] Built Mathlib.Data.Sym.Basic
✔ [1337/2407] Built Mathlib.Data.Set.Lattice
✔ [1338/2407] Built Mathlib.CategoryTheory.Balanced
✔ [1339/2407] Built Mathlib.Logic.Small.Set
✔ [1340/2407] Built Mathlib.Tactic.Monotonicity.Lemmas
✔ [1341/2407] Built Mathlib.Tactic.CategoryTheory.MonoidalComp
✔ [1342/2407] Built Mathlib.Data.Set.Accumulate
✔ [1343/2407] Built Mathlib.Data.Multiset.FinsetOps
✔ [1344/2407] Built Mathlib.CategoryTheory.Types
✔ [1345/2407] Built Mathlib.Order.Interval.Set.OrdConnectedComponent
✔ [1346/2407] Built Mathlib.Data.Set.UnionLift
✔ [1347/2407] Built Mathlib.Tactic.Monotonicity
✔ [1348/2407] Built Mathlib.CategoryTheory.Limits.Shapes.StrongEpi
✔ [1349/2407] Built Mathlib.Data.Nat.Pairing
✔ [1350/2407] Built Mathlib.Order.Chain
✔ [1351/2407] Built Mathlib.Data.Set.Functor
✔ [1352/2407] Built Mathlib.Data.Multiset.Bind
✔ [1353/2407] Built Mathlib.CategoryTheory.Functor.Hom
✔ [1354/2407] Built Mathlib.Logic.Equiv.Nat
✔ [1355/2407] Built Mathlib.Data.Set.Sigma
✔ [1356/2407] Built Mathlib.Algebra.Group.Subsemigroup.Basic
✔ [1357/2407] Built Mathlib.Order.Interval.Set.Disjoint
✔ [1358/2407] Built Mathlib.Order.Closure
✔ [1359/2407] Built Mathlib.Order.Zorn
✔ [1360/2407] Built Mathlib.Data.Multiset.Sections
✔ [1361/2407] Built Mathlib.Order.Interval.Set.Pi
✔ [1362/2407] Built Mathlib.Data.Countable.Basic
✔ [1363/2407] Built Mathlib.Data.Multiset.Pi
✔ [1364/2407] Built Mathlib.Data.Multiset.Fold
✔ [1365/2407] Built Mathlib.Algebra.Group.Subsemigroup.Membership
✔ [1366/2407] Built Mathlib.CategoryTheory.Functor.EpiMono
✔ [1367/2407] Built Mathlib.Order.Hom.CompleteLattice
✔ [1368/2407] Built Mathlib.SetTheory.Cardinal.SchroederBernstein
✔ [1369/2407] Built Mathlib.Data.Multiset.Powerset
✔ [1370/2407] Built Mathlib.Logic.Encodable.Basic
✔ [1371/2407] Built Mathlib.CategoryTheory.Functor.ReflectsIso
✔ [1372/2407] Built Mathlib.CategoryTheory.DiscreteCategory
✔ [1373/2407] Built Mathlib.Data.Multiset.Lattice
✔ [1374/2407] Built Mathlib.Data.Rat.Encodable
✔ [1375/2407] Built Mathlib.Algebra.Order.BigOperators.Group.Multiset
✔ [1376/2407] Built Mathlib.Algebra.GCDMonoid.Multiset
✔ [1377/2407] Built Mathlib.Data.Multiset.Antidiagonal
✔ [1378/2407] Built Mathlib.Order.OmegaCompletePartialOrder
✔ [1379/2407] Built Mathlib.Logic.Encodable.Lattice
✔ [1380/2407] Built Mathlib.CategoryTheory.PEmpty
✔ [1381/2407] Built Mathlib.Algebra.Group.Submonoid.Basic
✔ [1382/2407] Built Mathlib.Order.Atoms
✔ [1383/2407] Built Mathlib.Algebra.BigOperators.Ring.Multiset
✔ [1384/2407] Built Mathlib.Order.ZornAtoms
✔ [1385/2407] Built Mathlib.Data.Set.Pointwise.Basic
✔ [1386/2407] Built Mathlib.CategoryTheory.PUnit
✔ [1387/2407] Built Mathlib.Order.ConditionallyCompleteLattice.Basic
✔ [1388/2407] Built Mathlib.Algebra.Group.Submonoid.MulOpposite
✔ [1389/2407] Built Mathlib.Algebra.Group.Subsemigroup.Operations
✔ [1390/2407] Built Mathlib.Algebra.Order.Group.Action
✔ [1391/2407] Built Mathlib.Data.Set.Pointwise.ListOfFn
✔ [1392/2407] Built Mathlib.CategoryTheory.Category.Cat
✔ [1393/2407] Built Mathlib.Order.SuccPred.CompleteLinearOrder
✔ [1394/2407] Built Mathlib.Order.ConditionallyCompleteLattice.Group
✔ [1395/2407] Built Mathlib.Data.Set.Semiring
✔ [1396/2407] Built Mathlib.GroupTheory.Subsemigroup.Center
✔ [1397/2407] Built Mathlib.Data.Int.ConditionallyCompleteOrder
✔ [1398/2407] Built Mathlib.Algebra.Order.Support
✔ [1399/2407] Built Mathlib.CategoryTheory.IsomorphismClasses
✔ [1400/2407] Built Mathlib.GroupTheory.Subsemigroup.Centralizer
✔ [1401/2407] Built Mathlib.Order.Copy
✔ [1402/2407] Built Mathlib.Algebra.Bounds
✔ [1403/2407] Built Mathlib.Order.CompleteLatticeIntervals
✔ [1404/2407] Built Mathlib.Data.Finset.Basic
✔ [1405/2407] Built Mathlib.CategoryTheory.Yoneda
✔ [1406/2407] Built Mathlib.Data.Finset.Order
✔ [1407/2407] Built Mathlib.Data.Finset.Update
✔ [1408/2407] Built Mathlib.CategoryTheory.Skeletal
✔ [1409/2407] Built Mathlib.Data.Finset.Union
✔ [1410/2407] Built Mathlib.Algebra.Group.Submonoid.Operations
✔ [1411/2407] Built Mathlib.CategoryTheory.EssentiallySmall
✔ [1412/2407] Built Mathlib.Algebra.Order.Nonneg.Ring
✔ [1413/2407] Built Mathlib.CategoryTheory.Adjunction.FullyFaithful
✔ [1414/2407] Built Mathlib.GroupTheory.Submonoid.Center
✔ [1415/2407] Built Mathlib.Order.UpperLower.Basic
✔ [1416/2407] Built Mathlib.GroupTheory.Submonoid.Centralizer
✔ [1417/2407] Built Mathlib.Algebra.Order.Monoid.Submonoid
✔ [1418/2407] Built Mathlib.Data.Finset.Image
✔ [1419/2407] Built Mathlib.Data.NNRat.Defs
✔ [1420/2407] Built Mathlib.Algebra.Order.Nonneg.Field
✔ [1421/2407] Built Mathlib.Data.Finset.Pi
✔ [1422/2407] Built Mathlib.Data.Finset.Fold
✔ [1423/2407] Built Mathlib.Order.Minimal
✔ [1424/2407] Built Mathlib.Data.Rat.Field
✔ [1425/2407] Built Mathlib.GroupTheory.Congruence
✔ [1426/2407] Built Mathlib.Algebra.GCDMonoid.Finset
✔ [1427/2407] Built Mathlib.Data.Finset.Card
✔ [1428/2407] Built Mathlib.Data.Set.Pointwise.Interval
✔ [1429/2407] Built Mathlib.Data.Finset.Fin
✔ [1430/2407] Built Mathlib.Data.Finset.Sum
✔ [1431/2407] Built Mathlib.Data.Finset.Option
✔ [1432/2407] Built Mathlib.Data.Rat.Cast.Defs
✔ [1433/2407] Built Mathlib.Data.Fintype.Basic
✔ [1434/2407] Built Mathlib.Data.Finset.Prod
✔ [1435/2407] Built Mathlib.Data.Rat.Cast.Lemmas
✔ [1436/2407] Built Mathlib.Data.Rat.Cast.CharZero
✔ [1437/2407] Built Mathlib.Tactic.FinCases
✔ [1438/2407] Built Mathlib.Data.Finset.Piecewise
✔ [1439/2407] Built Mathlib.RingTheory.Congruence
✔ [1440/2407] Built Mathlib.Tactic.NormNum.OfScientific
✔ [1441/2407] Built Mathlib.Data.Fintype.Pi
✔ [1442/2407] Built Mathlib.Data.Rat.Cast.Order
✔ [1443/2407] Built Mathlib.Tactic.Positivity.Basic
✔ [1444/2407] Built Mathlib.CategoryTheory.Monoidal.Functor
✔ [1445/2407] Built Mathlib.Data.Fintype.Vector
✔ [1446/2407] Built Mathlib.Data.Fintype.Card
✔ [1447/2407] Built Mathlib.Tactic.Positivity
✔ [1448/2407] Built Mathlib.Algebra.Star.Basic
✔ [1449/2407] Built Mathlib.Tactic.NormNum.Inv
✔ [1450/2407] Built Mathlib.Data.Finite.Set
✔ [1451/2407] Built Mathlib.Data.Fintype.Parity
✔ [1452/2407] Built Mathlib.Data.Fintype.Option
✔ [1453/2407] Built Mathlib.Data.Fintype.Prod
✔ [1454/2407] Built Mathlib.Algebra.Star.Pi
✔ [1455/2407] Built Mathlib.Algebra.Star.Prod
✔ [1456/2407] Built Mathlib.Tactic.Positivity.Finset
✔ [1457/2407] Built Mathlib.Data.Fintype.Sum
✔ [1458/2407] Built Mathlib.Algebra.Order.Hom.Basic
✔ [1459/2407] Built Mathlib.Tactic.NormNum.Eq
✔ [1460/2407] Built Mathlib.Data.ZMod.Defs
✔ [1461/2407] Built Mathlib.Logic.Denumerable
✔ [1462/2407] Built Mathlib.CategoryTheory.Monoidal.Free.Basic
✔ [1463/2407] Built Mathlib.Order.JordanHolder
✔ [1464/2407] Built Mathlib.GroupTheory.Perm.Support
✔ [1465/2407] Built Mathlib.Algebra.Order.AbsoluteValue
✔ [1466/2407] Built Mathlib.Tactic.CategoryTheory.Coherence
✔ [1467/2407] Built Mathlib.GroupTheory.Perm.List
✔ [1468/2407] Built Mathlib.Tactic.NormNum.Ineq
✔ [1469/2407] Built Mathlib.Tactic.CancelDenoms
✔ [1470/2407] Built Mathlib.Algebra.Group.Subgroup.Basic
✔ [1471/2407] Built Mathlib.Tactic.NormNum.DivMod
✔ [1472/2407] Built Mathlib.Algebra.GroupRingAction.Subobjects
✔ [1473/2407] Built Mathlib.Algebra.Ring.Subring.Units
✔ [1474/2407] Built Mathlib.GroupTheory.Subgroup.Simple
✔ [1475/2407] Built Mathlib.GroupTheory.Subgroup.Center
✔ [1476/2407] Built Mathlib.Tactic.NormNum
✔ [1477/2407] Built Mathlib.Data.Finset.Lattice
✔ [1478/2407] Built Mathlib.Algebra.Group.Subgroup.MulOpposite
✔ [1479/2407] Built Mathlib.Tactic.NormNum.NatSqrt
✔ [1480/2407] Built Mathlib.GroupTheory.Subgroup.Centralizer
✔ [1481/2407] Built Mathlib.Algebra.Group.Subgroup.Actions
✔ [1482/2407] Built Mathlib.Data.Finset.Pairwise
✔ [1483/2407] Built Mathlib.Data.Fintype.Lattice
✔ [1484/2407] Built Mathlib.Data.Finset.Powerset
✔ [1485/2407] Built Mathlib.Data.Finset.Sigma
✔ [1486/2407] Built Mathlib.Tactic.NormNum.GCD
✔ [1487/2407] Built Mathlib.Data.Finset.Sort
✔ [1488/2407] Built Mathlib.Algebra.Group.Subgroup.ZPowers
✔ [1489/2407] Built Mathlib.Data.Fintype.List
✔ [1490/2407] Built Mathlib.Tactic.IntervalCases
✔ [1491/2407] Built Mathlib.Data.Fintype.Powerset
✔ [1492/2407] Built Mathlib.Data.Fintype.Sort
✔ [1493/2407] Built Mathlib.Logic.Equiv.List
✔ [1494/2407] Built Mathlib.Tactic.Abel
✔ [1495/2407] Built Mathlib.Data.W.Basic
✔ [1496/2407] Built Mathlib.Order.SupIndep
✔ [1497/2407] Built Mathlib.Tactic.NoncommRing
✔ [1498/2407] Built Mathlib.GroupTheory.FreeGroup.Basic
✔ [1499/2407] Built Mathlib.Data.Fintype.Sigma
✔ [1500/2407] Built Mathlib.Data.Int.ModEq
✔ [1501/2407] Built Mathlib.Data.Int.Parity
✔ [1502/2407] Built Mathlib.Data.Finite.Basic
✔ [1503/2407] Built Mathlib.Tactic.ModCases
✔ [1504/2407] Built Mathlib.Tactic.DeriveFintype
✔ [1505/2407] Built Mathlib.Tactic.Ring.Basic
✔ [1506/2407] Built Mathlib.Data.List.Cycle
✔ [1507/2407] Built Mathlib.Tactic.Ring.PNat
✔ [1508/2407] Built Mathlib.Algebra.CharP.Defs
✔ [1509/2407] Built Mathlib.Tactic.Linarith.Datatypes
✔ [1510/2407] Built Mathlib.Algebra.CharP.Invertible
✔ [1511/2407] Built Mathlib.Algebra.Order.Field.Power
✔ [1512/2407] Built Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm
✔ [1513/2407] Built Mathlib.Tactic.Ring.RingNF
✔ [1514/2407] Built Mathlib.Tactic.Linarith.Oracle.FourierMotzkin
✔ [1515/2407] Built Mathlib.Dynamics.PeriodicPts
✔ [1516/2407] Built Mathlib.Tactic.Ring
✔ [1517/2407] Built Mathlib.Tactic.Linarith.Parsing
✔ [1518/2407] Built Mathlib.Algebra.Module.Defs
✔ [1519/2407] Built Mathlib.Tactic.Group
✔ [1520/2407] Built Mathlib.Tactic.Linarith.Verification
✔ [1521/2407] Built Mathlib.Data.Fintype.Perm
✔ [1522/2407] Built Mathlib.Algebra.Ring.AddAut
✔ [1523/2407] Built Mathlib.Algebra.PUnitInstances
✔ [1524/2407] Built Mathlib.Tactic.LinearCombination
✔ [1525/2407] Built Mathlib.Algebra.Module.Pi
✔ [1526/2407] Built Mathlib.Tactic.Linarith.Preprocessing
✔ [1527/2407] Built Mathlib.Algebra.Module.Prod
✔ [1528/2407] Built Mathlib.Algebra.Order.Module.Synonym
✔ [1529/2407] Built Mathlib.Data.Set.Finite
✔ [1530/2407] Built Mathlib.Algebra.Module.Hom
✔ [1531/2407] Built Mathlib.Algebra.Function.Finite
✔ [1532/2407] Built Mathlib.Tactic.Linarith.Frontend
✔ [1533/2407] Built Mathlib.Order.Interval.Set.Infinite
✔ [1534/2407] Built Mathlib.Data.Nat.PrimeFin
✔ [1535/2407] Built Mathlib.Data.Finset.Preimage
✔ [1536/2407] Built Mathlib.Algebra.Module.Basic
✔ [1537/2407] Built Mathlib.Data.Set.MemPartition
✔ [1538/2407] Built Mathlib.Algebra.Star.Pointwise
✔ [1539/2407] Built Mathlib.RingTheory.Coprime.Basic
✔ [1540/2407] Built Mathlib.Order.ConditionallyCompleteLattice.Finset
✔ [1541/2407] Built Mathlib.Tactic.Linarith
✔ [1542/2407] Built Mathlib.Data.Set.Countable
✔ [1543/2407] Built Mathlib.Order.PartialSups
✔ [1544/2407] Built Mathlib.Algebra.Star.Center
✔ [1545/2407] Built Mathlib.Order.SupClosed
✔ [1546/2407] Built Mathlib.Order.Disjointed
✔ [1547/2407] Built Mathlib.Data.Finset.NAry
✔ [1548/2407] Built Mathlib.Tactic.Polyrith
✔ [1549/2407] Built Mathlib.Algebra.Star.SelfAdjoint
⚠ [1550/2407] Built Auto.Embedding.LamPrep
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:103:73: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:298:35: unused variable `lhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:334:56: unused variable `lhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:366:56: unused variable `lhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:398:56: unused variable `lhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:432:56: unused variable `lhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:500:62: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:532:83: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:563:37: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:598:58: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:630:57: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:661:52: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:696:37: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:728:58: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Embedding/LamPrep.lean:760:73: unused variable `rhs`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1551/2407] Built Mathlib.MeasureTheory.MeasurableSpace.Defs
✔ [1552/2407] Built Auto.Embedding.LamPrep:c.o
✔ [1553/2407] Built Mathlib.Order.Interval.Finset.Defs
✔ [1554/2407] Built Auto.Embedding.LamPrep:dynlib
✔ [1555/2407] Built Mathlib.CategoryTheory.Limits.Cones
✔ [1556/2407] Built Mathlib.Data.Set.Pointwise.SMul
✔ [1557/2407] Built Mathlib.Data.Finsupp.Defs
✔ [1558/2407] Built Mathlib.Data.Finsupp.Fintype
✔ [1559/2407] Built Mathlib.Data.Finset.Antidiagonal
✔ [1560/2407] Built Mathlib.Algebra.Order.Interval.Finset
✔ [1561/2407] Built Mathlib.Data.Finsupp.Indicator
✔ [1562/2407] Built Mathlib.Data.Finsupp.Fin
✔ [1563/2407] Built Mathlib.Algebra.Star.Unitary
✔ [1564/2407] Built Mathlib.Algebra.Order.CauSeq.Basic
✔ [1565/2407] Built Mathlib.Data.Set.Pointwise.Finite
✔ [1566/2407] Built Mathlib.MeasureTheory.PiSystem
✔ [1567/2407] Built Mathlib.GroupTheory.GroupAction.Hom
✔ [1568/2407] Built Mathlib.Algebra.Star.Order
✔ [1569/2407] Built Mathlib.Algebra.AddTorsor
✔ [1570/2407] Built Mathlib.Data.Finset.NatAntidiagonal
✔ [1571/2407] Built Mathlib.LinearAlgebra.AffineSpace.Basic
✔ [1572/2407] Built Auto.Embedding.LamChecker
✔ [1573/2407] Built Mathlib.GroupTheory.GroupAction.Pointwise
✔ [1574/2407] Built Mathlib.Order.Interval.Finset.Basic
✔ [1575/2407] Built Mathlib.Order.Filter.Basic
✔ [1576/2407] Built Mathlib.Data.MLList.BestFirst
✔ [1577/2407] Built Mathlib.GroupTheory.GroupAction.Basic
✔ [1578/2407] Built Mathlib.Algebra.Order.CauSeq.Completion
✔ [1579/2407] Built Mathlib.Order.Filter.Ker
✔ [1580/2407] Built Mathlib.Order.Interval.Multiset
✔ [1581/2407] Built Mathlib.Data.Int.Interval
✔ [1582/2407] Built Mathlib.Order.Filter.CountableInter
✔ [1583/2407] Built Mathlib.Tactic.Peel
✔ [1584/2407] Built Auto.Embedding.LamChecker:c.o
✔ [1585/2407] Built Auto.Embedding.LamChecker:dynlib
✔ [1586/2407] Built Mathlib.Order.Filter.Extr
✔ [1587/2407] Built Mathlib.Algebra.Order.Module.Defs
✔ [1588/2407] Built Mathlib.Order.Filter.CountableSeparatingOn
✔ [1589/2407] Built Mathlib.GroupTheory.GroupAction.FixedPoints
✔ [1590/2407] Built Mathlib.Order.Filter.Prod
✔ [1591/2407] Built Auto.Translation.Lam2DAtomAsFVar
✔ [1592/2407] Built Mathlib.Data.Nat.Interval
✔ [1593/2407] Built Mathlib.Algebra.Order.Floor
✔ [1594/2407] Built Mathlib.Order.Filter.NAry
✔ [1595/2407] Built Mathlib.Algebra.Order.Module.Pointwise
✔ [1596/2407] Built Mathlib.GroupTheory.GroupAction.FixingSubgroup
✔ [1597/2407] Built Mathlib.GroupTheory.GroupAction.ConjAct
✔ [1598/2407] Built Mathlib.Algebra.Order.Nonneg.Floor
✔ [1599/2407] Built Mathlib.Algebra.Order.Module.OrderedSMul
✔ [1600/2407] Built Auto.Translation.Lam2DAtomAsFVar:c.o
✔ [1601/2407] Built Mathlib.GroupTheory.GroupAction.SubMulAction
✔ [1602/2407] Built Mathlib.Data.Fin.Interval
✔ [1603/2407] Built Auto.Translation.Lam2DAtomAsFVar:dynlib
✔ [1604/2407] Built Mathlib.Data.Nat.Lattice
✔ [1605/2407] Built Auto.Translation.LamFOL2SMT
✔ [1606/2407] Built Mathlib.Data.Rat.Floor
✔ [1607/2407] Built Mathlib.Data.ENat.Lattice
✔ [1608/2407] Built Mathlib.Data.Fintype.Fin
✔ [1609/2407] Built Mathlib.Algebra.BigOperators.Basic
✔ [1610/2407] Built Mathlib.Order.Filter.Bases
✔ [1611/2407] Built Mathlib.Order.OrderIsoNat
✔ [1612/2407] Built Mathlib.RingTheory.Nilpotent.Defs
✔ [1613/2407] Built Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise
✔ [1614/2407] Built Mathlib.Algebra.BigOperators.Option
✔ [1615/2407] Built Mathlib.Data.Rat.BigOperators
✔ [1616/2407] Built Mathlib.Algebra.Regular.Pow
✔ [1617/2407] Built Mathlib.Algebra.Star.BigOperators
✔ [1618/2407] Built Mathlib.Algebra.BigOperators.NatAntidiagonal
✔ [1619/2407] Built Mathlib.Algebra.BigOperators.WithTop
✔ [1620/2407] Built Mathlib.Algebra.BigOperators.RingEquiv
✔ [1621/2407] Built Mathlib.Data.Nat.GCD.BigOperators
✔ [1622/2407] Built Mathlib.Tactic.RewriteSearch
✔ [1623/2407] Built Mathlib.Algebra.BigOperators.Pi
✔ [1624/2407] Built Mathlib.GroupTheory.GroupAction.BigOperators
✔ [1625/2407] Built Mathlib.CategoryTheory.Limits.IsLimit
✔ [1626/2407] Built Mathlib.RingTheory.Prime
✔ [1627/2407] Built Mathlib.GroupTheory.Coset
✔ [1628/2407] Built Mathlib.Data.Set.Pointwise.BigOperators
✔ [1629/2407] Built Mathlib.Data.Real.Basic
✔ [1630/2407] Built Mathlib.Order.Filter.Lift
✔ [1631/2407] Built Mathlib.Data.Nat.Fib.Basic
✔ [1632/2407] Built Mathlib.Data.Fintype.BigOperators
✔ [1633/2407] Built Mathlib.Order.Filter.Pi
✔ [1634/2407] Built Mathlib.Tactic.Rify
✔ [1635/2407] Built Mathlib.Data.Nat.PartENat
✔ [1636/2407] Built Mathlib.Data.Finset.NoncommProd
✔ [1637/2407] Built Mathlib.Algebra.BigOperators.Intervals
✔ [1638/2407] Built Mathlib.Algebra.Order.Archimedean
✔ [1639/2407] Built Mathlib.Tactic.NormNum.NatFib
✔ [1640/2407] Built Mathlib.Data.Fintype.CardEmbedding
✔ [1641/2407] Built Mathlib.Algebra.BigOperators.Ring
✔ [1642/2407] Built Mathlib.Algebra.Module.BigOperators
✔ [1643/2407] Built Mathlib.Order.CompactlyGenerated.Basic
✔ [1644/2407] Built Mathlib.Order.WellFoundedSet
✔ [1645/2407] Built Mathlib.GroupTheory.Archimedean
✔ [1646/2407] Built Auto.Translation.LamFOL2SMT:c.o
✔ [1647/2407] Built Auto.Translation.LamFOL2SMT:dynlib
✔ [1648/2407] Built Mathlib.Order.CompactlyGenerated.Intervals
✔ [1649/2407] Built Mathlib.Algebra.Order.BigOperators.Group.Finset
✔ [1650/2407] Built Mathlib.Algebra.Order.Hom.Ring
✔ [1651/2407] Built Mathlib.Algebra.BigOperators.Module
✔ [1652/2407] Built Mathlib.RingTheory.Coprime.Lemmas
✔ [1653/2407] Built Mathlib.Data.Real.Archimedean
⚠ [1654/2407] Built Auto.Translation.LamReif
warning: ././.lake/packages/auto/././Auto/Translation/LamReif.lean:1315:31: unused variable `arg₂`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Translation/LamReif.lean:1335:36: unused variable `arg₃`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Translation/LamReif.lean:1361:36: unused variable `arg₃`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././.lake/packages/auto/././Auto/Translation/LamReif.lean:1361:41: unused variable `arg₄`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1655/2407] Built Mathlib.Tactic.NormNum.IsCoprime
✔ [1656/2407] Built Mathlib.Data.Complex.Basic
✔ [1657/2407] Built Mathlib.NumberTheory.Divisors
✔ [1658/2407] Built Mathlib.Data.Real.Pointwise
✔ [1659/2407] Built Mathlib.Algebra.Group.Submonoid.Membership
✔ [1660/2407] Built Mathlib.Data.Complex.BigOperators
✔ [1661/2407] Built Mathlib.Data.Nat.Choose.Sum
✔ [1662/2407] Built Mathlib.Tactic.NormNum.BigOperators
✔ [1663/2407] Built Mathlib.Algebra.BigOperators.Fin
✔ [1664/2407] Built Mathlib.RingTheory.Multiplicity
✔ [1665/2407] Built Mathlib.Data.Nat.Digits
✔ [1666/2407] Built Mathlib.Algebra.Order.BigOperators.Ring.Finset
✔ [1667/2407] Built Mathlib.Algebra.IsPrimePow
✔ [1668/2407] Built Mathlib.Algebra.Group.Subgroup.Finite
✔ [1669/2407] Built Mathlib.Order.Filter.AtTopBot
✔ [1670/2407] Built Mathlib.Algebra.Module.LinearMap.Basic
✔ [1671/2407] Built Mathlib.CategoryTheory.Limits.HasLimits
✔ [1672/2407] Built Mathlib.Data.Sign
✔ [1673/2407] Built Mathlib.SetTheory.Cardinal.Basic
✔ [1674/2407] Built Mathlib.Order.Filter.SmallSets
✔ [1675/2407] Built Mathlib.Order.Filter.Cofinite
✔ [1676/2407] Built Mathlib.Data.Rat.Denumerable
✔ [1677/2407] Built Mathlib.Data.Nat.Count
✔ [1678/2407] Built Mathlib.Topology.Bornology.Basic
✔ [1679/2407] Built Mathlib.Algebra.BigOperators.Finprod
✔ [1680/2407] Built Mathlib.Order.Filter.Archimedean
✔ [1681/2407] Built Mathlib.Combinatorics.Enumerative.Composition
✔ [1682/2407] Built Mathlib.Algebra.Algebra.Defs
✔ [1683/2407] Built Mathlib.Algebra.GroupWithZero.NonZeroDivisors
✔ [1684/2407] Built Mathlib.GroupTheory.Commutator
✔ [1685/2407] Built Mathlib.Order.Filter.Ultrafilter
✔ [1686/2407] Built Mathlib.SetTheory.Cardinal.ENat
✔ [1687/2407] Built Mathlib.Combinatorics.Enumerative.Partition
✔ [1688/2407] Built Mathlib.Topology.Bornology.Hom
✔ [1689/2407] Built Mathlib.Topology.Bornology.Constructions
✔ [1690/2407] Built Mathlib.RingTheory.NonUnitalSubsemiring.Basic
✔ [1691/2407] Built Mathlib.Order.Filter.Subsingleton
✔ [1692/2407] Built Mathlib.Algebra.Group.Submonoid.Pointwise
✔ [1693/2407] Built Mathlib.Algebra.Module.Submodule.Basic
✔ [1694/2407] Built Mathlib.Topology.Bornology.Absorbs
✔ [1695/2407] Built Mathlib.Order.Filter.Interval
✔ [1696/2407] Built Mathlib.SetTheory.Cardinal.ToNat
✔ [1697/2407] Built Mathlib.Order.Filter.EventuallyConst
✔ [1698/2407] Built Mathlib.Topology.Defs.Filter
✔ [1699/2407] Built Mathlib.Algebra.Order.Module.Algebra
✔ [1700/2407] Built Mathlib.Algebra.GeomSum
✔ [1701/2407] Built Mathlib.GroupTheory.Perm.Sign
✔ [1702/2407] Built Mathlib.Topology.Defs.Sequences
✔ [1703/2407] Built Mathlib.SetTheory.Cardinal.PartENat
✔ [1704/2407] Built Mathlib.Logic.Equiv.Fintype
✔ [1705/2407] Built Mathlib.GroupTheory.Perm.Option
✔ [1706/2407] Built Mathlib.Algebra.Module.LinearMap.End
✔ [1707/2407] Built Mathlib.SetTheory.Ordinal.Basic
✔ [1708/2407] Built Mathlib.RingTheory.Nilpotent.Basic
✔ [1709/2407] Built Mathlib.Order.LiminfLimsup
✔ [1710/2407] Built Mathlib.SetTheory.Cardinal.Finite
✔ [1711/2407] Built Mathlib.CategoryTheory.Limits.Shapes.Terminal
✔ [1712/2407] Built Mathlib.CategoryTheory.Limits.Preserves.Basic
✔ [1713/2407] Built Mathlib.Algebra.BigOperators.Finsupp
✔ [1714/2407] Built Mathlib.Order.Filter.Pointwise
✔ [1715/2407] Built Mathlib.Data.Fintype.Units
✔ [1716/2407] Built Mathlib.Data.Finite.Card
✔ [1717/2407] Built Mathlib.Algebra.Group.ConjFinite
✔ [1718/2407] Built Mathlib.Data.Nat.Multiplicity
✔ [1719/2407] Built Mathlib.Data.Real.NNReal
✔ [1720/2407] Built Mathlib.Algebra.Module.Submodule.LinearMap
✔ [1721/2407] Built Mathlib.Topology.Basic
✔ [1722/2407] Built Mathlib.Algebra.Order.CauSeq.BigOperators
✔ [1723/2407] Built Mathlib.RingTheory.NonUnitalSubring.Basic
✔ [1724/2407] Built Mathlib.Topology.Defs.Induced
✔ [1725/2407] Built Mathlib.Algebra.BigOperators.Associated
✔ [1726/2407] Built Mathlib.Topology.NhdsSet
✔ [1727/2407] Built Mathlib.Algebra.Group.Subgroup.Pointwise
✔ [1728/2407] Built Auto.Translation.LamReif:c.o
✔ [1729/2407] Built Auto.Translation.LamReif:dynlib
✔ [1730/2407] Built Mathlib.Algebra.Ring.Subsemiring.Basic
✔ [1731/2407] Built Auto.Translation
✔ [1732/2407] Built Auto.Translation:c.o
✔ [1733/2407] Built Auto.Translation:dynlib
✔ [1734/2407] Built Mathlib.NumberTheory.Padics.PadicVal
✔ [1735/2407] Built Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks
✔ [1736/2407] Built Mathlib.Topology.Order
✔ [1737/2407] Built Mathlib.Data.ENNReal.Basic
✔ [1738/2407] Built Mathlib.GroupTheory.GroupAction.Quotient
✔ [1739/2407] Built Mathlib.MeasureTheory.MeasurableSpace.Basic
✔ [1740/2407] Built Mathlib.Algebra.Module.Equiv
✔ [1741/2407] Built Mathlib.Topology.Maps
✔ [1742/2407] Built Mathlib.Analysis.Normed.Group.Seminorm
✔ [1743/2407] Built Mathlib.Algebra.Module.Opposites
✔ [1744/2407] Built Mathlib.LinearAlgebra.GeneralLinearGroup
✔ [1745/2407] Built Mathlib.MeasureTheory.MeasurableSpace.CountablyGenerated
✔ [1746/2407] Built Mathlib.Algebra.Module.ULift
✔ [1747/2407] Built Mathlib.SetTheory.Ordinal.Arithmetic
✔ [1748/2407] Built Mathlib.GroupTheory.MonoidLocalization
⚠ [1749/2407] Built Auto.Tactic
warning: ././.lake/packages/auto/././Auto/Tactic.lean:427:37: unused variable `proof`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1750/2407] Built Mathlib.Data.ENNReal.Operations
✔ [1751/2407] Built Mathlib.GroupTheory.QuotientGroup
✔ [1752/2407] Built Mathlib.SetTheory.Ordinal.Exponential
✔ [1753/2407] Built Mathlib.Data.DFinsupp.Basic
✔ [1754/2407] Built Mathlib.Data.DFinsupp.Encodable
✔ [1755/2407] Built Mathlib.Algebra.CharZero.Quotient
✔ [1756/2407] Built Mathlib.GroupTheory.Divisible
✔ [1757/2407] Built Mathlib.Algebra.Module.Submodule.Lattice
✔ [1758/2407] Built Mathlib.Data.Finsupp.Basic
✔ [1759/2407] Built Mathlib.Topology.Constructions
✔ [1760/2407] Built Mathlib.GroupTheory.Finiteness
✔ [1761/2407] Built Mathlib.Algebra.Ring.Subring.Basic
✔ [1762/2407] Built Mathlib.SetTheory.Ordinal.FixedPoint
✔ [1763/2407] Built Mathlib.Algebra.ModEq
✔ [1764/2407] Built Mathlib.Algebra.Module.Submodule.RestrictScalars
✔ [1765/2407] Built Mathlib.Algebra.GroupRingAction.Invariant
✔ [1766/2407] Built Mathlib.Data.Finsupp.ToDFinsupp
✔ [1767/2407] Built Mathlib.Data.ENNReal.Inv
✔ [1768/2407] Built Mathlib.SetTheory.Ordinal.Principal
✔ [1769/2407] Built Mathlib.Data.Finsupp.Order
✔ [1770/2407] Built Mathlib.Data.Finsupp.Encodable
✔ [1771/2407] Built Mathlib.Algebra.DirectSum.Basic
✔ [1772/2407] Built Mathlib.GroupTheory.Abelianization
✔ [1773/2407] Built Auto.Tactic:c.o
✔ [1774/2407] Built Auto.Tactic:dynlib
✔ [1775/2407] Built Mathlib.GroupTheory.Index
✔ [1776/2407] Built Mathlib.Topology.ContinuousOn
✔ [1777/2407] Built Mathlib.GroupTheory.Solvable
✔ [1778/2407] Built Mathlib.Data.Finsupp.Multiset
✔ [1779/2407] Built Mathlib.Topology.Clopen
✔ [1780/2407] Built Mathlib.Topology.Order.LeftRight
✔ [1781/2407] Built Mathlib.Algebra.Module.Submodule.Map
✔ [1782/2407] Built Mathlib.Topology.LocallyFinite
✔ [1783/2407] Built Mathlib.Topology.Irreducible
✔ [1784/2407] Built Mathlib.Data.ENNReal.Real
✔ [1785/2407] Built Mathlib.Topology.Order.LocalExtr
✔ [1786/2407] Built Mathlib.Data.Finsupp.Antidiagonal
✔ [1787/2407] Built Mathlib.Topology.Inseparable
✔ [1788/2407] Built Mathlib.GroupTheory.FreeAbelianGroup
✔ [1789/2407] Built Mathlib.Data.Finset.Pointwise
⚠ [1790/2407] Built Duper.Interface
warning: ././.lake/packages/Duper/././Duper/Interface.lean:370:20: unused variable `isFromGoal`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [1791/2407] Built Mathlib.RingTheory.FreeRing
✔ [1792/2407] Built Mathlib.Topology.Bases
✔ [1793/2407] Built Mathlib.Topology.Connected.Basic
✔ [1794/2407] Built Mathlib.Algebra.Module.Submodule.Ker
✔ [1795/2407] Built Mathlib.SetTheory.Cardinal.Ordinal
✔ [1796/2407] Built Mathlib.Topology.Connected.LocallyConnected
✔ [1797/2407] Built Mathlib.Topology.Connected.TotallyDisconnected
✔ [1798/2407] Built Mathlib.Data.W.Cardinal
✔ [1799/2407] Built Mathlib.Algebra.Field.Subfield
✔ [1800/2407] Built Mathlib.Data.Real.EReal
✔ [1801/2407] Built Mathlib.Data.Nat.Factorization.Basic
✔ [1802/2407] Built Mathlib.SetTheory.Cardinal.Continuum
✔ [1803/2407] Built Mathlib.GroupTheory.OrderOfElement
✔ [1804/2407] Built Mathlib.Data.Nat.Factorization.PrimePow
✔ [1805/2407] Built Mathlib.SetTheory.Cardinal.Subfield
✔ [1806/2407] Built Mathlib.GroupTheory.Perm.Finite
✔ [1807/2407] Built Mathlib.Algebra.CharP.Basic
✔ [1808/2407] Built Mathlib.Topology.Compactness.Compact
✔ [1809/2407] Built Mathlib.Algebra.Module.Submodule.Range
✔ [1810/2407] Built Mathlib.CategoryTheory.Comma.StructuredArrow
✔ [1811/2407] Built Mathlib.GroupTheory.NoncommPiCoprod
✔ [1812/2407] Built Mathlib.Topology.Compactness.LocallyCompact
✔ [1813/2407] Built Duper.Interface:c.o
✔ [1814/2407] Built Mathlib.Algebra.Algebra.Basic
✔ [1815/2407] Built Duper.Interface:dynlib
✔ [1816/2407] Built Mathlib.SetTheory.Cardinal.Cofinality
✔ [1817/2407] Built Mathlib.Topology.Compactness.SigmaCompact
✔ [1818/2407] Built Mathlib.NumberTheory.LegendreSymbol.MulCharacter
✔ [1819/2407] Built Mathlib.Algebra.Algebra.Hom
✔ [1820/2407] Built Mathlib.GroupTheory.Perm.Cycle.Basic
✔ [1821/2407] Built Mathlib.Data.ZMod.Basic
✔ [1822/2407] Built Mathlib.Algebra.Algebra.Prod
✔ [1823/2407] Built Mathlib.Topology.UniformSpace.Basic
✔ [1824/2407] Built Mathlib.GroupTheory.Perm.Closure
✔ [1825/2407] Built Mathlib.Data.ZMod.Algebra
✔ [1826/2407] Built Mathlib.Data.ZMod.Units
✔ [1827/2407] Built Duper.Tactic
✔ [1828/2407] Built Mathlib.Data.ZMod.IntUnitsPower
✔ [1829/2407] Built Mathlib.LinearAlgebra.Basic
✔ [1830/2407] Built Mathlib.NumberTheory.LegendreSymbol.ZModChar
✔ [1831/2407] Built Mathlib.Algebra.Ring.NegOnePow
✔ [1832/2407] Built Mathlib.Topology.Separation
✔ [1833/2407] Built Mathlib.GroupTheory.Perm.Cycle.Factors
✔ [1834/2407] Built Mathlib.Topology.DiscreteSubset
✔ [1835/2407] Built Duper.Tactic:c.o
✔ [1836/2407] Built Mathlib.Topology.ExtendFrom
✔ [1837/2407] Built Duper.Tactic:dynlib
✔ [1838/2407] Built Mathlib.Topology.IndicatorConstPointwise
✔ [1839/2407] Built Mathlib.Topology.GDelta
✔ [1840/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Defs
✔ [1841/2407] Built Mathlib.Topology.SeparatedMap
✔ [1842/2407] Built Mathlib.Topology.UniformSpace.Separation
✔ [1843/2407] Built Mathlib.Topology.DenseEmbedding
✔ [1844/2407] Built Mathlib.LinearAlgebra.BilinearMap
✔ [1845/2407] Built Mathlib.Algebra.Algebra.Equiv
✔ [1846/2407] Built Mathlib.CategoryTheory.Comma.Over
✔ [1847/2407] Built Mathlib.Topology.Support
✔ [1848/2407] Built Duper
✔ [1849/2407] Built Duper:c.o
✔ [1850/2407] Built Duper:dynlib
✔ [1851/2407] Built Mathlib.Algebra.Algebra.Pi
✔ [1852/2407] Built Mathlib.GroupTheory.Perm.Cycle.Type
✔ [1853/2407] Built Mathlib.Algebra.Algebra.Opposite
✔ [1854/2407] Built Mathlib.Topology.Order.OrderClosed
✔ [1855/2407] Built Mathlib.Algebra.Periodic
✔ [1856/2407] Built Mathlib.Algebra.CharP.CharAndCard
✔ [1857/2407] Built Mathlib.Topology.Homeomorph
✔ [1858/2407] Built Mathlib.LinearAlgebra.Pi
✔ [1859/2407] Built Mathlib.Data.Nat.Periodic
✔ [1860/2407] Built Mathlib.Topology.Algebra.Constructions
✔ [1861/2407] Built Mathlib.Topology.Order.Lattice
✔ [1862/2407] Built Mathlib.Algebra.Algebra.NonUnitalHom
✔ [1863/2407] Built Mathlib.GroupTheory.Perm.Fin
✔ [1864/2407] Built Mathlib.Topology.ContinuousFunction.Basic
✔ [1865/2407] Built Mathlib.Logic.Equiv.TransferInstance
✔ [1866/2407] Built Mathlib.Topology.Algebra.Star
✔ [1867/2407] Built Mathlib.LinearAlgebra.Span
✔ [1868/2407] Built Mathlib.Topology.UniformSpace.Cauchy
✔ [1869/2407] Built Mathlib.Topology.Sets.Opens
✔ [1870/2407] Built Mathlib.Topology.Order.Basic
✔ [1871/2407] Built Mathlib.Topology.CompactOpen
✔ [1872/2407] Built Mathlib.Algebra.Group.AddChar
✔ [1873/2407] Built Mathlib.Topology.Algebra.ConstMulAction
✔ [1874/2407] Built Mathlib.Topology.Sequences
✔ [1875/2407] Built Mathlib.Topology.Instances.Sign
✔ [1876/2407] Built Mathlib.Topology.Order.T5
✔ [1877/2407] Built Mathlib.Topology.Algebra.Order.Archimedean
✔ [1878/2407] Built Mathlib.Topology.Order.ProjIcc
✔ [1879/2407] Built Mathlib.Algebra.Module.Submodule.Bilinear
✔ [1880/2407] Built Mathlib.Topology.Order.MonotoneConvergence
✔ [1881/2407] Built Mathlib.Topology.Algebra.MulAction
✔ [1882/2407] Built Mathlib.Topology.UniformSpace.UniformEmbedding
✔ [1883/2407] Built Mathlib.Topology.UniformSpace.CompleteSeparated
✔ [1884/2407] Built Mathlib.Algebra.Algebra.Tower
✔ [1885/2407] Built Mathlib.Topology.UniformSpace.UniformConvergence
✔ [1886/2407] Built Mathlib.Topology.UniformSpace.Pi
✔ [1887/2407] Built Mathlib.Topology.PartialHomeomorph
✔ [1888/2407] Built Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
✔ [1889/2407] Built Mathlib.Algebra.Algebra.RestrictScalars
✔ [1890/2407] Built Mathlib.Topology.UniformSpace.Equiv
✔ [1891/2407] Built Mathlib.Topology.IsLocalHomeomorph
✔ [1892/2407] Built Mathlib.Topology.Order.LeftRightNhds
✔ [1893/2407] Built Mathlib.Algebra.Star.StarAlgHom
✔ [1894/2407] Built Mathlib.Algebra.Order.ToIntervalMod
✔ [1895/2407] Built Mathlib.Topology.UniformSpace.AbstractCompletion
✔ [1896/2407] Built Mathlib.Topology.Order.MonotoneContinuity
✔ [1897/2407] Built Mathlib.Topology.Algebra.Monoid
✔ [1898/2407] Built Mathlib.Topology.Order.IsLUB
✔ [1899/2407] Built Mathlib.LinearAlgebra.BilinearForm.Basic
✔ [1900/2407] Built Mathlib.Topology.UniformSpace.UniformConvergenceTopology
✔ [1901/2407] Built Mathlib.Topology.UniformSpace.Completion
✔ [1902/2407] Built Mathlib.Topology.Order.Monotone
✔ [1903/2407] Built Mathlib.Topology.Algebra.GroupWithZero
✔ [1904/2407] Built Mathlib.LinearAlgebra.Quotient
✔ [1905/2407] Built Mathlib.LinearAlgebra.Prod
✔ [1906/2407] Built Mathlib.Topology.UniformSpace.Equicontinuity
✔ [1907/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Basic
✔ [1908/2407] Built Mathlib.Topology.UniformSpace.Compact
✔ [1909/2407] Built Mathlib.Topology.EMetricSpace.Basic
✔ [1910/2407] Built Mathlib.LinearAlgebra.Isomorphisms
✔ [1911/2407] Built Mathlib.LinearAlgebra.Finsupp
✔ [1912/2407] Built Mathlib.LinearAlgebra.Multilinear.Basic
✔ [1913/2407] Built Mathlib.Algebra.Star.Module
✔ [1914/2407] Built Mathlib.Topology.EMetricSpace.Lipschitz
✔ [1915/2407] Built Mathlib.Topology.Order.DenselyOrdered
✔ [1916/2407] Built Mathlib.Topology.Algebra.Group.Basic
✔ [1917/2407] Built Mathlib.Topology.Order.ExtendFrom
✔ [1918/2407] Built Mathlib.RingTheory.Ideal.Basic
✔ [1919/2407] Built Mathlib.Topology.Algebra.Order.Group
✔ [1920/2407] Built Mathlib.LinearAlgebra.Projection
✔ [1921/2407] Built Mathlib.Topology.Algebra.Ring.Basic
✔ [1922/2407] Built Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
✔ [1923/2407] Built Mathlib.Topology.Algebra.Order.LiminfLimsup
✔ [1924/2407] Built Mathlib.Topology.Algebra.Field
✔ [1925/2407] Built Mathlib.Algebra.Algebra.NonUnitalSubalgebra
✔ [1926/2407] Built Mathlib.RingTheory.Ideal.Quotient
✔ [1927/2407] Built Mathlib.Topology.Algebra.Order.Field
✔ [1928/2407] Built Mathlib.Algebra.Module.Submodule.Pointwise
✔ [1929/2407] Built Mathlib.LinearAlgebra.AffineSpace.AffineMap
✔ [1930/2407] Built Mathlib.Topology.Order.IntermediateValue
✔ [1931/2407] Built Mathlib.CategoryTheory.Limits.Preserves.Shapes.Pullbacks
✔ [1932/2407] Built Mathlib.Topology.Algebra.Ring.Ideal
✔ [1933/2407] Built Mathlib.CategoryTheory.Limits.Constructions.EpiMono
✔ [1934/2407] Built Mathlib.Topology.Algebra.Affine
✔ [1935/2407] Built Mathlib.CategoryTheory.ConcreteCategory.Basic
✔ [1936/2407] Built Mathlib.LinearAlgebra.LinearPMap
✔ [1937/2407] Built Mathlib.LinearAlgebra.AffineSpace.Slope
✔ [1938/2407] Built Mathlib.Topology.Algebra.UniformGroup
✔ [1939/2407] Built Mathlib.Tactic.CategoryTheory.Elementwise
✔ [1940/2407] Built Mathlib.LinearAlgebra.LinearIndependent
✔ [1941/2407] Built Mathlib.Topology.Algebra.UniformMulAction
✔ [1942/2407] Built Mathlib.Topology.Algebra.Order.Compact
✔ [1943/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Group
✔ [1944/2407] Built Mathlib.Data.Matrix.Basic
✔ [1945/2407] Built Mathlib.Topology.Algebra.Order.Rolle
✔ [1946/2407] Built Mathlib.Topology.Algebra.GroupCompletion
✔ [1947/2407] Built Mathlib.Data.Matrix.RowCol
✔ [1948/2407] Built Mathlib.Data.Matrix.Invertible
✔ [1949/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Constructions
✔ [1950/2407] Built Mathlib.Data.Matrix.PEquiv
✔ [1951/2407] Built Mathlib.Topology.Algebra.InfiniteSum.NatInt
✔ [1952/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Ring
✔ [1953/2407] Built Mathlib.LinearAlgebra.AffineSpace.AffineEquiv
✔ [1954/2407] Built Mathlib.LinearAlgebra.Dimension.Basic
✔ [1955/2407] Built Mathlib.Algebra.MonoidAlgebra.Basic
✔ [1956/2407] Built Mathlib.RingTheory.Localization.Basic
✔ [1957/2407] Built Mathlib.Algebra.MonoidAlgebra.Support
✔ [1958/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Order
✔ [1959/2407] Built Mathlib.Data.Matrix.Block
✔ [1960/2407] Built Mathlib.Data.Matrix.Notation
✔ [1961/2407] Built Mathlib.LinearAlgebra.TensorProduct.Basic
✔ [1962/2407] Built Mathlib.LinearAlgebra.Dimension.Finrank
✔ [1963/2407] Built Mathlib.RingTheory.Localization.Integer
✔ [1964/2407] Built Mathlib.Algebra.MonoidAlgebra.Division
✔ [1965/2407] Built Mathlib.Topology.Algebra.UniformRing
✔ [1966/2407] Built Mathlib.LinearAlgebra.AffineSpace.Midpoint
✔ [1967/2407] Built Mathlib.LinearAlgebra.DFinsupp
✔ [1968/2407] Built Mathlib.LinearAlgebra.Ray
✔ [1969/2407] Built Mathlib.LinearAlgebra.Matrix.Trace
✔ [1970/2407] Built Mathlib.RingTheory.Localization.FractionRing
✔ [1971/2407] Built Mathlib.Topology.MetricSpace.PseudoMetric
✔ [1972/2407] Built Mathlib.Algebra.Algebra.Bilinear
✔ [1973/2407] Built Mathlib.Topology.MetricSpace.Equicontinuity
✔ [1974/2407] Built Mathlib.Topology.MetricSpace.ProperSpace
✔ [1975/2407] Built Mathlib.Data.Matrix.Basis
✔ [1976/2407] Built Mathlib.Algebra.MonoidAlgebra.Degree
✔ [1977/2407] Built Mathlib.Topology.MetricSpace.Cauchy
✔ [1978/2407] Built Mathlib.Topology.MetricSpace.Basic
✔ [1979/2407] Built Mathlib.Topology.MetricSpace.Bounded
✔ [1980/2407] Built Mathlib.Topology.Metrizable.Basic
✔ [1981/2407] Built Mathlib.Topology.MetricSpace.Antilipschitz
✔ [1982/2407] Built Mathlib.Algebra.Polynomial.Basic
✔ [1983/2407] Built Mathlib.Topology.Metrizable.Uniformity
✔ [1984/2407] Built Mathlib.Topology.MetricSpace.Lipschitz
✔ [1985/2407] Built Mathlib.Algebra.Polynomial.Induction
✔ [1986/2407] Built Mathlib.Algebra.Polynomial.Monomial
✔ [1987/2407] Built Mathlib.Topology.MetricSpace.Isometry
✔ [1988/2407] Built Mathlib.Topology.Instances.Discrete
✔ [1989/2407] Built Mathlib.LinearAlgebra.Basis
✔ [1990/2407] Built Mathlib.Topology.Instances.Int
✔ [1991/2407] Built Mathlib.Algebra.Polynomial.Coeff
✔ [1992/2407] Built Mathlib.Topology.MetricSpace.Algebra
✔ [1993/2407] Built Mathlib.LinearAlgebra.Multilinear.Basis
✔ [1994/2407] Built Mathlib.LinearAlgebra.AffineSpace.AffineSubspace
✔ [1995/2407] Built Mathlib.Topology.Instances.Nat
✔ [1996/2407] Built Mathlib.Topology.MetricSpace.Dilation
✔ [1997/2407] Built Mathlib.LinearAlgebra.Basis.Bilinear
✔ [1998/2407] Built Mathlib.Analysis.Convex.Segment
✔ [1999/2407] Built Mathlib.Topology.Instances.Real
✔ [2000/2407] Built Mathlib.Algebra.Algebra.Operations
✔ [2001/2407] Built Mathlib.LinearAlgebra.AffineSpace.Restrict
✔ [2002/2407] Built Mathlib.LinearAlgebra.StdBasis
✔ [2003/2407] Built Mathlib.Topology.MetricSpace.DilationEquiv
✔ [2004/2407] Built Mathlib.RingTheory.AlgebraTower
✔ [2005/2407] Built Mathlib.Topology.MetricSpace.IsometricSMul
✔ [2006/2407] Built Mathlib.Topology.Instances.Rat
✔ [2007/2407] Built Mathlib.Topology.Instances.NNReal
✔ [2008/2407] Built Mathlib.Topology.MetricSpace.Completion
✔ [2009/2407] Built Mathlib.Topology.UnitInterval
✔ [2010/2407] Built Mathlib.LinearAlgebra.BilinearForm.Hom
✔ [2011/2407] Built Mathlib.Analysis.Convex.Star
✔ [2012/2407] Built Mathlib.Algebra.DirectSum.Module
✔ [2013/2407] Built Mathlib.Data.Real.Sqrt
✔ [2014/2407] Built Mathlib.Algebra.DirectSum.Finsupp
✔ [2015/2407] Built Mathlib.LinearAlgebra.FinsuppVectorSpace
✔ [2016/2407] Built Mathlib.Algebra.Polynomial.Degree.Definitions
✔ [2017/2407] Built Mathlib.LinearAlgebra.AffineSpace.Combination
✔ [2018/2407] Built Mathlib.Data.Complex.Abs
✔ [2019/2407] Built Mathlib.Algebra.Algebra.Subalgebra.Basic
✔ [2020/2407] Built Mathlib.Algebra.Polynomial.Degree.TrailingDegree
✔ [2021/2407] Built Mathlib.Algebra.Algebra.Subalgebra.Prod
✔ [2022/2407] Built Mathlib.Data.Complex.Order
✔ [2023/2407] Built Mathlib.LinearAlgebra.SesquilinearForm
✔ [2024/2407] Built Mathlib.Algebra.Algebra.Subalgebra.Tower
✔ [2025/2407] Built Mathlib.LinearAlgebra.Alternating.Basic
✔ [2026/2407] Built Mathlib.RingTheory.Ideal.Operations
✔ [2027/2407] Built Mathlib.Algebra.Algebra.Subalgebra.Directed
✔ [2028/2407] Built Mathlib.Topology.Instances.ENNReal
✔ [2029/2407] Built Mathlib.Analysis.Convex.Basic
✔ [2030/2407] Built Mathlib.RingTheory.Ideal.IsPrimary
✔ [2031/2407] Built Mathlib.MeasureTheory.OuterMeasure.Defs
✔ [2032/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Real
✔ [2033/2407] Built Mathlib.RingTheory.Coprime.Ideal
✔ [2034/2407] Built Mathlib.RingTheory.Ideal.Colon
✔ [2035/2407] Built Mathlib.Topology.Instances.EReal
✔ [2036/2407] Built Mathlib.Algebra.Polynomial.Eval
✔ [2037/2407] Built Mathlib.Analysis.Convex.Hull
✔ [2038/2407] Built Mathlib.RingTheory.Adjoin.Basic
✔ [2039/2407] Built Mathlib.MeasureTheory.OuterMeasure.Basic
✔ [2040/2407] Built Mathlib.Topology.Algebra.Module.Basic
✔ [2041/2407] Built Mathlib.Topology.Connected.PathConnected
✔ [2042/2407] Built Mathlib.Analysis.Normed.Group.Basic
✔ [2043/2407] Built Mathlib.Algebra.Polynomial.Degree.Lemmas
✔ [2044/2407] Built Mathlib.Topology.Algebra.Algebra
✔ [2045/2407] Built Mathlib.LinearAlgebra.TensorProduct.Tower
✔ [2046/2407] Built Mathlib.Topology.Instances.RealVectorSpace
✔ [2047/2407] Built Mathlib.Analysis.Normed.Group.Completion
✔ [2048/2407] Built Mathlib.Analysis.Normed.Group.Lemmas
✔ [2049/2407] Built Mathlib.Topology.Algebra.Module.Star
✔ [2050/2407] Built Mathlib.Topology.Semicontinuous
✔ [2051/2407] Built Mathlib.Analysis.Normed.Group.InfiniteSum
✔ [2052/2407] Built Mathlib.Analysis.Normed.Group.BallSphere
✔ [2053/2407] Built Mathlib.MeasureTheory.OuterMeasure.Operations
✔ [2054/2407] Built Mathlib.Topology.Algebra.InfiniteSum.Module
✔ [2055/2407] Built Mathlib.Analysis.Convex.Strict
✔ [2056/2407] Built Mathlib.RingTheory.Ideal.Maps
✔ [2057/2407] Built Mathlib.Algebra.Module.LocalizedModule
✔ [2058/2407] Built Mathlib.Topology.Algebra.FilterBasis
✔ [2059/2407] Built Mathlib.Algebra.Polynomial.AlgebraMap
✔ [2060/2407] Built Mathlib.Algebra.Polynomial.EraseLead
✔ [2061/2407] Built Mathlib.Analysis.Normed.Group.AddTorsor
✔ [2062/2407] Built Mathlib.Algebra.Algebra.Subalgebra.Operations
✔ [2063/2407] Built Mathlib.Tactic.ComputeDegree
✔ [2064/2407] Built Mathlib.RingTheory.Polynomial.Tower
✔ [2065/2407] Built Mathlib.LinearAlgebra.DirectSum.TensorProduct
✔ [2066/2407] Built Mathlib.Algebra.Polynomial.Derivative
✔ [2067/2407] Built Mathlib.Algebra.Polynomial.Inductions
✔ [2068/2407] Built Mathlib.LinearAlgebra.Matrix.Determinant
✔ [2069/2407] Built Mathlib.Algebra.Polynomial.CancelLeads
✔ [2070/2407] Built Mathlib.Algebra.Polynomial.Reverse
✔ [2071/2407] Built Mathlib.Analysis.Normed.Group.Hom
✔ [2072/2407] Built Mathlib.Analysis.SpecificLimits.Basic
✔ [2073/2407] Built Mathlib.LinearAlgebra.Matrix.Reindex
✔ [2074/2407] Built Mathlib.Algebra.Polynomial.Identities
✔ [2075/2407] Built Mathlib.RingTheory.Polynomial.ScaleRoots
✔ [2076/2407] Built Mathlib.RingTheory.Localization.Module
✔ [2077/2407] Built Mathlib.Data.Real.Cardinality
✔ [2078/2407] Built Mathlib.Topology.Algebra.Module.Multilinear.Basic
✔ [2079/2407] Built Mathlib.Data.Complex.Cardinality
✔ [2080/2407] Built Mathlib.Algebra.Polynomial.Monic
✔ [2081/2407] Built Mathlib.MeasureTheory.OuterMeasure.OfFunction
✔ [2082/2407] Built Mathlib.Topology.MetricSpace.HausdorffDistance
✔ [2083/2407] Built Mathlib.Algebra.Polynomial.Laurent
✔ [2084/2407] Built Mathlib.Algebra.Polynomial.Lifts
✔ [2085/2407] Built Mathlib.Analysis.Convex.Function
✔ [2086/2407] Built Mathlib.Algebra.MvPolynomial.Basic
✔ [2087/2407] Built Mathlib.MeasureTheory.OuterMeasure.Caratheodory
✔ [2088/2407] Built Mathlib.Algebra.Polynomial.GroupRingAction
✔ [2089/2407] Built Mathlib.Algebra.Star.Subalgebra
✔ [2090/2407] Built Mathlib.Analysis.Normed.Field.Basic
✔ [2091/2407] Built Mathlib.RingTheory.MvPolynomial.Tower
✔ [2092/2407] Built Mathlib.Data.Complex.Exponential
✔ [2093/2407] Built Mathlib.RingTheory.Polynomial.IntegralNormalization
✔ [2094/2407] Built Mathlib.Topology.MetricSpace.Thickening
✔ [2095/2407] Built Mathlib.LinearAlgebra.Matrix.Transvection
✔ [2096/2407] Built Mathlib.LinearAlgebra.DirectSum.Finsupp
✔ [2097/2407] Built Mathlib.Analysis.Normed.Order.Basic
✔ [2098/2407] Built Mathlib.MeasureTheory.OuterMeasure.Induced
✔ [2099/2407] Built Mathlib.Algebra.MvPolynomial.Rename
✔ [2100/2407] Built Mathlib.Analysis.Normed.MulAction
✔ [2101/2407] Built Mathlib.RingTheory.Ideal.QuotientOperations
✔ [2102/2407] Built Mathlib.Algebra.Polynomial.Div
✔ [2103/2407] Built Mathlib.LinearAlgebra.TensorProduct.Basis
✔ [2104/2407] Built Mathlib.Analysis.Normed.Field.UnitBall
✔ [2105/2407] Built Mathlib.LinearAlgebra.Matrix.ToLin
✔ [2106/2407] Built Mathlib.Analysis.Normed.Group.Pointwise
✔ [2107/2407] Built Mathlib.LinearAlgebra.FreeModule.Basic
✔ [2108/2407] Built Mathlib.RingTheory.Finiteness
✔ [2109/2407] Built Mathlib.Algebra.MvPolynomial.Degrees
✔ [2110/2407] Built Mathlib.RingTheory.Nilpotent.Lemmas
✔ [2111/2407] Built Mathlib.RingTheory.Localization.Ideal
✔ [2112/2407] Built Mathlib.Algebra.Polynomial.BigOperators
✔ [2113/2407] Built Mathlib.MeasureTheory.Measure.MeasureSpaceDef
✔ [2114/2407] Built Mathlib.LinearAlgebra.FreeModule.Finite.Basic
✔ [2115/2407] Built Mathlib.MeasureTheory.Function.AEMeasurableSequence
✔ [2116/2407] Built Mathlib.MeasureTheory.Measure.AEDisjoint
✔ [2117/2407] Built Mathlib.Analysis.NormedSpace.ContinuousLinearMap
✔ [2118/2407] Built Mathlib.Analysis.NormedSpace.Basic
✔ [2119/2407] Built Mathlib.Algebra.MvPolynomial.Variables
✔ [2120/2407] Built Mathlib.LinearAlgebra.Matrix.Polynomial
✔ [2121/2407] Built Mathlib.LinearAlgebra.Matrix.Basis
✔ [2122/2407] Built Mathlib.LinearAlgebra.Basis.VectorSpace
✔ [2123/2407] Built Mathlib.RingTheory.Polynomial.Nilpotent
✔ [2124/2407] Built Mathlib.MeasureTheory.Measure.NullMeasurable
✔ [2125/2407] Built Mathlib.Algebra.MvPolynomial.CommRing
✔ [2126/2407] Built Mathlib.Analysis.NormedSpace.Real
✔ [2127/2407] Built Mathlib.LinearAlgebra.Matrix.MvPolynomial
✔ [2128/2407] Built Mathlib.Algebra.MvPolynomial.Equiv
✔ [2129/2407] Built Mathlib.Analysis.NormedSpace.AddTorsor
✔ [2130/2407] Built Mathlib.Analysis.Normed.Group.Quotient
✔ [2131/2407] Built Mathlib.Algebra.Polynomial.RingDivision
✔ [2132/2407] Built Mathlib.RingTheory.MvPolynomial.Symmetric
✔ [2133/2407] Built Mathlib.Analysis.NormedSpace.Ray
✔ [2134/2407] Built Mathlib.Algebra.Group.UniqueProds
✔ [2135/2407] Built Mathlib.Analysis.NormedSpace.LinearIsometry
✔ [2136/2407] Built Mathlib.Analysis.LocallyConvex.Basic
✔ [2137/2407] Built Mathlib.Algebra.MonoidAlgebra.NoZeroDivisors
✔ [2138/2407] Built Mathlib.RingTheory.FreeCommRing
✔ [2139/2407] Built Mathlib.FieldTheory.RatFunc.Defs
✔ [2140/2407] Built Mathlib.Analysis.NormedSpace.Span
✔ [2141/2407] Built Mathlib.LinearAlgebra.AffineSpace.Independent
✔ [2142/2407] Built Mathlib.Analysis.NormedSpace.ConformalLinearMap
✔ [2143/2407] Built Mathlib.Analysis.LocallyConvex.BalancedCoreHull
✔ [2144/2407] Built Mathlib.Analysis.NormedSpace.Star.Basic
✔ [2145/2407] Built Mathlib.Analysis.NormedSpace.Pointwise
✔ [2146/2407] Built Mathlib.Algebra.FreeAlgebra
✔ [2147/2407] Built Mathlib.Analysis.Asymptotics.Asymptotics
✔ [2148/2407] Built Mathlib.Algebra.CharP.Algebra
✔ [2149/2407] Built Mathlib.LinearAlgebra.AffineSpace.Basis
✔ [2150/2407] Built Mathlib.Algebra.Polynomial.Roots
✔ [2151/2407] Built Mathlib.Analysis.Asymptotics.Theta
✔ [2152/2407] Built Mathlib.Analysis.NormedSpace.AffineIsometry
✔ [2153/2407] Built Mathlib.MeasureTheory.Measure.MeasureSpace
✔ [2154/2407] Built Mathlib.Algebra.Polynomial.Module.Basic
✔ [2155/2407] Built Mathlib.Algebra.CharP.ExpChar
✔ [2156/2407] Built Mathlib.RingTheory.Noetherian
✔ [2157/2407] Built Mathlib.Algebra.CharP.Reduced
✔ [2158/2407] Built Mathlib.RingTheory.QuotientNoetherian
✔ [2159/2407] Built Mathlib.Algebra.CharP.Two
✔ [2160/2407] Built Mathlib.Analysis.Asymptotics.AsymptoticEquivalent
✔ [2161/2407] Built Mathlib.Analysis.SpecificLimits.Normed
✔ [2162/2407] Built Mathlib.Data.Nat.Totient
✔ [2163/2407] Built Mathlib.Analysis.NormedSpace.Units
✔ [2164/2407] Built Mathlib.Analysis.RCLike.Basic
✔ [2165/2407] Built Mathlib.MeasureTheory.Measure.Restrict
✔ [2166/2407] Built Mathlib.MeasureTheory.Measure.MutuallySingular
✔ [2167/2407] Built Mathlib.Analysis.Convex.Combination
✔ [2168/2407] Built Mathlib.Topology.Instances.AddCircle
✔ [2169/2407] Built Mathlib.MeasureTheory.Measure.Typeclasses
✔ [2170/2407] Built Mathlib.RingTheory.UniqueFactorizationDomain
✔ [2171/2407] Built Mathlib.MeasureTheory.Measure.Trim
✔ [2172/2407] Built Mathlib.Analysis.Normed.Group.AddCircle
✔ [2173/2407] Built Mathlib.MeasureTheory.Measure.Dirac
✔ [2174/2407] Built Mathlib.Analysis.Convex.Topology
✔ [2175/2407] Built Mathlib.RingTheory.Localization.NumDen
✔ [2176/2407] Built Mathlib.Analysis.Seminorm
✔ [2177/2407] Built Mathlib.Algebra.Squarefree.Basic
✔ [2178/2407] Built Mathlib.MeasureTheory.Measure.AEMeasurable
✔ [2179/2407] Built Mathlib.Analysis.Convex.Jensen
✔ [2180/2407] Built Mathlib.MeasureTheory.Measure.Count
✔ [2181/2407] Built Mathlib.Topology.Algebra.Module.LocallyConvex
✔ [2182/2407] Built Mathlib.RingTheory.PrincipalIdealDomain
✔ [2183/2407] Built Mathlib.MeasureTheory.Order.Lattice
✔ [2184/2407] Built Mathlib.Dynamics.Ergodic.MeasurePreserving
✔ [2185/2407] Built Mathlib.Analysis.NormedSpace.RieszLemma
✔ [2186/2407] Built Mathlib.RingTheory.ZMod
✔ [2187/2407] Built Mathlib.RingTheory.EuclideanDomain
✔ [2188/2407] Built Mathlib.RingTheory.Int.Basic
✔ [2189/2407] Built Mathlib.Data.Nat.Squarefree
✔ [2190/2407] Built Mathlib.LinearAlgebra.InvariantBasisNumber
✔ [2191/2407] Built Mathlib.Analysis.Calculus.TangentCone
✔ [2192/2407] Built Mathlib.MeasureTheory.Group.Arithmetic
✔ [2193/2407] Built Mathlib.Analysis.LocallyConvex.Bounded
✔ [2194/2407] Built Mathlib.Data.ZMod.Quotient
✔ [2195/2407] Built Mathlib.Algebra.DirectLimit
✔ [2196/2407] Built Mathlib.MeasureTheory.Constructions.BorelSpace.Basic
✔ [2197/2407] Built Mathlib.Topology.Algebra.Module.Multilinear.Bounded
✔ [2198/2407] Built Mathlib.Algebra.Polynomial.FieldDivision
✔ [2199/2407] Built Mathlib.MeasureTheory.Measure.OpenPos
✔ [2200/2407] Built Mathlib.LinearAlgebra.Dimension.StrongRankCondition
✔ [2201/2407] Built Mathlib.GroupTheory.Exponent
✔ [2202/2407] Built Mathlib.Topology.Algebra.UniformConvergence
✔ [2203/2407] Built Mathlib.Topology.Algebra.Equicontinuity
✔ [2204/2407] Built Mathlib.RingTheory.Polynomial.Content
✔ [2205/2407] Built Mathlib.LinearAlgebra.Dimension.Free
✔ [2206/2407] Built Mathlib.Algebra.Polynomial.Splits
✔ [2207/2407] Built Mathlib.MeasureTheory.Constructions.BorelSpace.Order
✔ [2208/2407] Built Mathlib.RingTheory.EisensteinCriterion
✔ [2209/2407] Built Mathlib.Topology.Algebra.Module.Multilinear.Topology
✔ [2210/2407] Built Mathlib.NumberTheory.ArithmeticFunction
✔ [2211/2407] Built Mathlib.RingTheory.Polynomial.Eisenstein.Basic
✔ [2212/2407] Built Mathlib.RingTheory.Polynomial.Vieta
✔ [2213/2407] Built Mathlib.GroupTheory.SpecificGroups.Cyclic
✔ [2214/2407] Built Mathlib.MeasureTheory.Constructions.BorelSpace.Real
✔ [2215/2407] Built Mathlib.Topology.Algebra.Polynomial
✔ [2216/2407] Built Mathlib.GroupTheory.PGroup
✔ [2217/2407] Built Mathlib.RingTheory.IntegralDomain
✔ [2218/2407] Built Mathlib.LinearAlgebra.FreeModule.PID
✔ [2219/2407] Built Mathlib.Topology.Algebra.Module.StrongTopology
✔ [2220/2407] Built Mathlib.MeasureTheory.Function.SimpleFunc
✔ [2221/2407] Built Mathlib.GroupTheory.Torsion
✔ [2222/2407] Built Mathlib.RingTheory.Polynomial.Basic
✔ [2223/2407] Built Mathlib.Tactic.ReduceModChar
✔ [2224/2407] Built Mathlib.RingTheory.Adjoin.FG
✔ [2225/2407] Built Mathlib.RingTheory.Adjoin.Tower
✔ [2226/2407] Built Mathlib.Analysis.LocallyConvex.WithSeminorms
✔ [2227/2407] Built Mathlib.RingTheory.RootsOfUnity.Basic
✔ [2228/2407] Built Mathlib.RingTheory.Polynomial.Quotient
✔ [2229/2407] Built Mathlib.LinearAlgebra.Matrix.Adjugate
✔ [2230/2407] Built Mathlib.RingTheory.FiniteType
✔ [2231/2407] Built Mathlib.LinearAlgebra.Matrix.Nondegenerate
✔ [2232/2407] Built Mathlib.RingTheory.JacobsonIdeal
✔ [2233/2407] Built Mathlib.Algebra.Module.Torsion
✔ [2234/2407] Built Mathlib.MeasureTheory.Integral.Lebesgue
✔ [2235/2407] Built Mathlib.MeasureTheory.Measure.GiryMonad
✔ [2236/2407] Built Mathlib.RingTheory.Ideal.LocalRing
✔ [2237/2407] Built Mathlib.RingTheory.FinitePresentation
✔ [2238/2407] Built Mathlib.RingTheory.Localization.AtPrime
✔ [2239/2407] Built Mathlib.Algebra.Polynomial.Expand
✔ [2240/2407] Built Mathlib.FieldTheory.RatFunc.Basic
✔ [2241/2407] Built Mathlib.FieldTheory.RatFunc.AsPolynomial
✔ [2242/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.Basic
✔ [2243/2407] Built Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup
✔ [2244/2407] Built Mathlib.LinearAlgebra.Dimension.Finite
✔ [2245/2407] Built Mathlib.MeasureTheory.Constructions.Prod.Basic
✔ [2246/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.Asymptotics
✔ [2247/2407] Built Mathlib.LinearAlgebra.Dimension.Constructions
✔ [2248/2407] Built Mathlib.FieldTheory.Finiteness
✔ [2249/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.NNNorm
✔ [2250/2407] Built Mathlib.LinearAlgebra.Dimension.RankNullity
✔ [2251/2407] Built Mathlib.LinearAlgebra.Dimension.DivisionRing
✔ [2252/2407] Built Mathlib.LinearAlgebra.Dimension.LinearMap
✔ [2253/2407] Built Mathlib.Analysis.Calculus.FDeriv.Basic
✔ [2254/2407] Built Mathlib.Analysis.Calculus.FDeriv.RestrictScalars
✔ [2255/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear
✔ [2256/2407] Built Mathlib.Analysis.Calculus.FDeriv.Comp
✔ [2257/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.Completeness
✔ [2258/2407] Built Mathlib.LinearAlgebra.FiniteDimensional
✔ [2259/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.NormedSpace
✔ [2260/2407] Built Mathlib.Analysis.NormedSpace.Completion
✔ [2261/2407] Built Mathlib.LinearAlgebra.Matrix.NonsingularInverse
✔ [2262/2407] Built Mathlib.LinearAlgebra.AffineSpace.FiniteDimensional
✔ [2263/2407] Built Mathlib.RingTheory.SimpleModule
✔ [2264/2407] Built Mathlib.Topology.Instances.Matrix
✔ [2265/2407] Built Mathlib.Analysis.Calculus.Deriv.Basic
✔ [2266/2407] Built Mathlib.Topology.Algebra.Module.Simple
✔ [2267/2407] Built Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup
✔ [2268/2407] Built Mathlib.LinearAlgebra.Matrix.Block
✔ [2269/2407] Built Mathlib.Data.Complex.Module
✔ [2270/2407] Built Mathlib.Analysis.Calculus.Deriv.Slope
✔ [2271/2407] Built Mathlib.Analysis.NormedSpace.OperatorNorm.Mul
✔ [2272/2407] Built Mathlib.LinearAlgebra.Vandermonde
✔ [2273/2407] Built Mathlib.LinearAlgebra.Matrix.ToLinearEquiv
✔ [2274/2407] Built Mathlib.LinearAlgebra.Determinant
✔ [2275/2407] Built Mathlib.Analysis.Calculus.Deriv.Comp
✔ [2276/2407] Built Mathlib.Topology.Algebra.Module.Determinant
✔ [2277/2407] Built Mathlib.Analysis.Complex.Basic
✔ [2278/2407] Built Mathlib.Analysis.Complex.Asymptotics
✔ [2279/2407] Built Mathlib.Analysis.Convex.Between
✔ [2280/2407] Built Mathlib.Analysis.SpecialFunctions.Exp
✔ [2281/2407] Built Mathlib.Analysis.Convex.Normed
✔ [2282/2407] Built Mathlib.LinearAlgebra.Matrix.SesquilinearForm
✔ [2283/2407] Built Mathlib.Analysis.Complex.Circle
✔ [2284/2407] Built Mathlib.Analysis.SpecialFunctions.Log.Basic
✔ [2285/2407] Built Mathlib.Analysis.Convex.StrictConvexSpace
✔ [2286/2407] Built Mathlib.RingTheory.TensorProduct.Basic
✔ [2287/2407] Built Mathlib.Analysis.Complex.Isometry
✔ [2288/2407] Built Mathlib.Analysis.Convex.Uniform
✔ [2289/2407] Built Mathlib.RingTheory.MatrixAlgebra
✔ [2290/2407] Built Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
✔ [2291/2407] Built Mathlib.RingTheory.PolynomialAlgebra
✔ [2292/2407] Built Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse
✔ [2293/2407] Built Mathlib.LinearAlgebra.Matrix.Charpoly.Basic
✔ [2294/2407] Built Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle
✔ [2295/2407] Built Mathlib.Analysis.NormedSpace.Multilinear.Basic
✔ [2296/2407] Built Mathlib.Analysis.SpecialFunctions.Complex.Arg
✔ [2297/2407] Built Mathlib.LinearAlgebra.Matrix.Charpoly.Coeff
✔ [2298/2407] Built Mathlib.Analysis.SpecialFunctions.Complex.Log
✔ [2299/2407] Built Mathlib.RingTheory.RootsOfUnity.Complex
✔ [2300/2407] Built Mathlib.LinearAlgebra.Matrix.Charpoly.LinearMap
✔ [2301/2407] Built Mathlib.Analysis.NormedSpace.BoundedLinearMaps
✔ [2302/2407] Built Mathlib.RingTheory.Polynomial.Cyclotomic.Basic
✔ [2303/2407] Built Mathlib.Analysis.Calculus.FDeriv.Linear
✔ [2304/2407] Built Mathlib.Analysis.Calculus.Deriv.Linear
✔ [2305/2407] Built Mathlib.RingTheory.IntegralClosure
✔ [2306/2407] Built Mathlib.Analysis.Calculus.FDeriv.Add
✔ [2307/2407] Built Mathlib.Analysis.NormedSpace.Multilinear.Curry
✔ [2308/2407] Built Mathlib.Analysis.Calculus.FDeriv.Equiv
✔ [2309/2407] Built Mathlib.FieldTheory.Minpoly.Basic
✔ [2310/2407] Built Mathlib.Analysis.Calculus.FDeriv.Pi
✔ [2311/2407] Built Mathlib.Analysis.Calculus.Conformal.NormedSpace
✔ [2312/2407] Built Mathlib.Analysis.Calculus.FDeriv.Prod
✔ [2313/2407] Built Mathlib.Analysis.Calculus.Deriv.Inverse
✔ [2314/2407] Built Mathlib.RingTheory.Algebraic
✔ [2315/2407] Built Mathlib.Analysis.Calculus.Deriv.Add
✔ [2316/2407] Built Mathlib.Analysis.Calculus.Deriv.Shift
✔ [2317/2407] Built Mathlib.Analysis.Calculus.Deriv.AffineMap
✔ [2318/2407] Built Mathlib.Analysis.Calculus.FDeriv.Bilinear
✔ [2319/2407] Built Mathlib.FieldTheory.Minpoly.Field
✔ [2320/2407] Built Mathlib.Analysis.Calculus.LocalExtr.Basic
✔ [2321/2407] Built Mathlib.RingTheory.Localization.Integral
✔ [2322/2407] Built Mathlib.Analysis.Calculus.LocalExtr.Rolle
✔ [2323/2407] Built Mathlib.LinearAlgebra.Charpoly.Basic
✔ [2324/2407] Built Mathlib.LinearAlgebra.FreeModule.StrongRankCondition
✔ [2325/2407] Built Mathlib.RingTheory.IntegrallyClosed
✔ [2326/2407] Built Mathlib.Analysis.Calculus.FormalMultilinearSeries
✔ [2327/2407] Built Mathlib.Algebra.GCDMonoid.IntegrallyClosed
✔ [2328/2407] Built Mathlib.RingTheory.Polynomial.RationalRoot
✔ [2329/2407] Built Mathlib.RingTheory.PowerBasis
✔ [2330/2407] Built Mathlib.LinearAlgebra.FreeModule.Finite.Matrix
✔ [2331/2407] Built Mathlib.RingTheory.Ideal.Over
✔ [2332/2407] Built Mathlib.LinearAlgebra.Matrix.Charpoly.Minpoly
✔ [2333/2407] Built Mathlib.FieldTheory.Tower
✔ [2334/2407] Built Mathlib.RingTheory.DedekindDomain.Basic
✔ [2335/2407] Built Mathlib.RingTheory.Adjoin.PowerBasis
✔ [2336/2407] Built Mathlib.FieldTheory.Separable
✔ [2337/2407] Built Mathlib.Analysis.InnerProductSpace.Basic
✔ [2338/2407] Built Mathlib.Analysis.Complex.Arg
✔ [2339/2407] Built Mathlib.FieldTheory.Finite.Basic
✔ [2340/2407] Built Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.Basic
✔ [2341/2407] Built Mathlib.NumberTheory.LegendreSymbol.Basic
✔ [2342/2407] Built Mathlib.Topology.Algebra.Module.FiniteDimension
✔ [2343/2407] Built Mathlib.RingTheory.AdjoinRoot
✔ [2344/2407] Built Mathlib.MeasureTheory.Constructions.BorelSpace.ContinuousLinearMap
✔ [2345/2407] Built Mathlib.FieldTheory.IntermediateField
✔ [2346/2407] Built Mathlib.RingTheory.Adjoin.Field
✔ [2347/2407] Built Mathlib.FieldTheory.SplittingField.IsSplittingField
✔ [2348/2407] Built Mathlib.FieldTheory.SplittingField.Construction
✔ [2349/2407] Built Mathlib.RingTheory.Polynomial.GaussLemma
✔ [2350/2407] Built Mathlib.FieldTheory.Perfect
✔ [2351/2407] Built Mathlib.Analysis.NormedSpace.FiniteDimension
✔ [2352/2407] Built Mathlib.FieldTheory.Minpoly.IsIntegrallyClosed
✔ [2353/2407] Built Mathlib.Analysis.Complex.Conformal
✔ [2354/2407] Built Mathlib.RingTheory.RootsOfUnity.Minpoly
✔ [2355/2407] Built Mathlib.RingTheory.Polynomial.Cyclotomic.Roots
✔ [2356/2407] Built Mathlib.RingTheory.Polynomial.Cyclotomic.Expand
✔ [2357/2407] Built Mathlib.LinearAlgebra.Dual
✔ [2358/2407] Built Mathlib.RingTheory.Polynomial.Cyclotomic.Eval
✔ [2359/2407] Built Mathlib.Analysis.Calculus.ContDiff.Defs
✔ [2360/2407] Built Mathlib.Analysis.Calculus.FDeriv.Mul
✔ [2361/2407] Built Mathlib.Analysis.Calculus.IteratedDeriv.Defs
✔ [2362/2407] Built Mathlib.LinearAlgebra.Contraction
✔ [2363/2407] Built Mathlib.LinearAlgebra.BilinearForm.Properties
✔ [2364/2407] Built Mathlib.FieldTheory.Adjoin
✔ [2365/2407] Built Mathlib.LinearAlgebra.BilinearForm.DualLattice
✔ [2366/2407] Built Mathlib.LinearAlgebra.Trace
✔ [2367/2407] Built Mathlib.LinearAlgebra.Matrix.BilinearForm
✔ [2368/2407] Built Mathlib.FieldTheory.Extension
✔ [2369/2407] Built Mathlib.Analysis.Calculus.Deriv.Mul
✔ [2370/2407] Built Mathlib.Analysis.Calculus.Deriv.Pow
✔ [2371/2407] Built Mathlib.Analysis.Calculus.Deriv.Inv
✔ [2372/2407] Built Mathlib.Analysis.Calculus.MeanValue
✔ [2373/2407] Built Mathlib.FieldTheory.Normal
✔ [2374/2407] Built Mathlib.Analysis.Calculus.ContDiff.RCLike
✔ [2375/2407] Built Mathlib.FieldTheory.Fixed
✔ [2376/2407] Built Mathlib.FieldTheory.NormalClosure
✔ [2377/2407] Built Mathlib.FieldTheory.IsAlgClosed.Basic
✔ [2378/2407] Built Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure
✔ [2379/2407] Built Mathlib.FieldTheory.PrimitiveElement
✔ [2380/2407] Built Mathlib.FieldTheory.Minpoly.MinpolyDiv
✔ [2381/2407] Built Mathlib.Analysis.Calculus.ContDiff.Basic
✔ [2382/2407] Built Mathlib.Tactic.FunProp.Measurable
✔ [2383/2407] Built Mathlib.Tactic.FunProp.AEMeasurable
✔ [2384/2407] Built Mathlib.Analysis.Calculus.IteratedDeriv.Lemmas
✔ [2385/2407] Built Mathlib.Analysis.Complex.RealDeriv
✔ [2386/2407] Built Mathlib.FieldTheory.Galois
✔ [2387/2407] Built Mathlib.FieldTheory.Finite.GaloisField
✔ [2388/2407] Built Mathlib.Analysis.SpecialFunctions.ExpDeriv
✔ [2389/2407] Built Mathlib.Analysis.SpecialFunctions.Log.Deriv
✔ [2390/2407] Built Mathlib.RingTheory.Norm
✔ [2391/2407] Built Mathlib.Tactic.FunProp.Differentiable
✔ [2392/2407] Built Mathlib.Tactic.FunProp.ContDiff
✔ [2393/2407] Built Mathlib.RingTheory.Trace
✔ [2394/2407] Built Mathlib.FieldTheory.Finite.Trace
✔ [2395/2407] Built Mathlib.RingTheory.DedekindDomain.IntegralClosure
✔ [2396/2407] Built Mathlib.NumberTheory.NumberField.Basic
✔ [2397/2407] Built Mathlib.NumberTheory.Cyclotomic.Basic
✔ [2398/2407] Built Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots
✔ [2399/2407] Built Mathlib.NumberTheory.LegendreSymbol.AddCharacter
✔ [2400/2407] Built Mathlib.NumberTheory.LegendreSymbol.GaussSum
✔ [2401/2407] Built Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.GaussSum
✔ [2402/2407] Built Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity
✔ [2403/2407] Built Mathlib.NumberTheory.LegendreSymbol.JacobiSymbol
✔ [2404/2407] Built Mathlib.Tactic.NormNum.LegendreSymbol
✔ [2405/2407] Built Mathlib.Tactic
ℹ [2406/2407] Built DuperDemo
info: stdout:
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
info: ././././DuperDemo.lean:13:5: [duper.printProof] Clause #1 (by assumption []): (∃ b, ∀ (p : person), shaves b p ↔ ¬shaves p p) = True
[duper.printProof] Clause #3 (by clausification [1]): ∀ (a : person),
      (∀ (p : person), shaves (@skS.0 Type 0 (person → person) a) p ↔ ¬shaves p p) = True
[duper.printProof] Clause #4 (by clausification [1]): Nonempty person = True
[duper.printProof] Clause #5 (by clausification [3]): ∀ (a a_1 : person),
      (shaves (@skS.0 Type 0 (person → person) a) a_1 ↔ ¬shaves a_1 a_1) = True
[duper.printProof] Clause #6 (by clausification [5]): ∀ (a a_1 : person),
      shaves (@skS.0 Type 0 (person → person) a) a_1 = True ∨ (¬shaves a_1 a_1) = False
[duper.printProof] Clause #7 (by clausification [5]): ∀ (a a_1 : person),
      shaves (@skS.0 Type 0 (person → person) a) a_1 = False ∨ (¬shaves a_1 a_1) = True
[duper.printProof] Clause #8 (by clausification [6]): ∀ (a a_1 : person),
      shaves (@skS.0 Type 0 (person → person) a) a_1 = True ∨ shaves a_1 a_1 = True
[duper.printProof] Clause #9 (by equality factoring [8]): ∀ (a : person),
      True ≠ True ∨ shaves (@skS.0 Type 0 (person → person) a) (@skS.0 Type 0 (person → person) a) = True
[duper.printProof] Clause #10 (by clausification [7]): ∀ (a a_1 : person),
      shaves (@skS.0 Type 0 (person → person) a) a_1 = False ∨ shaves a_1 a_1 = False
[duper.printProof] Clause #13 (by clausification [9]): ∀ (a : person),
      shaves (@skS.0 Type 0 (person → person) a) (@skS.0 Type 0 (person → person) a) = True ∨
        True = False ∨ True = False
[duper.printProof] Clause #15 (by clausification [13]): ∀ (a : person),
      shaves (@skS.0 Type 0 (person → person) a) (@skS.0 Type 0 (person → person) a) = True ∨ True = False
[duper.printProof] Clause #16 (by clausification [15]): ∀ (a : person),
      shaves (@skS.0 Type 0 (person → person) a) (@skS.0 Type 0 (person → person) a) = True
[duper.printProof] Clause #17 (by superposition [16, 10]): person → True = False ∨ True = False
[duper.printProof] Clause #20 (by removeVanishedVars [17, 4]): True = False ∨ True = False
[duper.printProof] Clause #21 (by clausification [20]): True = False
[duper.printProof] Clause #22 (by clausification [21]): False
info: stdout:
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
info: ././././DuperDemo.lean:18:5: Try this: duper [mul_left_inv, one_mul, mul_assoc] {portfolioInstance := 1}
info: stdout:
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Duper determined that this problem requires inhabitation reasoning, continuing portfolio mode with it enabled
Build completed successfully.
2024-05-26 23:58:28.012 | INFO     | __main__:main:188 - Tracing DuperDemo
2024-05-26 23:58:28.089 | DEBUG    | __main__:main:193 - lake env lean --threads 32 --run ExtractData.lean

  0%|          | 0/3036 [00:00<?, ?it/s]
  0%|          | 0/3036 [00:05<?, ?it/s]
  0%|          | 0/3036 [00:10<?, ?it/s]
  1%|          | 25/3036 [00:15<10:02,  5.00it/s]
  2%|▏         | 46/3036 [00:20<11:00,  4.53it/s]
  2%|▏         | 67/3036 [00:25<11:18,  4.37it/s]
  3%|▎         | 96/3036 [00:30<09:55,  4.94it/s]
  4%|▍         | 120/3036 [00:35<09:56,  4.89it/s]
  5%|▍         | 148/3036 [00:40<09:23,  5.13it/s]
  5%|▌         | 155/3036 [00:45<12:17,  3.91it/s]
  6%|▌         | 171/3036 [00:50<12:58,  3.68it/s]
  6%|▌         | 184/3036 [00:55<14:13,  3.34it/s]
  6%|▋         | 197/3036 [01:00<15:12,  3.11it/s]
  7%|▋         | 201/3036 [01:05<19:38,  2.40it/s]
  7%|▋         | 213/3036 [01:10<19:34,  2.40it/s]
  7%|▋         | 221/3036 [01:15<21:43,  2.16it/s]
  8%|▊         | 229/3036 [01:20<23:30,  1.99it/s]
  8%|▊         | 239/3036 [01:25<23:23,  1.99it/s]
  8%|▊         | 250/3036 [01:30<22:36,  2.05it/s]
  8%|▊         | 257/3036 [01:35<24:56,  1.86it/s]
  9%|▉         | 266/3036 [01:40<25:05,  1.84it/s]
  9%|▉         | 272/3036 [01:45<27:58,  1.65it/s]
  9%|▉         | 288/3036 [01:50<21:40,  2.11it/s]
 10%|▉         | 294/3036 [01:55<24:51,  1.84it/s]
 10%|▉         | 301/3036 [02:00<26:42,  1.71it/s]
 10%|█         | 307/3036 [02:05<29:15,  1.55it/s]
 10%|█         | 311/3036 [02:10<34:12,  1.33it/s]
 10%|█         | 318/3036 [02:15<33:34,  1.35it/s]
 11%|█         | 324/3036 [02:20<34:39,  1.30it/s]
 11%|█         | 330/3036 [02:25<35:26,  1.27it/s]
 11%|█         | 340/3036 [02:30<30:09,  1.49it/s]
 11%|█▏        | 345/3036 [02:35<33:24,  1.34it/s]
 12%|█▏        | 354/3036 [02:40<30:12,  1.48it/s]
 12%|█▏        | 359/3036 [02:45<33:24,  1.34it/s]
 12%|█▏        | 364/3036 [02:50<36:04,  1.23it/s]
 12%|█▏        | 373/3036 [02:55<31:37,  1.40it/s]
 13%|█▎        | 381/3036 [03:00<30:15,  1.46it/s]
 13%|█▎        | 393/3036 [03:05<25:16,  1.74it/s]
 13%|█▎        | 406/3036 [03:10<21:55,  2.00it/s]
 14%|█▍        | 421/3036 [03:15<18:57,  2.30it/s]
 14%|█▍        | 437/3036 [03:20<16:51,  2.57it/s]
 15%|█▍        | 454/3036 [03:25<15:16,  2.82it/s]
 15%|█▌        | 464/3036 [03:30<16:40,  2.57it/s]
 16%|█▌        | 480/3036 [03:35<15:26,  2.76it/s]
 16%|█▌        | 490/3036 [03:40<16:45,  2.53it/s]
 17%|█▋        | 501/3036 [03:45<17:22,  2.43it/s]
 17%|█▋        | 512/3036 [03:50<17:48,  2.36it/s]
 17%|█▋        | 531/3036 [03:55<14:57,  2.79it/s]
 18%|█▊        | 550/3036 [04:00<13:23,  3.09it/s]
 19%|█▊        | 569/3036 [04:05<12:26,  3.30it/s]
 19%|█▉        | 584/3036 [04:10<12:43,  3.21it/s]
 20%|█▉        | 597/3036 [04:15<13:25,  3.03it/s]
 20%|██        | 608/3036 [04:20<14:33,  2.78it/s]
 21%|██        | 627/3036 [04:25<13:01,  3.08it/s]
 21%|██        | 645/3036 [04:30<12:18,  3.24it/s]
 22%|██▏       | 662/3036 [04:35<12:02,  3.29it/s]
 22%|██▏       | 680/3036 [04:40<11:37,  3.38it/s]
 23%|██▎       | 689/3036 [04:45<13:28,  2.90it/s]
 23%|██▎       | 700/3036 [04:50<14:27,  2.69it/s]
 23%|██▎       | 709/3036 [04:55<15:59,  2.42it/s]
 24%|██▎       | 717/3036 [05:00<17:45,  2.18it/s]
 24%|██▍       | 726/3036 [05:05<18:39,  2.06it/s]
 24%|██▍       | 732/3036 [05:10<21:17,  1.80it/s]
 24%|██▍       | 738/3036 [05:15<23:36,  1.62it/s]
 25%|██▍       | 745/3036 [05:20<24:33,  1.55it/s]
 25%|██▍       | 750/3036 [05:25<27:26,  1.39it/s]
 25%|██▌       | 759/3036 [05:30<25:06,  1.51it/s]
 25%|██▌       | 764/3036 [05:35<27:53,  1.36it/s]
 25%|██▌       | 772/3036 [05:40<26:23,  1.43it/s]
 26%|██▌       | 780/3036 [05:45<25:23,  1.48it/s]
 26%|██▌       | 787/3036 [05:50<25:44,  1.46it/s]
 26%|██▌       | 790/3036 [05:55<31:13,  1.20it/s]
 26%|██▋       | 799/3036 [06:00<27:02,  1.38it/s]
 26%|██▋       | 803/3036 [06:05<30:53,  1.20it/s]
 27%|██▋       | 813/3036 [06:10<25:40,  1.44it/s]
 27%|██▋       | 823/3036 [06:15<22:55,  1.61it/s]
 28%|██▊       | 837/3036 [06:20<18:38,  1.97it/s]
 28%|██▊       | 847/3036 [06:25<18:28,  1.98it/s]
 28%|██▊       | 856/3036 [06:30<18:53,  1.92it/s]
 29%|██▊       | 867/3036 [06:35<18:01,  2.00it/s]
 29%|██▉       | 875/3036 [06:40<19:07,  1.88it/s]
 29%|██▉       | 887/3036 [06:45<17:34,  2.04it/s]
 30%|██▉       | 897/3036 [06:50<17:36,  2.03it/s]
 30%|██▉       | 908/3036 [06:55<17:04,  2.08it/s]
 30%|███       | 920/3036 [07:00<16:13,  2.17it/s]
 31%|███       | 931/3036 [07:05<16:05,  2.18it/s]
 31%|███       | 941/3036 [07:10<16:25,  2.13it/s]
 31%|███▏      | 954/3036 [07:15<15:18,  2.27it/s]
 32%|███▏      | 976/3036 [07:20<11:48,  2.91it/s]
 33%|███▎      | 998/3036 [07:25<10:07,  3.35it/s]
 34%|███▎      | 1024/3036 [07:30<08:35,  3.91it/s]
 34%|███▍      | 1047/3036 [07:35<08:03,  4.11it/s]
 35%|███▌      | 1072/3036 [07:40<07:28,  4.38it/s]
 36%|███▌      | 1098/3036 [07:45<06:59,  4.62it/s]
 37%|███▋      | 1113/3036 [07:50<07:44,  4.14it/s]
 37%|███▋      | 1133/3036 [07:55<07:44,  4.09it/s]
 38%|███▊      | 1161/3036 [08:00<06:52,  4.54it/s]
 39%|███▉      | 1188/3036 [08:05<06:25,  4.80it/s]
 40%|████      | 1219/3036 [08:10<05:48,  5.22it/s]
 41%|████      | 1241/3036 [08:15<06:01,  4.97it/s]
 41%|████▏     | 1258/3036 [08:20<06:35,  4.50it/s]
 42%|████▏     | 1269/3036 [08:25<07:44,  3.81it/s]
 42%|████▏     | 1278/3036 [08:30<09:08,  3.20it/s]
 43%|████▎     | 1291/3036 [08:35<09:37,  3.02it/s]
 43%|████▎     | 1310/3036 [08:40<08:50,  3.25it/s]
 44%|████▎     | 1324/3036 [08:45<09:09,  3.12it/s]
 44%|████▍     | 1339/3036 [08:50<09:10,  3.08it/s]
 45%|████▍     | 1355/3036 [08:55<08:59,  3.12it/s]
 45%|████▌     | 1369/3036 [09:00<09:11,  3.02it/s]
 45%|████▌     | 1376/3036 [09:05<10:55,  2.53it/s]
 46%|████▌     | 1386/3036 [09:10<11:35,  2.37it/s]
 46%|████▌     | 1395/3036 [09:15<12:25,  2.20it/s]
 46%|████▌     | 1400/3036 [09:20<14:48,  1.84it/s]
 47%|████▋     | 1413/3036 [09:25<13:04,  2.07it/s]
 47%|████▋     | 1425/3036 [09:30<12:23,  2.17it/s]
 47%|████▋     | 1433/3036 [09:35<13:22,  2.00it/s]
 48%|████▊     | 1446/3036 [09:40<12:10,  2.18it/s]
 48%|████▊     | 1461/3036 [09:45<10:49,  2.42it/s]
 49%|████▊     | 1473/3036 [09:50<10:47,  2.42it/s]
 49%|████▉     | 1488/3036 [09:55<09:57,  2.59it/s]
 50%|████▉     | 1503/3036 [10:00<09:25,  2.71it/s]
 50%|█████     | 1520/3036 [10:05<08:39,  2.92it/s]
 50%|█████     | 1530/3036 [10:10<09:30,  2.64it/s]
 51%|█████     | 1547/3036 [10:15<08:39,  2.87it/s]
 51%|█████▏    | 1560/3036 [10:20<08:49,  2.79it/s]
 52%|█████▏    | 1575/3036 [10:25<08:32,  2.85it/s]
 52%|█████▏    | 1589/3036 [10:30<08:30,  2.83it/s]
 53%|█████▎    | 1607/3036 [10:35<07:46,  3.06it/s]
 53%|█████▎    | 1620/3036 [10:40<08:04,  2.92it/s]
 54%|█████▎    | 1630/3036 [10:45<08:51,  2.65it/s]
 54%|█████▍    | 1637/3036 [10:50<10:15,  2.27it/s]
 54%|█████▍    | 1642/3036 [10:55<12:17,  1.89it/s]
 54%|█████▍    | 1651/3036 [11:00<12:23,  1.86it/s]
 55%|█████▍    | 1661/3036 [11:05<12:02,  1.90it/s]
 55%|█████▍    | 1666/3036 [11:10<13:59,  1.63it/s]
 55%|█████▌    | 1678/3036 [11:15<12:09,  1.86it/s]
 56%|█████▌    | 1690/3036 [11:20<11:05,  2.02it/s]
 56%|█████▌    | 1695/3036 [11:25<13:01,  1.72it/s]
 56%|█████▌    | 1707/3036 [11:30<11:31,  1.92it/s]
 57%|█████▋    | 1719/3036 [11:35<10:38,  2.06it/s]
 57%|█████▋    | 1733/3036 [11:40<09:30,  2.28it/s]
 58%|█████▊    | 1755/3036 [11:45<07:19,  2.92it/s]
 58%|█████▊    | 1767/3036 [11:50<07:39,  2.76it/s]
 59%|█████▊    | 1782/3036 [11:55<07:22,  2.83it/s]
 59%|█████▉    | 1793/3036 [12:00<07:50,  2.64it/s]
 59%|█████▉    | 1806/3036 [12:05<07:47,  2.63it/s]
 60%|██████    | 1823/3036 [12:10<07:04,  2.86it/s]
 60%|██████    | 1833/3036 [12:15<07:42,  2.60it/s]
 61%|██████    | 1846/3036 [12:20<07:37,  2.60it/s]
 61%|██████    | 1858/3036 [12:25<07:44,  2.54it/s]
 62%|██████▏   | 1871/3036 [12:30<07:35,  2.56it/s]
 62%|██████▏   | 1893/3036 [12:35<06:07,  3.11it/s]
 63%|██████▎   | 1912/3036 [12:40<05:39,  3.31it/s]
 64%|██████▎   | 1935/3036 [12:45<04:57,  3.70it/s]
 64%|██████▍   | 1953/3036 [12:50<04:55,  3.67it/s]
 65%|██████▌   | 1979/3036 [12:55<04:16,  4.13it/s]
 66%|██████▌   | 1998/3036 [13:00<04:17,  4.03it/s]
 67%|██████▋   | 2019/3036 [13:05<04:09,  4.08it/s]
 67%|██████▋   | 2040/3036 [13:10<04:02,  4.11it/s]
 68%|██████▊   | 2055/3036 [13:15<04:19,  3.78it/s]
 68%|██████▊   | 2077/3036 [13:20<04:01,  3.96it/s]
 69%|██████▉   | 2092/3036 [13:25<04:16,  3.67it/s]
 69%|██████▉   | 2105/3036 [13:30<04:37,  3.35it/s]
 70%|██████▉   | 2122/3036 [13:35<04:31,  3.37it/s]
 71%|███████   | 2142/3036 [13:40<04:11,  3.55it/s]
 71%|███████▏  | 2164/3036 [13:45<03:49,  3.81it/s]
 72%|███████▏  | 2187/3036 [13:50<03:29,  4.04it/s]
 73%|███████▎  | 2214/3036 [13:55<03:04,  4.45it/s]
 74%|███████▍  | 2241/3036 [14:00<02:47,  4.73it/s]
 74%|███████▍  | 2261/3036 [14:05<02:51,  4.51it/s]
 75%|███████▌  | 2290/3036 [14:10<02:32,  4.90it/s]
 76%|███████▋  | 2316/3036 [14:15<02:24,  4.98it/s]
 77%|███████▋  | 2341/3036 [14:20<02:19,  4.99it/s]
 78%|███████▊  | 2363/3036 [14:25<02:19,  4.81it/s]
 78%|███████▊  | 2383/3036 [14:30<02:23,  4.57it/s]
 79%|███████▉  | 2404/3036 [14:35<02:21,  4.46it/s]
 80%|███████▉  | 2423/3036 [14:40<02:23,  4.26it/s]
 81%|████████  | 2445/3036 [14:45<02:17,  4.30it/s]
 81%|████████▏ | 2468/3036 [14:50<02:09,  4.39it/s]
 82%|████████▏ | 2488/3036 [14:55<02:08,  4.27it/s]
 83%|████████▎ | 2509/3036 [15:00<02:04,  4.25it/s]
 83%|████████▎ | 2535/3036 [15:05<01:50,  4.53it/s]
 84%|████████▍ | 2560/3036 [15:10<01:41,  4.67it/s]
 85%|████████▌ | 2586/3036 [15:15<01:33,  4.83it/s]
 86%|████████▌ | 2608/3036 [15:20<01:31,  4.70it/s]
 87%|████████▋ | 2633/3036 [15:25<01:24,  4.79it/s]
 88%|████████▊ | 2659/3036 [15:30<01:16,  4.91it/s]
 89%|████████▊ | 2687/3036 [15:35<01:08,  5.11it/s]
 90%|████████▉ | 2721/3036 [15:40<00:56,  5.62it/s]
 91%|█████████ | 2748/3036 [15:45<00:51,  5.55it/s]
 91%|█████████▏| 2777/3036 [15:50<00:46,  5.62it/s]
 92%|█████████▏| 2801/3036 [15:55<00:43,  5.37it/s]
 93%|█████████▎| 2828/3036 [16:00<00:38,  5.38it/s]
 94%|█████████▍| 2858/3036 [16:05<00:31,  5.57it/s]
 95%|█████████▌| 2885/3036 [16:10<00:27,  5.51it/s]
 96%|█████████▌| 2912/3036 [16:15<00:22,  5.48it/s]
 97%|█████████▋| 2943/3036 [16:20<00:16,  5.69it/s]
 98%|█████████▊| 2971/3036 [16:25<00:11,  5.66it/s]
 99%|█████████▉| 3009/3036 [16:30<00:04,  6.24it/s]
 99%|█████████▉| 3010/3036 [16:35<00:05,  4.43it/s]2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Svg.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/GoalTypePanel.ast.json
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/ExprPresentation.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/InteractiveSvg.ast.json
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Jsx.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/SelectInsertConv.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/SelectionPanel.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Plot.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/GoalTypePanel.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/RbTree.ast.json
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/RbTree.dep_paths
2024-05-27 00:15:06.932 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Euclidean.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/InteractiveSvg.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Dynkin.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Dynkin.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Jsx.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/InteractiveSvg.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/SelectionPanel.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Svg.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/SelectInsertConv.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Macro.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Conv.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Rubiks.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Venn.dep_paths
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Conv.ast.json
2024-05-27 00:15:06.933 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/ExprPresentation.ast.json
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Rubiks.ast.json
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/InteractiveSvg.dep_paths
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Macro.dep_paths
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets.dep_paths
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Venn.ast.json
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Plot.ast.json
2024-05-27 00:15:06.934 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpkqv292n8/workspace/DuperDemo/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Euclidean.ast.json

-------------------------------------------------------------------------------
main.py 376 <module>
main()

main.py 365 main
proofs = retrieve_proof(lean_git_repo)

main.py 259 retrieve_proof
traced_repo = trace(repo)

trace.py 115 trace
cached_path = get_traced_repo_path(repo, build_deps)

trace.py 83 get_traced_repo_path
traced_repo = TracedRepo.from_traced_files(tmp_dir / repo.name, build_deps)

traced_data.py 1107 from_traced_files
with ray_actor_pool(_TracedRepoHelper, root_dir, repo) as pool:

contextlib.py 135 __enter__
return next(self.gen)

utils.py 72 ray_actor_pool
assert not ray.is_initialized()

AssertionError




ATTEMPT 3





[2024-05-27 10:44:07,096] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Found 1 repositories
Processing Adarsh321123/new-version-test
2024-05-27 10:44:18.517 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-27 10:44:18.518 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc1
2024-05-27 10:44:18.518 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-27 10:44:18.518 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 10:44:18.518 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 10:44:18.549 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-27 10:44:18.549 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54')
2024-05-27 10:44:18.550 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-version-test-279c3bc5c6d1e1b8810c99129d7d2c43c5469b54/new-version-test
2024-05-27 10:44:20,923	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8269 [39m[22m

  0%|          | 0/5433 [00:00<?, ?it/s]
  0%|          | 1/5433 [00:01<2:38:30,  1.75s/it]
  0%|          | 8/5433 [00:01<15:36,  5.79it/s]  
  0%|          | 22/5433 [00:01<04:48, 18.74it/s]
  1%|          | 32/5433 [00:02<04:05, 21.98it/s]
  1%|          | 39/5433 [00:02<04:44, 18.95it/s]
  1%|          | 44/5433 [00:02<04:05, 21.91it/s]
  1%|          | 49/5433 [00:03<05:40, 15.81it/s]
  1%|          | 53/5433 [00:04<07:10, 12.51it/s]
  1%|          | 59/5433 [00:04<05:23, 16.60it/s]
  1%|          | 63/5433 [00:04<08:09, 10.97it/s]
  1%|▏         | 74/5433 [00:05<07:34, 11.79it/s]
  1%|▏         | 78/5433 [00:06<10:26,  8.55it/s]
  2%|▏         | 92/5433 [00:06<05:41, 15.63it/s]
  2%|▏         | 107/5433 [00:07<03:29, 25.45it/s]
  3%|▎         | 136/5433 [00:07<01:45, 50.37it/s]
  3%|▎         | 150/5433 [00:08<03:29, 25.17it/s]
  3%|▎         | 160/5433 [00:08<03:14, 27.15it/s]
  3%|▎         | 168/5433 [00:08<02:50, 30.97it/s]
  3%|▎         | 176/5433 [00:10<06:51, 12.77it/s]
  3%|▎         | 183/5433 [00:10<05:43, 15.31it/s]
  3%|▎         | 190/5433 [00:10<04:39, 18.75it/s]
  4%|▎         | 196/5433 [00:13<10:20,  8.44it/s]
  4%|▎         | 201/5433 [00:13<09:46,  8.92it/s]
  4%|▍         | 205/5433 [00:13<08:34, 10.15it/s]
  4%|▍         | 212/5433 [00:14<07:24, 11.73it/s]
  4%|▍         | 220/5433 [00:14<05:12, 16.67it/s]
  4%|▍         | 225/5433 [00:16<13:55,  6.23it/s]
  4%|▍         | 228/5433 [00:16<12:41,  6.84it/s]
  4%|▍         | 236/5433 [00:16<08:08, 10.64it/s]
  4%|▍         | 243/5433 [00:16<05:56, 14.56it/s]
  5%|▍         | 250/5433 [00:17<04:29, 19.20it/s]
  5%|▍         | 256/5433 [00:17<03:42, 23.28it/s]
  5%|▍         | 262/5433 [00:17<04:39, 18.50it/s]
  5%|▍         | 266/5433 [00:20<16:42,  5.16it/s]
  5%|▍         | 271/5433 [00:20<12:38,  6.81it/s]
  5%|▌         | 276/5433 [00:20<09:44,  8.83it/s]
  5%|▌         | 280/5433 [00:21<09:16,  9.25it/s]
  5%|▌         | 285/5433 [00:21<07:01, 12.21it/s]
  5%|▌         | 289/5433 [00:21<05:46, 14.86it/s]
  5%|▌         | 293/5433 [00:21<06:25, 13.33it/s]
  5%|▌         | 298/5433 [00:21<04:54, 17.44it/s]
  6%|▌         | 302/5433 [00:25<24:13,  3.53it/s]
  6%|▌         | 306/5433 [00:25<18:03,  4.73it/s]
  6%|▌         | 313/5433 [00:25<11:09,  7.64it/s]
  6%|▌         | 318/5433 [00:25<08:23, 10.17it/s]
  6%|▌         | 325/5433 [00:25<05:53, 14.47it/s]
  6%|▌         | 330/5433 [00:26<06:26, 13.21it/s]
  6%|▌         | 336/5433 [00:26<04:50, 17.52it/s]
  6%|▋         | 343/5433 [00:26<03:38, 23.25it/s]
  6%|▋         | 348/5433 [00:30<21:30,  3.94it/s]
  7%|▋         | 354/5433 [00:30<15:19,  5.52it/s]
  7%|▋         | 358/5433 [00:31<14:06,  5.99it/s]
  7%|▋         | 362/5433 [00:31<11:10,  7.56it/s]
  7%|▋         | 368/5433 [00:31<07:50, 10.77it/s]
  7%|▋         | 374/5433 [00:31<05:44, 14.70it/s]
  7%|▋         | 380/5433 [00:31<04:23, 19.20it/s]
  7%|▋         | 385/5433 [00:32<05:04, 16.56it/s]
  7%|▋         | 392/5433 [00:32<03:42, 22.64it/s]
  7%|▋         | 399/5433 [00:32<02:52, 29.21it/s]
  7%|▋         | 407/5433 [00:32<02:15, 36.97it/s]
  8%|▊         | 414/5433 [00:32<02:57, 28.22it/s]
  8%|▊         | 420/5433 [00:38<21:37,  3.86it/s]
  8%|▊         | 424/5433 [00:38<18:51,  4.43it/s]
  8%|▊         | 432/5433 [00:38<12:14,  6.81it/s]
  8%|▊         | 437/5433 [00:38<10:04,  8.26it/s]
  8%|▊         | 444/5433 [00:38<07:07, 11.67it/s]
  8%|▊         | 451/5433 [00:38<05:13, 15.87it/s]
  8%|▊         | 457/5433 [00:39<04:43, 17.55it/s]
  9%|▊         | 462/5433 [00:39<03:56, 20.98it/s]
  9%|▊         | 472/5433 [00:39<02:44, 30.11it/s]
  9%|▉         | 478/5433 [00:39<02:36, 31.74it/s]
  9%|▉         | 483/5433 [00:39<02:40, 30.91it/s]
  9%|▉         | 490/5433 [00:39<02:20, 35.30it/s]
  9%|▉         | 496/5433 [00:40<02:15, 36.53it/s]
  9%|▉         | 501/5433 [00:47<34:03,  2.41it/s]
  9%|▉         | 505/5433 [00:48<27:25,  3.00it/s]
  9%|▉         | 509/5433 [00:48<21:17,  3.86it/s]
  9%|▉         | 513/5433 [00:48<16:42,  4.91it/s]
  9%|▉         | 516/5433 [00:48<13:54,  5.89it/s]
 10%|▉         | 519/5433 [00:48<11:40,  7.01it/s]
 10%|▉         | 524/5433 [00:48<08:24,  9.72it/s]
 10%|▉         | 529/5433 [00:48<06:14, 13.10it/s]
 10%|▉         | 533/5433 [00:49<05:21, 15.25it/s]
 10%|▉         | 540/5433 [00:49<03:44, 21.84it/s]
 10%|█         | 547/5433 [00:49<02:48, 28.92it/s]
 10%|█         | 552/5433 [00:57<40:27,  2.01it/s]
 10%|█         | 558/5433 [00:58<28:06,  2.89it/s]
 10%|█         | 564/5433 [00:58<19:52,  4.08it/s]
 10%|█         | 568/5433 [00:58<16:19,  4.97it/s]
 11%|█         | 572/5433 [00:58<13:20,  6.07it/s]
 11%|█         | 575/5433 [00:58<11:18,  7.16it/s]
 11%|█         | 579/5433 [00:58<08:39,  9.34it/s]
 11%|█         | 584/5433 [00:59<06:23, 12.65it/s]
 11%|█         | 588/5433 [00:59<05:32, 14.59it/s]
 11%|█         | 592/5433 [00:59<04:48, 16.75it/s]
 11%|█         | 597/5433 [00:59<03:45, 21.47it/s]
 11%|█         | 602/5433 [00:59<03:21, 23.98it/s]
 11%|█         | 611/5433 [00:59<02:15, 35.67it/s]
 11%|█▏        | 616/5433 [00:59<02:17, 35.11it/s]
 11%|█▏        | 621/5433 [01:00<02:14, 35.72it/s]
 12%|█▏        | 629/5433 [01:00<01:58, 40.63it/s]
 12%|█▏        | 637/5433 [01:00<01:38, 48.69it/s]
 12%|█▏        | 646/5433 [01:00<01:21, 58.42it/s]
 12%|█▏        | 646/5433 [01:10<01:21, 58.42it/s]
 12%|█▏        | 651/5433 [01:10<38:49,  2.05it/s]
 12%|█▏        | 656/5433 [01:11<29:49,  2.67it/s]
 12%|█▏        | 662/5433 [01:11<21:39,  3.67it/s]
 12%|█▏        | 668/5433 [01:11<15:54,  4.99it/s]
 12%|█▏        | 674/5433 [01:11<11:40,  6.79it/s]
 13%|█▎        | 680/5433 [01:11<08:43,  9.08it/s]
 13%|█▎        | 685/5433 [01:11<06:55, 11.43it/s]
 13%|█▎        | 690/5433 [01:11<05:30, 14.34it/s]
 13%|█▎        | 702/5433 [01:11<03:10, 24.85it/s]
 13%|█▎        | 709/5433 [01:12<02:47, 28.14it/s]
 13%|█▎        | 715/5433 [01:12<02:42, 29.10it/s]
 13%|█▎        | 723/5433 [01:12<02:08, 36.60it/s]
 14%|█▎        | 735/5433 [01:12<01:31, 51.34it/s]
 14%|█▎        | 743/5433 [01:12<01:28, 53.06it/s]
 14%|█▍        | 751/5433 [01:12<01:37, 48.15it/s]
 14%|█▍        | 758/5433 [01:13<01:38, 47.46it/s]
 14%|█▍        | 764/5433 [01:13<01:54, 40.69it/s]
 14%|█▍        | 769/5433 [01:13<02:03, 37.79it/s]
 14%|█▍        | 774/5433 [01:13<01:57, 39.53it/s]
 14%|█▍        | 780/5433 [01:13<01:55, 40.13it/s]
 14%|█▍        | 785/5433 [01:13<02:00, 38.42it/s]
 15%|█▍        | 790/5433 [01:13<01:58, 39.03it/s]
 15%|█▍        | 790/5433 [01:27<01:58, 39.03it/s]
 15%|█▍        | 793/5433 [01:27<1:06:46,  1.16it/s]
 15%|█▍        | 797/5433 [01:27<49:40,  1.56it/s]  
 15%|█▍        | 801/5433 [01:27<36:39,  2.11it/s]
 15%|█▍        | 806/5433 [01:27<25:20,  3.04it/s]
 15%|█▍        | 811/5433 [01:27<17:46,  4.33it/s]
 15%|█▌        | 815/5433 [01:27<13:38,  5.64it/s]
 15%|█▌        | 822/5433 [01:28<08:40,  8.87it/s]
 15%|█▌        | 829/5433 [01:28<05:57, 12.88it/s]
 15%|█▌        | 834/5433 [01:28<04:51, 15.78it/s]
 15%|█▌        | 841/5433 [01:28<03:33, 21.51it/s]
 16%|█▌        | 849/5433 [01:28<02:43, 28.11it/s]
 16%|█▌        | 855/5433 [01:28<02:21, 32.27it/s]
 16%|█▌        | 861/5433 [01:28<02:14, 34.03it/s]
 16%|█▌        | 866/5433 [01:28<02:10, 35.07it/s]
 16%|█▌        | 873/5433 [01:29<01:54, 39.69it/s]
 16%|█▌        | 880/5433 [01:29<01:42, 44.49it/s]
 16%|█▋        | 889/5433 [01:29<01:23, 54.60it/s]
 16%|█▋        | 896/5433 [01:29<01:28, 51.29it/s]
 17%|█▋        | 902/5433 [01:29<01:32, 49.18it/s]
 17%|█▋        | 908/5433 [01:29<01:34, 48.13it/s]
 17%|█▋        | 914/5433 [01:29<01:35, 47.53it/s]
 17%|█▋        | 920/5433 [01:29<01:29, 50.52it/s]
 17%|█▋        | 926/5433 [01:30<01:29, 50.48it/s]
 17%|█▋        | 938/5433 [01:30<01:06, 67.89it/s]
 17%|█▋        | 946/5433 [01:30<01:03, 70.77it/s]
 18%|█▊        | 954/5433 [01:30<01:01, 73.03it/s]
 18%|█▊        | 962/5433 [01:30<01:54, 39.11it/s]
 18%|█▊        | 968/5433 [01:30<01:47, 41.60it/s]
 18%|█▊        | 968/5433 [01:47<01:47, 41.60it/s]
 18%|█▊        | 969/5433 [01:47<1:10:50,  1.05it/s]
 18%|█▊        | 970/5433 [01:48<1:06:17,  1.12it/s]
 18%|█▊        | 975/5433 [01:48<45:23,  1.64it/s]  
 18%|█▊        | 983/5433 [01:48<25:52,  2.87it/s]
 18%|█▊        | 990/5433 [01:48<17:03,  4.34it/s]
 18%|█▊        | 996/5433 [01:48<12:18,  6.00it/s]
 18%|█▊        | 1003/5433 [01:48<08:32,  8.65it/s]
 19%|█▊        | 1009/5433 [01:48<06:49, 10.80it/s]
 19%|█▊        | 1014/5433 [01:49<05:34, 13.23it/s]
 19%|█▉        | 1019/5433 [01:49<04:41, 15.66it/s]
 19%|█▉        | 1026/5433 [01:49<03:28, 21.13it/s]
 19%|█▉        | 1035/5433 [01:49<02:30, 29.27it/s]
 19%|█▉        | 1044/5433 [01:49<02:08, 34.19it/s]
 19%|█▉        | 1050/5433 [01:49<02:00, 36.38it/s]
 19%|█▉        | 1056/5433 [01:49<01:52, 38.80it/s]
 20%|█▉        | 1062/5433 [01:50<01:50, 39.72it/s]
 20%|█▉        | 1067/5433 [01:50<02:18, 31.41it/s]
 20%|█▉        | 1073/5433 [01:50<02:05, 34.71it/s]
 20%|█▉        | 1078/5433 [01:50<02:10, 33.29it/s]
 20%|██        | 1087/5433 [01:50<01:57, 37.08it/s]
 20%|██        | 1091/5433 [01:51<02:05, 34.57it/s]
 20%|██        | 1095/5433 [01:51<02:02, 35.32it/s]
 20%|██        | 1105/5433 [01:51<01:31, 47.16it/s]
 20%|██        | 1113/5433 [01:51<01:19, 54.43it/s]
 21%|██        | 1119/5433 [01:51<02:14, 31.97it/s]
 21%|██        | 1124/5433 [01:51<02:25, 29.63it/s]
 21%|██        | 1135/5433 [01:52<01:41, 42.41it/s]
 21%|██        | 1135/5433 [02:12<01:41, 42.41it/s]
 21%|██        | 1146/5433 [02:12<51:20,  1.39it/s]
 21%|██        | 1152/5433 [02:12<39:49,  1.79it/s]
 21%|██▏       | 1161/5433 [02:12<26:57,  2.64it/s]
 22%|██▏       | 1170/5433 [02:12<18:34,  3.83it/s]
 22%|██▏       | 1178/5433 [02:12<13:34,  5.23it/s]
 22%|██▏       | 1187/5433 [02:12<09:29,  7.45it/s]
 22%|██▏       | 1198/5433 [02:13<06:20, 11.14it/s]
 22%|██▏       | 1207/5433 [02:13<05:07, 13.74it/s]
 22%|██▏       | 1214/5433 [02:13<04:28, 15.72it/s]
 22%|██▏       | 1221/5433 [02:13<03:46, 18.59it/s]
 23%|██▎       | 1229/5433 [02:13<03:03, 22.89it/s]
 23%|██▎       | 1239/5433 [02:14<02:15, 30.85it/s]
 23%|██▎       | 1246/5433 [02:14<02:02, 34.08it/s]
 23%|██▎       | 1252/5433 [02:14<01:51, 37.36it/s]
 23%|██▎       | 1262/5433 [02:14<01:27, 47.78it/s]
 23%|██▎       | 1269/5433 [02:14<01:25, 48.92it/s]
 24%|██▎       | 1278/5433 [02:14<01:13, 56.46it/s]
 24%|██▎       | 1287/5433 [02:14<01:08, 60.23it/s]
 24%|██▍       | 1297/5433 [02:14<01:06, 62.16it/s]
 24%|██▍       | 1304/5433 [02:15<01:28, 46.68it/s]
 24%|██▍       | 1310/5433 [02:15<01:39, 41.27it/s]
 24%|██▍       | 1319/5433 [02:15<01:29, 46.11it/s]
 24%|██▍       | 1325/5433 [02:15<01:27, 47.09it/s]
 24%|██▍       | 1331/5433 [02:15<01:26, 47.55it/s]
 25%|██▍       | 1338/5433 [02:15<01:23, 48.90it/s]
 25%|██▍       | 1344/5433 [02:16<01:30, 45.12it/s]
 25%|██▍       | 1349/5433 [02:16<01:44, 39.05it/s]
 25%|██▍       | 1354/5433 [02:16<01:42, 39.63it/s]
 25%|██▌       | 1360/5433 [02:16<01:32, 44.16it/s]
 25%|██▌       | 1368/5433 [02:16<01:35, 42.50it/s]
 25%|██▌       | 1373/5433 [02:16<01:58, 34.36it/s]
 25%|██▌       | 1378/5433 [02:17<01:58, 34.30it/s]
 25%|██▌       | 1382/5433 [02:17<02:08, 31.48it/s]
 26%|██▌       | 1387/5433 [02:17<01:55, 35.08it/s]
 26%|██▌       | 1391/5433 [02:17<02:08, 31.58it/s]
 26%|██▌       | 1391/5433 [02:42<02:08, 31.58it/s]
 26%|██▌       | 1397/5433 [02:42<1:38:55,  1.47s/it]
 26%|██▌       | 1403/5433 [02:42<1:06:27,  1.01it/s]
 26%|██▌       | 1407/5433 [02:42<51:23,  1.31it/s]  
 26%|██▌       | 1411/5433 [02:42<38:39,  1.73it/s]
 26%|██▌       | 1421/5433 [02:43<20:29,  3.26it/s]
 26%|██▋       | 1428/5433 [02:43<14:11,  4.70it/s]
 26%|██▋       | 1434/5433 [02:43<11:07,  5.99it/s]
 27%|██▋       | 1441/5433 [02:43<07:53,  8.44it/s]
 27%|██▋       | 1446/5433 [02:43<06:17, 10.56it/s]
 27%|██▋       | 1451/5433 [02:43<05:05, 13.04it/s]
 27%|██▋       | 1456/5433 [02:43<04:09, 15.97it/s]
 27%|██▋       | 1461/5433 [02:44<03:41, 17.96it/s]
 27%|██▋       | 1466/5433 [02:44<03:19, 19.93it/s]
 27%|██▋       | 1470/5433 [02:44<02:55, 22.52it/s]
 27%|██▋       | 1474/5433 [02:44<02:49, 23.36it/s]
 27%|██▋       | 1478/5433 [02:44<02:47, 23.62it/s]
 27%|██▋       | 1482/5433 [02:44<02:39, 24.84it/s]
 27%|██▋       | 1485/5433 [02:45<02:43, 24.16it/s]
 27%|██▋       | 1489/5433 [02:45<02:29, 26.36it/s]
 27%|██▋       | 1492/5433 [02:45<02:30, 26.18it/s]
 28%|██▊       | 1498/5433 [02:45<02:01, 32.52it/s]
 28%|██▊       | 1503/5433 [02:45<01:48, 36.07it/s]
 28%|██▊       | 1508/5433 [02:45<01:39, 39.57it/s]
 28%|██▊       | 1513/5433 [02:45<01:37, 40.31it/s]
 28%|██▊       | 1522/5433 [02:45<01:13, 53.28it/s]
 28%|██▊       | 1528/5433 [02:46<01:31, 42.63it/s]
 28%|██▊       | 1533/5433 [02:46<01:38, 39.62it/s]
 28%|██▊       | 1538/5433 [02:46<01:34, 41.09it/s]
 28%|██▊       | 1545/5433 [02:46<01:21, 47.54it/s]
 29%|██▊       | 1551/5433 [02:46<01:33, 41.58it/s]
 29%|██▊       | 1556/5433 [02:46<01:58, 32.85it/s]
 29%|██▉       | 1562/5433 [02:46<01:41, 38.19it/s]
 29%|██▉       | 1567/5433 [02:47<01:38, 39.17it/s]
 29%|██▉       | 1573/5433 [02:47<01:33, 41.50it/s]
 29%|██▉       | 1578/5433 [02:47<01:33, 41.12it/s]
 29%|██▉       | 1584/5433 [02:47<01:24, 45.46it/s]
 29%|██▉       | 1589/5433 [02:47<01:30, 42.34it/s]
 29%|██▉       | 1594/5433 [02:47<01:35, 40.28it/s]
 29%|██▉       | 1600/5433 [02:47<01:26, 44.33it/s]
 30%|██▉       | 1605/5433 [02:48<02:16, 28.07it/s]
 30%|██▉       | 1610/5433 [02:48<02:00, 31.63it/s]
 30%|██▉       | 1614/5433 [02:48<02:01, 31.45it/s]
 30%|██▉       | 1620/5433 [02:48<01:42, 37.15it/s]
 30%|██▉       | 1626/5433 [02:48<01:31, 41.50it/s]
 30%|███       | 1633/5433 [02:48<01:18, 48.25it/s]
 30%|███       | 1639/5433 [02:48<01:36, 39.30it/s]
 30%|███       | 1644/5433 [02:49<01:37, 38.75it/s]
 30%|███       | 1651/5433 [02:49<01:26, 43.61it/s]
 30%|███       | 1656/5433 [02:49<01:24, 44.48it/s]
 30%|███       | 1656/5433 [03:20<01:24, 44.48it/s]
 31%|███       | 1660/5433 [03:20<1:52:18,  1.79s/it]
 31%|███       | 1665/5433 [03:20<1:19:56,  1.27s/it]
 31%|███       | 1672/5433 [03:20<50:45,  1.23it/s]  
 31%|███       | 1678/5433 [03:20<35:22,  1.77it/s]
 31%|███       | 1684/5433 [03:20<24:59,  2.50it/s]
 31%|███       | 1690/5433 [03:20<17:40,  3.53it/s]
 31%|███       | 1696/5433 [03:20<12:37,  4.93it/s]
 31%|███▏      | 1702/5433 [03:20<09:20,  6.66it/s]
 31%|███▏      | 1707/5433 [03:21<07:29,  8.29it/s]
 32%|███▏      | 1714/5433 [03:21<05:14, 11.83it/s]
 32%|███▏      | 1720/5433 [03:21<03:59, 15.49it/s]
 32%|███▏      | 1728/5433 [03:21<02:52, 21.49it/s]
 32%|███▏      | 1736/5433 [03:21<02:13, 27.64it/s]
 32%|███▏      | 1742/5433 [03:21<02:18, 26.59it/s]
 32%|███▏      | 1747/5433 [03:22<02:22, 25.93it/s]
 32%|███▏      | 1752/5433 [03:22<02:14, 27.44it/s]
 32%|███▏      | 1756/5433 [03:22<02:20, 26.21it/s]
 32%|███▏      | 1760/5433 [03:22<02:09, 28.31it/s]
 32%|███▏      | 1765/5433 [03:22<01:56, 31.45it/s]
 33%|███▎      | 1770/5433 [03:22<01:43, 35.32it/s]
 33%|███▎      | 1776/5433 [03:22<01:38, 37.31it/s]
 33%|███▎      | 1785/5433 [03:22<01:19, 45.79it/s]
 33%|███▎      | 1790/5433 [03:23<01:21, 44.86it/s]
 33%|███▎      | 1795/5433 [03:23<01:21, 44.45it/s]
 33%|███▎      | 1800/5433 [03:23<01:44, 34.75it/s]
 33%|███▎      | 1806/5433 [03:23<01:31, 39.50it/s]
 33%|███▎      | 1811/5433 [03:23<01:46, 34.05it/s]
 33%|███▎      | 1816/5433 [03:23<01:41, 35.50it/s]
 33%|███▎      | 1820/5433 [03:24<01:43, 35.05it/s]
 34%|███▎      | 1824/5433 [03:24<01:58, 30.39it/s]
 34%|███▎      | 1828/5433 [03:24<01:59, 30.24it/s]
 34%|███▎      | 1832/5433 [03:24<02:22, 25.26it/s]
 34%|███▍      | 1836/5433 [03:24<02:08, 27.94it/s]
 34%|███▍      | 1842/5433 [03:24<01:53, 31.68it/s]
 34%|███▍      | 1847/5433 [03:24<01:52, 31.90it/s]
 34%|███▍      | 1853/5433 [03:25<01:49, 32.62it/s]
 34%|███▍      | 1860/5433 [03:25<01:31, 38.87it/s]
 34%|███▍      | 1868/5433 [03:25<01:14, 47.94it/s]
 35%|███▍      | 1875/5433 [03:25<01:09, 51.22it/s]
 35%|███▍      | 1881/5433 [03:25<01:14, 47.96it/s]
 35%|███▍      | 1887/5433 [03:25<01:10, 50.59it/s]
 35%|███▍      | 1897/5433 [03:25<00:59, 58.96it/s]
 35%|███▌      | 1904/5433 [03:25<00:57, 61.57it/s]
 35%|███▌      | 1911/5433 [03:26<01:00, 58.42it/s]
 35%|███▌      | 1919/5433 [03:26<00:56, 62.19it/s]
 35%|███▌      | 1926/5433 [03:26<00:56, 62.60it/s]
 36%|███▌      | 1933/5433 [03:26<01:16, 45.67it/s]
 36%|███▌      | 1941/5433 [03:26<01:08, 50.67it/s]
 36%|███▌      | 1947/5433 [03:26<01:06, 52.23it/s]
 36%|███▌      | 1953/5433 [03:27<01:22, 41.94it/s]
 36%|███▌      | 1960/5433 [03:27<01:14, 46.51it/s]
 36%|███▌      | 1969/5433 [03:27<01:01, 56.16it/s]
 36%|███▋      | 1976/5433 [03:27<01:15, 45.92it/s]
 36%|███▋      | 1982/5433 [03:27<01:16, 45.02it/s]
 37%|███▋      | 1988/5433 [03:27<01:15, 45.38it/s]
 37%|███▋      | 1996/5433 [03:27<01:07, 50.94it/s]
 37%|███▋      | 2003/5433 [03:28<01:16, 44.72it/s]
 37%|███▋      | 2003/5433 [04:07<01:16, 44.72it/s]
 37%|███▋      | 2007/5433 [04:07<1:50:08,  1.93s/it]
 37%|███▋      | 2010/5433 [04:07<1:31:18,  1.60s/it]
 37%|███▋      | 2015/5433 [04:07<1:05:19,  1.15s/it]
 37%|███▋      | 2019/5433 [04:07<49:26,  1.15it/s]  
 37%|███▋      | 2023/5433 [04:07<37:13,  1.53it/s]
 37%|███▋      | 2028/5433 [04:07<25:41,  2.21it/s]
 37%|███▋      | 2034/5433 [04:07<16:56,  3.34it/s]
 38%|███▊      | 2041/5433 [04:08<10:55,  5.17it/s]
 38%|███▊      | 2047/5433 [04:08<07:55,  7.12it/s]
 38%|███▊      | 2052/5433 [04:08<06:21,  8.87it/s]
 38%|███▊      | 2057/5433 [04:08<05:04, 11.09it/s]
 38%|███▊      | 2061/5433 [04:08<04:31, 12.42it/s]
 38%|███▊      | 2065/5433 [04:08<03:46, 14.89it/s]
 38%|███▊      | 2070/5433 [04:09<03:08, 17.84it/s]
 38%|███▊      | 2074/5433 [04:09<02:41, 20.81it/s]
 38%|███▊      | 2081/5433 [04:09<01:57, 28.65it/s]
 38%|███▊      | 2086/5433 [04:09<01:45, 31.72it/s]
 39%|███▊      | 2094/5433 [04:09<01:23, 39.92it/s]
 39%|███▊      | 2100/5433 [04:09<01:17, 42.75it/s]
 39%|███▉      | 2106/5433 [04:09<01:32, 36.03it/s]
 39%|███▉      | 2111/5433 [04:09<01:29, 36.93it/s]
 39%|███▉      | 2118/5433 [04:10<01:17, 42.97it/s]
 39%|███▉      | 2129/5433 [04:10<01:03, 52.29it/s]
 39%|███▉      | 2143/5433 [04:10<00:50, 65.75it/s]
 40%|███▉      | 2150/5433 [04:10<00:50, 64.64it/s]
 40%|███▉      | 2158/5433 [04:10<00:49, 66.75it/s]
 40%|███▉      | 2173/5433 [04:10<00:38, 85.17it/s]
 40%|████      | 2192/5433 [04:10<00:29, 111.05it/s]
 41%|████      | 2204/5433 [04:10<00:30, 105.90it/s]
 41%|████      | 2218/5433 [04:11<00:28, 114.73it/s]
 41%|████      | 2230/5433 [04:11<00:30, 104.83it/s]
 41%|████▏     | 2245/5433 [04:11<00:27, 114.87it/s]
 42%|████▏     | 2264/5433 [04:11<00:23, 134.48it/s]
 42%|████▏     | 2278/5433 [04:11<00:27, 113.68it/s]
 42%|████▏     | 2304/5433 [04:11<00:21, 147.57it/s]
 43%|████▎     | 2321/5433 [04:11<00:20, 152.93it/s]
 43%|████▎     | 2338/5433 [04:11<00:20, 150.70it/s]
 43%|████▎     | 2354/5433 [04:12<00:26, 117.80it/s]
 44%|████▎     | 2368/5433 [04:12<00:29, 103.73it/s]
 44%|████▍     | 2380/5433 [04:12<00:35, 85.54it/s] 
 44%|████▍     | 2390/5433 [04:12<00:38, 78.59it/s]
 44%|████▍     | 2399/5433 [04:12<00:44, 68.72it/s]
 44%|████▍     | 2410/5433 [04:12<00:39, 76.38it/s]
 45%|████▍     | 2419/5433 [04:13<00:42, 70.65it/s]
 45%|████▍     | 2434/5433 [04:13<00:34, 85.87it/s]
 45%|████▍     | 2444/5433 [04:13<00:34, 86.95it/s]
 45%|████▌     | 2456/5433 [04:13<00:32, 92.69it/s]
 45%|████▌     | 2468/5433 [04:13<00:30, 97.97it/s]
 46%|████▌     | 2479/5433 [04:13<00:33, 87.44it/s]
 46%|████▌     | 2489/5433 [04:13<00:39, 74.81it/s]
 46%|████▌     | 2498/5433 [04:14<00:50, 57.59it/s]
 46%|████▌     | 2505/5433 [04:14<01:00, 48.20it/s]
 46%|████▌     | 2511/5433 [04:14<01:06, 43.79it/s]
 46%|████▋     | 2516/5433 [04:14<01:07, 43.31it/s]
 46%|████▋     | 2522/5433 [04:14<01:05, 44.70it/s]
 47%|████▋     | 2527/5433 [04:14<01:07, 43.32it/s]
 47%|████▋     | 2532/5433 [04:15<01:04, 44.77it/s]
 47%|████▋     | 2538/5433 [04:15<01:10, 41.19it/s]
 47%|████▋     | 2544/5433 [04:15<01:05, 44.00it/s]
 47%|████▋     | 2550/5433 [04:15<01:01, 47.19it/s]
 47%|████▋     | 2557/5433 [04:15<00:55, 51.95it/s]
 47%|████▋     | 2567/5433 [04:15<00:44, 63.76it/s]
 47%|████▋     | 2574/5433 [04:15<00:53, 53.74it/s]
 47%|████▋     | 2580/5433 [04:15<00:55, 51.21it/s]
 48%|████▊     | 2591/5433 [04:16<00:44, 63.37it/s]
 48%|████▊     | 2604/5433 [04:16<00:38, 73.54it/s]
 48%|████▊     | 2612/5433 [04:16<00:42, 66.86it/s]
 48%|████▊     | 2625/5433 [04:16<00:34, 81.66it/s]
 49%|████▊     | 2638/5433 [04:16<00:30, 93.01it/s]
 49%|████▊     | 2638/5433 [05:03<00:30, 93.01it/s]
 49%|████▉     | 2650/5433 [05:03<57:23,  1.24s/it]
 49%|████▉     | 2655/5433 [05:03<48:26,  1.05s/it]
 49%|████▉     | 2663/5433 [05:03<35:48,  1.29it/s]
 49%|████▉     | 2670/5433 [05:03<27:15,  1.69it/s]
 49%|████▉     | 2678/5433 [05:03<19:29,  2.36it/s]
 49%|████▉     | 2684/5433 [05:04<15:07,  3.03it/s]
 50%|████▉     | 2690/5433 [05:04<11:42,  3.91it/s]
 50%|████▉     | 2696/5433 [05:04<08:49,  5.17it/s]
 50%|████▉     | 2703/5433 [05:04<06:21,  7.16it/s]
 50%|████▉     | 2708/5433 [05:04<05:03,  8.99it/s]
 50%|████▉     | 2713/5433 [05:04<04:05, 11.08it/s]
 50%|█████     | 2720/5433 [05:04<03:01, 14.95it/s]
 50%|█████     | 2725/5433 [05:05<02:29, 18.08it/s]
 50%|█████     | 2732/5433 [05:05<02:01, 22.24it/s]
 50%|█████     | 2737/5433 [05:05<01:44, 25.80it/s]
 50%|█████     | 2742/5433 [05:05<01:51, 24.10it/s]
 51%|█████     | 2746/5433 [05:05<01:59, 22.55it/s]
 51%|█████     | 2750/5433 [05:05<01:53, 23.63it/s]
 51%|█████     | 2755/5433 [05:06<01:37, 27.58it/s]
 51%|█████     | 2759/5433 [05:06<01:30, 29.61it/s]
 51%|█████     | 2763/5433 [05:06<01:26, 30.88it/s]
 51%|█████     | 2770/5433 [05:06<01:09, 38.52it/s]
 51%|█████     | 2775/5433 [05:06<01:05, 40.88it/s]
 51%|█████     | 2780/5433 [05:06<01:03, 41.80it/s]
 51%|█████▏    | 2788/5433 [05:06<01:02, 42.44it/s]
 51%|█████▏    | 2795/5433 [05:06<00:54, 48.62it/s]
 52%|█████▏    | 2801/5433 [05:07<01:00, 43.44it/s]
 52%|█████▏    | 2807/5433 [05:07<00:57, 45.46it/s]
 52%|█████▏    | 2813/5433 [05:07<00:56, 46.20it/s]
 52%|█████▏    | 2819/5433 [05:07<00:58, 44.91it/s]
 52%|█████▏    | 2827/5433 [05:07<00:50, 51.39it/s]
 52%|█████▏    | 2833/5433 [05:07<00:52, 49.81it/s]
 52%|█████▏    | 2839/5433 [05:07<00:50, 51.54it/s]
 52%|█████▏    | 2845/5433 [05:07<00:53, 48.51it/s]
 52%|█████▏    | 2850/5433 [05:08<00:58, 44.37it/s]
 53%|█████▎    | 2856/5433 [05:08<00:53, 47.79it/s]
 53%|█████▎    | 2862/5433 [05:08<00:54, 46.86it/s]
 53%|█████▎    | 2868/5433 [05:08<00:55, 45.97it/s]
 53%|█████▎    | 2874/5433 [05:08<00:52, 48.71it/s]
 53%|█████▎    | 2879/5433 [05:08<00:52, 48.89it/s]
 53%|█████▎    | 2884/5433 [05:08<01:02, 40.77it/s]
 53%|█████▎    | 2891/5433 [05:08<00:53, 47.70it/s]
 53%|█████▎    | 2897/5433 [05:09<00:55, 45.80it/s]
 53%|█████▎    | 2902/5433 [05:09<00:58, 43.11it/s]
 54%|█████▎    | 2912/5433 [05:09<00:48, 51.49it/s]
 54%|█████▎    | 2918/5433 [05:09<01:12, 34.60it/s]
 54%|█████▍    | 2925/5433 [05:09<01:02, 40.31it/s]
 54%|█████▍    | 2931/5433 [05:09<01:00, 41.35it/s]
 54%|█████▍    | 2941/5433 [05:10<00:46, 53.66it/s]
 54%|█████▍    | 2948/5433 [05:10<00:55, 44.93it/s]
 54%|█████▍    | 2954/5433 [05:10<00:53, 46.71it/s]
 54%|█████▍    | 2960/5433 [05:10<01:01, 40.27it/s]
 55%|█████▍    | 2970/5433 [05:10<00:47, 51.43it/s]
 55%|█████▍    | 2976/5433 [05:10<00:47, 51.39it/s]
 55%|█████▍    | 2986/5433 [05:10<00:40, 60.78it/s]
 55%|█████▌    | 2993/5433 [05:11<00:58, 41.70it/s]
 55%|█████▌    | 3003/5433 [05:11<00:46, 52.19it/s]
 55%|█████▌    | 3012/5433 [05:11<00:40, 59.56it/s]
 56%|█████▌    | 3020/5433 [05:11<00:45, 53.22it/s]
 56%|█████▌    | 3030/5433 [05:11<00:39, 61.45it/s]
 56%|█████▌    | 3038/5433 [05:11<00:37, 63.38it/s]
 56%|█████▌    | 3047/5433 [05:11<00:34, 68.62it/s]
 56%|█████▌    | 3055/5433 [05:12<00:33, 71.16it/s]
 56%|█████▋    | 3063/5433 [05:12<00:38, 62.36it/s]
 57%|█████▋    | 3070/5433 [05:12<00:39, 60.03it/s]
 57%|█████▋    | 3077/5433 [05:12<00:42, 54.89it/s]
 57%|█████▋    | 3088/5433 [05:12<00:39, 59.44it/s]
 57%|█████▋    | 3095/5433 [05:12<00:39, 59.87it/s]
 57%|█████▋    | 3106/5433 [05:12<00:34, 68.39it/s]
 57%|█████▋    | 3113/5433 [05:13<00:42, 54.82it/s]
 57%|█████▋    | 3119/5433 [05:13<00:47, 49.03it/s]
 58%|█████▊    | 3125/5433 [05:13<00:51, 45.08it/s]
 58%|█████▊    | 3130/5433 [05:13<00:51, 44.32it/s]
 58%|█████▊    | 3136/5433 [05:13<00:48, 47.82it/s]
 58%|█████▊    | 3143/5433 [05:13<00:44, 52.01it/s]
 58%|█████▊    | 3149/5433 [05:13<00:51, 44.17it/s]
 58%|█████▊    | 3154/5433 [05:14<00:51, 43.96it/s]
 58%|█████▊    | 3159/5433 [05:14<00:54, 41.43it/s]
 58%|█████▊    | 3164/5433 [05:14<01:00, 37.59it/s]
 58%|█████▊    | 3168/5433 [05:14<01:02, 35.97it/s]
 58%|█████▊    | 3172/5433 [05:14<01:05, 34.61it/s]
 58%|█████▊    | 3176/5433 [05:14<01:16, 29.35it/s]
 58%|█████▊    | 3176/5433 [06:12<01:16, 29.35it/s]
 58%|█████▊    | 3177/5433 [06:12<3:10:07,  5.06s/it]
 59%|█████▊    | 3185/5433 [06:12<1:35:21,  2.55s/it]
 59%|█████▊    | 3190/5433 [06:13<1:06:20,  1.77s/it]
 59%|█████▉    | 3196/5433 [06:13<43:33,  1.17s/it]  
 59%|█████▉    | 3201/5433 [06:13<31:02,  1.20it/s]
 59%|█████▉    | 3211/5433 [06:13<17:13,  2.15it/s]
 59%|█████▉    | 3218/5433 [06:13<12:07,  3.04it/s]
 59%|█████▉    | 3224/5433 [06:13<08:55,  4.13it/s]
 59%|█████▉    | 3230/5433 [06:13<06:33,  5.60it/s]
 60%|█████▉    | 3237/5433 [06:14<04:37,  7.90it/s]
 60%|█████▉    | 3243/5433 [06:14<03:32, 10.30it/s]
 60%|█████▉    | 3250/5433 [06:14<02:35, 14.00it/s]
 60%|█████▉    | 3256/5433 [06:14<02:03, 17.67it/s]
 60%|██████    | 3265/5433 [06:14<01:26, 25.01it/s]
 60%|██████    | 3273/5433 [06:14<01:07, 32.04it/s]
 60%|██████    | 3281/5433 [06:14<00:54, 39.40it/s]
 61%|██████    | 3289/5433 [06:14<00:46, 46.43it/s]
 61%|██████    | 3304/5433 [06:14<00:31, 66.71it/s]
 61%|██████    | 3314/5433 [06:15<00:29, 71.32it/s]
 61%|██████    | 3324/5433 [06:15<00:27, 75.46it/s]
 61%|██████▏   | 3335/5433 [06:15<00:25, 82.88it/s]
 62%|██████▏   | 3345/5433 [06:15<00:26, 79.15it/s]
 62%|██████▏   | 3354/5433 [06:15<00:26, 79.08it/s]
 62%|██████▏   | 3363/5433 [06:15<00:29, 69.44it/s]
 62%|██████▏   | 3371/5433 [06:15<00:30, 67.99it/s]
 62%|██████▏   | 3386/5433 [06:15<00:25, 81.10it/s]
 63%|██████▎   | 3398/5433 [06:16<00:22, 90.47it/s]
 63%|██████▎   | 3408/5433 [06:16<00:25, 80.80it/s]
 63%|██████▎   | 3419/5433 [06:16<00:23, 86.14it/s]
 63%|██████▎   | 3429/5433 [06:16<00:25, 78.89it/s]
 63%|██████▎   | 3438/5433 [06:16<00:25, 79.34it/s]
 63%|██████▎   | 3448/5433 [06:16<00:23, 82.98it/s]
 64%|██████▎   | 3457/5433 [06:16<00:25, 76.40it/s]
 64%|██████▍   | 3465/5433 [06:16<00:28, 68.57it/s]
 64%|██████▍   | 3475/5433 [06:17<00:26, 73.40it/s]
 64%|██████▍   | 3483/5433 [06:17<00:36, 53.67it/s]
 64%|██████▍   | 3490/5433 [06:17<00:42, 45.80it/s]
 64%|██████▍   | 3496/5433 [06:17<00:48, 40.00it/s]
 64%|██████▍   | 3501/5433 [06:17<00:49, 38.99it/s]
 65%|██████▍   | 3512/5433 [06:18<00:36, 52.56it/s]
 65%|██████▍   | 3519/5433 [06:18<00:37, 51.43it/s]
 65%|██████▍   | 3525/5433 [06:18<00:43, 43.88it/s]
 65%|██████▍   | 3530/5433 [06:18<00:59, 31.97it/s]
 65%|██████▌   | 3536/5433 [06:18<00:52, 36.24it/s]
 65%|██████▌   | 3541/5433 [06:18<00:49, 38.45it/s]
 65%|██████▌   | 3548/5433 [06:18<00:42, 44.44it/s]
 65%|██████▌   | 3557/5433 [06:19<00:35, 53.54it/s]
 66%|██████▌   | 3564/5433 [06:19<00:32, 57.04it/s]
 66%|██████▌   | 3572/5433 [06:19<00:30, 61.35it/s]
 66%|██████▌   | 3579/5433 [06:19<00:33, 55.16it/s]
 66%|██████▌   | 3588/5433 [06:19<00:29, 63.42it/s]
 66%|██████▌   | 3598/5433 [06:19<00:27, 66.33it/s]
 66%|██████▋   | 3608/5433 [06:19<00:26, 69.43it/s]
 67%|██████▋   | 3616/5433 [06:19<00:27, 66.06it/s]
 67%|██████▋   | 3623/5433 [06:20<00:28, 63.78it/s]
 67%|██████▋   | 3631/5433 [06:20<00:26, 66.98it/s]
 67%|██████▋   | 3638/5433 [06:20<00:28, 62.16it/s]
 67%|██████▋   | 3645/5433 [06:20<00:29, 59.94it/s]
 67%|██████▋   | 3652/5433 [06:20<00:31, 56.54it/s]
 67%|██████▋   | 3658/5433 [06:20<00:38, 46.51it/s]
 67%|██████▋   | 3663/5433 [06:20<00:43, 40.84it/s]
 68%|██████▊   | 3668/5433 [06:21<00:41, 42.32it/s]
 68%|██████▊   | 3673/5433 [06:21<00:40, 43.41it/s]
 68%|██████▊   | 3678/5433 [06:21<00:39, 44.50it/s]
 68%|██████▊   | 3683/5433 [06:21<00:41, 42.55it/s]
 68%|██████▊   | 3688/5433 [06:21<00:46, 37.91it/s]
 68%|██████▊   | 3693/5433 [06:21<00:43, 39.66it/s]
 68%|██████▊   | 3699/5433 [06:21<00:39, 44.42it/s]
 68%|██████▊   | 3704/5433 [06:21<00:46, 37.05it/s]
 68%|██████▊   | 3709/5433 [06:22<00:51, 33.59it/s]
 68%|██████▊   | 3713/5433 [06:22<00:55, 30.82it/s]
 68%|██████▊   | 3717/5433 [06:22<00:56, 30.11it/s]
 68%|██████▊   | 3721/5433 [06:22<01:00, 28.41it/s]
 69%|██████▊   | 3724/5433 [06:22<01:24, 20.12it/s]
 69%|██████▊   | 3728/5433 [06:23<01:12, 23.59it/s]
 69%|██████▊   | 3732/5433 [06:23<01:11, 23.93it/s]
 69%|██████▊   | 3735/5433 [06:23<01:08, 24.92it/s]
 69%|██████▉   | 3739/5433 [06:23<01:00, 28.17it/s]
 69%|██████▉   | 3743/5433 [06:23<01:01, 27.66it/s]
 69%|██████▉   | 3747/5433 [06:23<00:59, 28.42it/s]
 69%|██████▉   | 3750/5433 [06:23<01:01, 27.40it/s]
 69%|██████▉   | 3753/5433 [06:24<01:16, 21.98it/s]
 69%|██████▉   | 3756/5433 [06:24<01:23, 20.13it/s]
 69%|██████▉   | 3759/5433 [06:24<01:19, 20.94it/s]
 69%|██████▉   | 3762/5433 [06:24<01:15, 22.25it/s]
 69%|██████▉   | 3769/5433 [06:24<00:56, 29.43it/s]
 69%|██████▉   | 3775/5433 [06:24<00:45, 36.26it/s]
 70%|██████▉   | 3782/5433 [06:24<00:39, 41.77it/s]
 70%|██████▉   | 3787/5433 [06:24<00:41, 39.72it/s]
 70%|██████▉   | 3792/5433 [06:25<00:43, 37.42it/s]
 70%|██████▉   | 3796/5433 [06:25<01:01, 26.55it/s]
 70%|██████▉   | 3800/5433 [06:25<01:05, 25.09it/s]
 70%|███████   | 3804/5433 [06:25<01:00, 27.11it/s]
 70%|███████   | 3808/5433 [06:25<00:56, 28.86it/s]
 70%|███████   | 3812/5433 [06:25<00:52, 30.82it/s]
 70%|███████   | 3818/5433 [06:26<00:49, 32.64it/s]
 70%|███████   | 3822/5433 [06:26<01:15, 21.22it/s]
 70%|███████   | 3822/5433 [07:36<01:15, 21.22it/s]
 70%|███████   | 3823/5433 [07:36<2:44:07,  6.12s/it]
 70%|███████   | 3829/5433 [07:36<1:34:04,  3.52s/it]
 71%|███████   | 3833/5433 [07:37<1:07:19,  2.52s/it]
 71%|███████   | 3836/5433 [07:37<51:42,  1.94s/it]  
 71%|███████   | 3839/5433 [07:37<38:55,  1.46s/it]
 71%|███████   | 3842/5433 [07:37<28:54,  1.09s/it]
 71%|███████   | 3847/5433 [07:37<17:52,  1.48it/s]
 71%|███████   | 3851/5433 [07:37<12:45,  2.07it/s]
 71%|███████   | 3855/5433 [07:37<09:05,  2.89it/s]
 71%|███████   | 3861/5433 [07:38<05:44,  4.56it/s]
 71%|███████   | 3865/5433 [07:38<04:22,  5.98it/s]
 71%|███████▏  | 3872/5433 [07:38<02:44,  9.46it/s]
 71%|███████▏  | 3877/5433 [07:38<02:06, 12.32it/s]
 71%|███████▏  | 3882/5433 [07:38<01:40, 15.50it/s]
 72%|███████▏  | 3888/5433 [07:38<01:15, 20.39it/s]
 72%|███████▏  | 3893/5433 [07:38<01:04, 23.81it/s]
 72%|███████▏  | 3899/5433 [07:38<00:52, 29.12it/s]
 72%|███████▏  | 3906/5433 [07:38<00:42, 36.35it/s]
 72%|███████▏  | 3912/5433 [07:39<00:37, 40.58it/s]
 72%|███████▏  | 3918/5433 [07:39<00:34, 44.53it/s]
 72%|███████▏  | 3924/5433 [07:39<00:39, 37.96it/s]
 72%|███████▏  | 3929/5433 [07:39<00:39, 38.09it/s]
 73%|███████▎  | 3939/5433 [07:39<00:29, 50.57it/s]
 73%|███████▎  | 3946/5433 [07:39<00:27, 54.84it/s]
 73%|███████▎  | 3956/5433 [07:39<00:24, 61.27it/s]
 73%|███████▎  | 3963/5433 [07:40<00:25, 58.32it/s]
 73%|███████▎  | 3973/5433 [07:40<00:21, 67.19it/s]
 73%|███████▎  | 3981/5433 [07:40<00:24, 58.94it/s]
 73%|███████▎  | 3988/5433 [07:40<00:34, 41.55it/s]
 74%|███████▎  | 3994/5433 [07:40<00:38, 37.55it/s]
 74%|███████▎  | 3999/5433 [07:40<00:40, 35.37it/s]
 74%|███████▎  | 4004/5433 [07:41<00:37, 37.74it/s]
 74%|███████▍  | 4010/5433 [07:41<00:35, 40.65it/s]
 74%|███████▍  | 4015/5433 [07:41<00:35, 40.31it/s]
 74%|███████▍  | 4020/5433 [07:41<00:33, 41.97it/s]
 74%|███████▍  | 4025/5433 [07:41<00:36, 38.71it/s]
 74%|███████▍  | 4030/5433 [07:41<00:36, 38.61it/s]
 74%|███████▍  | 4040/5433 [07:41<00:27, 51.56it/s]
 74%|███████▍  | 4046/5433 [07:41<00:26, 51.80it/s]
 75%|███████▍  | 4053/5433 [07:42<00:26, 52.62it/s]
 75%|███████▍  | 4059/5433 [07:42<00:28, 48.48it/s]
 75%|███████▍  | 4064/5433 [07:42<00:28, 47.66it/s]
 75%|███████▍  | 4069/5433 [07:42<00:28, 47.42it/s]
 75%|███████▍  | 4074/5433 [07:42<00:32, 41.22it/s]
 75%|███████▌  | 4079/5433 [07:42<00:34, 39.55it/s]
 75%|███████▌  | 4086/5433 [07:42<00:33, 40.78it/s]
 75%|███████▌  | 4091/5433 [07:43<00:34, 39.46it/s]
 75%|███████▌  | 4097/5433 [07:43<00:30, 44.01it/s]
 76%|███████▌  | 4102/5433 [07:43<00:30, 43.21it/s]
 76%|███████▌  | 4108/5433 [07:43<00:28, 46.86it/s]
 76%|███████▌  | 4116/5433 [07:43<00:23, 55.17it/s]
 76%|███████▌  | 4131/5433 [07:43<00:16, 79.40it/s]
 76%|███████▌  | 4140/5433 [07:43<00:18, 69.15it/s]
 76%|███████▋  | 4149/5433 [07:43<00:18, 68.57it/s]
 77%|███████▋  | 4158/5433 [07:44<00:17, 72.18it/s]
 77%|███████▋  | 4166/5433 [07:44<00:17, 73.99it/s]
 77%|███████▋  | 4174/5433 [07:44<00:18, 67.00it/s]
 77%|███████▋  | 4181/5433 [07:44<00:20, 62.23it/s]
 77%|███████▋  | 4189/5433 [07:44<00:20, 62.06it/s]
 77%|███████▋  | 4198/5433 [07:44<00:18, 68.33it/s]
 78%|███████▊  | 4211/5433 [07:44<00:17, 70.05it/s]
 78%|███████▊  | 4219/5433 [07:44<00:19, 61.09it/s]
 78%|███████▊  | 4226/5433 [07:45<00:25, 46.81it/s]
 78%|███████▊  | 4233/5433 [07:45<00:23, 50.30it/s]
 78%|███████▊  | 4242/5433 [07:45<00:20, 58.17it/s]
 78%|███████▊  | 4249/5433 [07:45<00:27, 43.63it/s]
 78%|███████▊  | 4256/5433 [07:45<00:24, 48.40it/s]
 78%|███████▊  | 4262/5433 [07:46<00:28, 41.48it/s]
 79%|███████▊  | 4268/5433 [07:46<00:27, 43.13it/s]
 79%|███████▊  | 4274/5433 [07:46<00:25, 45.00it/s]
 79%|███████▉  | 4279/5433 [07:46<00:29, 39.57it/s]
 79%|███████▉  | 4284/5433 [07:46<00:30, 37.85it/s]
 79%|███████▉  | 4290/5433 [07:46<00:32, 34.96it/s]
 79%|███████▉  | 4294/5433 [07:46<00:34, 32.68it/s]
 79%|███████▉  | 4298/5433 [07:47<00:35, 32.04it/s]
 79%|███████▉  | 4303/5433 [07:47<00:32, 35.24it/s]
 79%|███████▉  | 4307/5433 [07:47<00:32, 34.78it/s]
 79%|███████▉  | 4312/5433 [07:47<00:31, 35.18it/s]
 79%|███████▉  | 4318/5433 [07:47<00:32, 34.51it/s]
 80%|███████▉  | 4326/5433 [07:47<00:26, 42.56it/s]
 80%|███████▉  | 4331/5433 [07:47<00:25, 42.50it/s]
 80%|███████▉  | 4336/5433 [07:47<00:25, 42.36it/s]
 80%|███████▉  | 4344/5433 [07:48<00:24, 44.80it/s]
 80%|████████  | 4351/5433 [07:48<00:21, 50.41it/s]
 80%|████████  | 4360/5433 [07:48<00:18, 59.26it/s]
 80%|████████  | 4367/5433 [07:48<00:24, 43.27it/s]
 80%|████████  | 4373/5433 [07:48<00:22, 46.12it/s]
 81%|████████  | 4379/5433 [07:49<00:30, 34.80it/s]
 81%|████████  | 4384/5433 [07:49<00:41, 25.51it/s]
 81%|████████  | 4389/5433 [07:49<00:35, 29.01it/s]
 81%|████████  | 4394/5433 [07:49<00:32, 32.45it/s]
 81%|████████  | 4399/5433 [07:49<00:29, 35.24it/s]
 81%|████████  | 4406/5433 [07:49<00:23, 42.83it/s]
 81%|████████  | 4412/5433 [07:49<00:25, 40.48it/s]
 81%|████████▏ | 4417/5433 [07:50<00:24, 40.93it/s]
 82%|████████▏ | 4430/5433 [07:50<00:16, 60.98it/s]
 82%|████████▏ | 4443/5433 [07:50<00:15, 61.98it/s]
 82%|████████▏ | 4455/5433 [07:50<00:13, 70.25it/s]
 82%|████████▏ | 4465/5433 [07:50<00:13, 72.58it/s]
 83%|████████▎ | 4485/5433 [07:50<00:11, 84.29it/s]
 83%|████████▎ | 4497/5433 [07:50<00:10, 91.33it/s]
 83%|████████▎ | 4515/5433 [07:51<00:08, 110.27it/s]
 84%|████████▎ | 4542/5433 [07:51<00:05, 149.40it/s]
 84%|████████▍ | 4559/5433 [07:51<00:07, 118.70it/s]
 84%|████████▍ | 4573/5433 [07:51<00:07, 116.23it/s]
 85%|████████▍ | 4591/5433 [07:51<00:06, 126.87it/s]
 85%|████████▍ | 4605/5433 [07:51<00:07, 107.04it/s]
 85%|████████▍ | 4617/5433 [07:51<00:07, 103.06it/s]
 85%|████████▌ | 4632/5433 [07:52<00:07, 113.42it/s]
 85%|████████▌ | 4645/5433 [07:52<00:09, 78.95it/s] 
 86%|████████▌ | 4655/5433 [07:52<00:10, 76.98it/s]
 86%|████████▌ | 4665/5433 [07:52<00:09, 78.13it/s]
 86%|████████▌ | 4679/5433 [07:52<00:08, 90.50it/s]
 86%|████████▋ | 4690/5433 [07:52<00:08, 87.07it/s]
 87%|████████▋ | 4700/5433 [07:52<00:09, 77.85it/s]
 87%|████████▋ | 4709/5433 [07:53<00:10, 69.70it/s]
 87%|████████▋ | 4724/5433 [07:53<00:08, 86.45it/s]
 87%|████████▋ | 4724/5433 [09:16<00:08, 86.45it/s]
 87%|████████▋ | 4734/5433 [09:16<25:34,  2.19s/it]
 87%|████████▋ | 4743/5433 [09:16<18:54,  1.64s/it]
 87%|████████▋ | 4753/5433 [09:16<13:22,  1.18s/it]
 88%|████████▊ | 4768/5433 [09:17<08:08,  1.36it/s]
 88%|████████▊ | 4780/5433 [09:17<05:36,  1.94it/s]
 88%|████████▊ | 4793/5433 [09:17<03:46,  2.83it/s]
 89%|████████▊ | 4811/5433 [09:17<02:16,  4.57it/s]
 89%|████████▉ | 4824/5433 [09:17<01:37,  6.23it/s]
 89%|████████▉ | 4836/5433 [09:17<01:11,  8.40it/s]
 89%|████████▉ | 4850/5433 [09:17<00:49, 11.90it/s]
 89%|████████▉ | 4862/5433 [09:17<00:37, 15.38it/s]
 90%|████████▉ | 4873/5433 [09:18<00:28, 19.39it/s]
 90%|████████▉ | 4883/5433 [09:18<00:24, 22.56it/s]
 90%|█████████ | 4891/5433 [09:18<00:21, 25.60it/s]
 90%|█████████ | 4904/5433 [09:18<00:15, 35.19it/s]
 91%|█████████ | 4919/5433 [09:18<00:10, 48.04it/s]
 91%|█████████ | 4929/5433 [09:18<00:09, 52.61it/s]
 91%|█████████ | 4939/5433 [09:18<00:08, 56.40it/s]
 91%|█████████ | 4948/5433 [09:19<00:08, 58.20it/s]
 91%|█████████▏| 4964/5433 [09:19<00:06, 75.75it/s]
 92%|█████████▏| 4974/5433 [09:19<00:05, 77.42it/s]
 92%|█████████▏| 4990/5433 [09:19<00:04, 94.91it/s]
 92%|█████████▏| 5002/5433 [09:19<00:04, 99.50it/s]
 92%|█████████▏| 5024/5433 [09:19<00:03, 125.32it/s]
 93%|█████████▎| 5038/5433 [09:19<00:03, 99.09it/s] 
 93%|█████████▎| 5050/5433 [09:20<00:04, 88.20it/s]
 93%|█████████▎| 5061/5433 [09:20<00:04, 82.13it/s]
 93%|█████████▎| 5072/5433 [09:20<00:04, 86.82it/s]
 94%|█████████▎| 5082/5433 [09:20<00:04, 78.50it/s]
 94%|█████████▍| 5095/5433 [09:20<00:03, 85.79it/s]
 94%|█████████▍| 5108/5433 [09:20<00:03, 96.00it/s]
 94%|█████████▍| 5119/5433 [09:20<00:03, 94.78it/s]
 95%|█████████▍| 5136/5433 [09:20<00:02, 113.20it/s]
 95%|█████████▍| 5155/5433 [09:21<00:02, 124.27it/s]
 95%|█████████▌| 5174/5433 [09:21<00:01, 140.42it/s]
 96%|█████████▌| 5190/5433 [09:21<00:01, 142.36it/s]
 96%|█████████▌| 5211/5433 [09:21<00:01, 155.86it/s]
 96%|█████████▌| 5227/5433 [09:21<00:01, 149.25it/s]
 97%|█████████▋| 5243/5433 [09:21<00:01, 102.98it/s]
 97%|█████████▋| 5256/5433 [09:21<00:01, 89.72it/s] 
 97%|█████████▋| 5267/5433 [09:22<00:02, 70.97it/s]
 97%|█████████▋| 5276/5433 [09:22<00:03, 48.00it/s]
 97%|█████████▋| 5283/5433 [09:22<00:03, 48.57it/s]
 97%|█████████▋| 5292/5433 [09:22<00:02, 52.51it/s]
 98%|█████████▊| 5299/5433 [09:23<00:03, 44.03it/s]
 98%|█████████▊| 5305/5433 [09:23<00:02, 45.83it/s]
 98%|█████████▊| 5312/5433 [09:23<00:02, 50.02it/s]
 98%|█████████▊| 5326/5433 [09:23<00:01, 61.98it/s]
 98%|█████████▊| 5345/5433 [09:23<00:01, 87.94it/s]
 99%|█████████▊| 5362/5433 [09:23<00:00, 106.40it/s]
 99%|█████████▉| 5375/5433 [09:23<00:00, 106.31it/s]
 99%|█████████▉| 5395/5433 [09:23<00:00, 128.68it/s]
100%|█████████▉| 5416/5433 [09:24<00:00, 143.68it/s]
100%|██████████| 5433/5433 [09:24<00:00,  9.63it/s] 
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-27 10:54:40.085 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-27 10:54:44.635 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-27 10:54:54.717 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-27 10:54:58.405 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-27 10:55:03.680 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-27 10:56:10.588 | INFO     | __main__:retrieve_proof:275 - 52515
2024-05-27 10:56:10.833 | INFO     | prover.proof_search:__init__:422 - Launching 5 workers with 1 GPUs.
2024-05-27 10:56:18,086	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8268 [39m[22m
2024-05-27 10:56:19.156 | INFO     | prover.proof_search:search_unordered:467 - before theorem search: 
(pid=3638749) [2024-05-27 10:56:24,170] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(pid=3638747)  [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
(pid=3638747)  [WARNING]  async_io: please install the libaio-dev package with apt
(pid=3638747)  [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
(pid=3638747)  [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
(pid=3638751)  [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
(pid=3638751)  [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
(GpuProver pid=3638748) Exception raised in creation task: The actor died because of an error raised in its creation task, ray::GpuProver.__init__() (pid=3638748, ip=131.215.143.185, actor_id=1aad8b5c59babd71fd3b0aea01000000, repr=<prover.proof_search.GpuProver object at 0x7f736c7c5cf0>)
(GpuProver pid=3638748)   File "/home/adarsh/ReProver/prover/proof_search.py", line 366, in __init__
(GpuProver pid=3638748)     tac_gen = RetrievalAugmentedGenerator.load(
(GpuProver pid=3638748)   File "/home/adarsh/ReProver/generator/model.py", line 131, in load
(GpuProver pid=3638748)     return load_checkpoint(cls, ckpt_path, device, freeze, config)
(GpuProver pid=3638748)   File "/home/adarsh/ReProver/common.py", line 465, in load_checkpoint
(GpuProver pid=3638748)     if not _is_deepspeed_checkpoint(ckpt_path):
(GpuProver pid=3638748)   File "/home/adarsh/ReProver/common.py", line 459, in _is_deepspeed_checkpoint
(GpuProver pid=3638748)     raise FileExistsError(f"Checkpoint {path} does not exist.")
(GpuProver pid=3638748) FileExistsError: Checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt does not exist.
2024-05-27 10:56:26.061 | ERROR    | prover.proof_search:search_unordered:476 - The actor died because of an error raised in its creation task, [36mray::GpuProver.__init__()[39m (pid=3638749, ip=131.215.143.185, actor_id=a1c0472afc3d1f2b670e23a601000000, repr=<prover.proof_search.GpuProver object at 0x7f5d65a41cf0>)
  File "/home/adarsh/ReProver/prover/proof_search.py", line 366, in __init__
    tac_gen = RetrievalAugmentedGenerator.load(
  File "/home/adarsh/ReProver/generator/model.py", line 131, in load
    return load_checkpoint(cls, ckpt_path, device, freeze, config)
  File "/home/adarsh/ReProver/common.py", line 465, in load_checkpoint
    if not _is_deepspeed_checkpoint(ckpt_path):
  File "/home/adarsh/ReProver/common.py", line 459, in _is_deepspeed_checkpoint
    raise FileExistsError(f"Checkpoint {path} does not exist.")
FileExistsError: Checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt does not exist.
(pid=3638748) [2024-05-27 10:56:24,085] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect) [repeated 4x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)
(pid=3638749)  [WARNING]  async_io requires the dev libaio .so object and headers but these were not found. [repeated 4x across cluster]
(pid=3638749)  [WARNING]  async_io: please install the libaio-dev package with apt [repeated 4x across cluster]
(pid=3638749)  [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found. [repeated 4x across cluster]
(pid=3638749)  [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH [repeated 4x across cluster]
(pid=3638749)  [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3 [repeated 4x across cluster]
(pid=3638749)  [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible [repeated 4x across cluster]
(GpuProver pid=3638747) Exception raised in creation task: The actor died because of an error raised in its creation task, ray::GpuProver.__init__() (pid=3638747, ip=131.215.143.185, actor_id=e8b89e7ebb5a426206921cea01000000, repr=<prover.proof_search.GpuProver object at 0x7f84b86f5cf0>) [repeated 4x across cluster]
(GpuProver pid=3638747)   File "/home/adarsh/ReProver/prover/proof_search.py", line 366, in __init__ [repeated 4x across cluster]
(GpuProver pid=3638747)     tac_gen = RetrievalAugmentedGenerator.load( [repeated 4x across cluster]
(GpuProver pid=3638747)   File "/home/adarsh/ReProver/generator/model.py", line 131, in load [repeated 4x across cluster]
(GpuProver pid=3638747)     return load_checkpoint(cls, ckpt_path, device, freeze, config) [repeated 4x across cluster]
(GpuProver pid=3638747)   File "/home/adarsh/ReProver/common.py", line 465, in load_checkpoint [repeated 4x across cluster]
(GpuProver pid=3638747)     if not _is_deepspeed_checkpoint(ckpt_path): [repeated 4x across cluster]
(GpuProver pid=3638747)   File "/home/adarsh/ReProver/common.py", line 459, in _is_deepspeed_checkpoint [repeated 4x across cluster]
(GpuProver pid=3638747)     raise FileExistsError(f"Checkpoint {path} does not exist.") [repeated 4x across cluster]
(GpuProver pid=3638747) FileExistsError: Checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt does not exist. [repeated 4x across cluster]





ATTEMPT 4





Script executed from: /home/adarsh/ReProver
[2024-05-27 12:35:06,492] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Found 1 repositories
Processing Adarsh321123/new-version-test
2024-05-27 12:35:17.929 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-27 12:35:17.930 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc1
2024-05-27 12:35:17.930 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-27 12:35:17.930 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 12:35:17.930 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 12:35:17.962 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-27 12:35:17.962 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54')
2024-05-27 12:35:17.963 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-version-test-279c3bc5c6d1e1b8810c99129d7d2c43c5469b54/new-version-test
2024-05-27 12:35:20,321	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8266 [39m[22m

  0%|          | 0/5433 [00:00<?, ?it/s]
  0%|          | 1/5433 [00:01<2:35:50,  1.72s/it]
  0%|          | 10/5433 [00:01<12:34,  7.19it/s] 
  1%|          | 38/5433 [00:01<02:42, 33.28it/s]
  1%|          | 53/5433 [00:02<03:19, 26.98it/s]
  1%|          | 63/5433 [00:03<04:55, 18.17it/s]
  1%|▏         | 70/5433 [00:04<05:51, 15.27it/s]
  1%|▏         | 75/5433 [00:05<08:04, 11.05it/s]
  1%|▏         | 81/5433 [00:06<09:43,  9.17it/s]
  2%|▏         | 102/5433 [00:06<04:42, 18.86it/s]
  2%|▏         | 120/5433 [00:06<03:01, 29.19it/s]
  3%|▎         | 140/5433 [00:06<02:01, 43.39it/s]
  3%|▎         | 154/5433 [00:08<03:30, 25.03it/s]
  3%|▎         | 164/5433 [00:08<03:02, 28.84it/s]
  3%|▎         | 173/5433 [00:09<06:00, 14.60it/s]
  3%|▎         | 180/5433 [00:10<05:22, 16.29it/s]
  3%|▎         | 186/5433 [00:10<04:45, 18.38it/s]
  4%|▎         | 191/5433 [00:12<10:10,  8.59it/s]
  4%|▎         | 199/5433 [00:12<07:30, 11.62it/s]
  4%|▍         | 204/5433 [00:12<06:22, 13.68it/s]
  4%|▍         | 210/5433 [00:12<05:10, 16.84it/s]
  4%|▍         | 215/5433 [00:14<13:24,  6.49it/s]
  4%|▍         | 224/5433 [00:14<08:38, 10.05it/s]
  4%|▍         | 232/5433 [00:15<06:09, 14.06it/s]
  4%|▍         | 238/5433 [00:15<05:07, 16.88it/s]
  5%|▍         | 249/5433 [00:15<03:22, 25.60it/s]
  5%|▍         | 258/5433 [00:15<02:36, 33.09it/s]
  5%|▍         | 266/5433 [00:15<02:19, 37.09it/s]
  5%|▌         | 273/5433 [00:19<13:13,  6.51it/s]
  5%|▌         | 278/5433 [00:19<10:56,  7.85it/s]
  5%|▌         | 283/5433 [00:19<08:49,  9.73it/s]
  5%|▌         | 288/5433 [00:19<07:32, 11.37it/s]
  5%|▌         | 294/5433 [00:19<05:47, 14.80it/s]
  6%|▌         | 300/5433 [00:19<04:29, 19.08it/s]
  6%|▌         | 305/5433 [00:23<18:36,  4.59it/s]
  6%|▌         | 311/5433 [00:23<13:16,  6.43it/s]
  6%|▌         | 316/5433 [00:23<10:14,  8.32it/s]
  6%|▌         | 321/5433 [00:23<08:17, 10.27it/s]
  6%|▌         | 327/5433 [00:23<06:09, 13.83it/s]
  6%|▌         | 332/5433 [00:23<04:55, 17.26it/s]
  6%|▌         | 337/5433 [00:23<04:18, 19.71it/s]
  6%|▋         | 343/5433 [00:24<03:29, 24.32it/s]
  6%|▋         | 348/5433 [00:28<22:36,  3.75it/s]
  6%|▋         | 353/5433 [00:28<16:50,  5.03it/s]
  7%|▋         | 359/5433 [00:28<11:47,  7.17it/s]
  7%|▋         | 364/5433 [00:28<09:25,  8.97it/s]
  7%|▋         | 371/5433 [00:28<06:31, 12.92it/s]
  7%|▋         | 378/5433 [00:29<04:56, 17.05it/s]
  7%|▋         | 384/5433 [00:29<03:59, 21.06it/s]
  7%|▋         | 392/5433 [00:29<02:59, 28.04it/s]
  7%|▋         | 401/5433 [00:29<02:17, 36.48it/s]
  8%|▊         | 411/5433 [00:29<01:47, 46.65it/s]
  8%|▊         | 418/5433 [00:35<20:32,  4.07it/s]
  8%|▊         | 423/5433 [00:35<16:35,  5.03it/s]
  8%|▊         | 430/5433 [00:35<12:07,  6.87it/s]
  8%|▊         | 436/5433 [00:35<09:18,  8.95it/s]
  8%|▊         | 443/5433 [00:36<06:48, 12.20it/s]
  8%|▊         | 450/5433 [00:36<05:09, 16.09it/s]
  8%|▊         | 456/5433 [00:36<04:15, 19.48it/s]
  9%|▊         | 464/5433 [00:36<03:24, 24.35it/s]
  9%|▊         | 469/5433 [00:36<03:06, 26.68it/s]
  9%|▉         | 476/5433 [00:36<02:31, 32.70it/s]
  9%|▉         | 482/5433 [00:36<02:31, 32.61it/s]
  9%|▉         | 488/5433 [00:36<02:13, 37.02it/s]
  9%|▉         | 493/5433 [00:37<02:17, 35.88it/s]
  9%|▉         | 498/5433 [00:44<33:45,  2.44it/s]
  9%|▉         | 502/5433 [00:44<26:33,  3.09it/s]
  9%|▉         | 508/5433 [00:44<18:13,  4.50it/s]
  9%|▉         | 513/5433 [00:44<13:39,  6.01it/s]
 10%|▉         | 517/5433 [00:45<11:43,  6.99it/s]
 10%|▉         | 520/5433 [00:45<10:06,  8.10it/s]
 10%|▉         | 524/5433 [00:45<07:58, 10.26it/s]
 10%|▉         | 528/5433 [00:45<06:48, 12.00it/s]
 10%|▉         | 531/5433 [00:45<06:06, 13.37it/s]
 10%|▉         | 536/5433 [00:45<04:32, 17.96it/s]
 10%|▉         | 541/5433 [00:45<03:38, 22.35it/s]
 10%|█         | 545/5433 [00:46<03:35, 22.64it/s]
 10%|█         | 550/5433 [00:54<50:08,  1.62it/s]
 10%|█         | 555/5433 [00:55<34:51,  2.33it/s]
 10%|█         | 559/5433 [00:55<26:26,  3.07it/s]
 10%|█         | 563/5433 [00:55<19:43,  4.12it/s]
 10%|█         | 570/5433 [00:55<12:19,  6.57it/s]
 11%|█         | 574/5433 [00:55<10:05,  8.02it/s]
 11%|█         | 579/5433 [00:55<07:32, 10.72it/s]
 11%|█         | 583/5433 [00:56<06:36, 12.24it/s]
 11%|█         | 588/5433 [00:56<05:06, 15.81it/s]
 11%|█         | 592/5433 [00:56<04:32, 17.73it/s]
 11%|█         | 596/5433 [00:56<04:05, 19.73it/s]
 11%|█         | 605/5433 [00:56<02:51, 28.22it/s]
 11%|█         | 609/5433 [00:56<02:44, 29.32it/s]
 11%|█▏        | 613/5433 [00:56<02:47, 28.82it/s]
 11%|█▏        | 618/5433 [00:57<02:29, 32.26it/s]
 12%|█▏        | 625/5433 [00:57<02:09, 37.23it/s]
 12%|█▏        | 633/5433 [00:57<01:46, 44.87it/s]
 12%|█▏        | 633/5433 [01:08<01:46, 44.87it/s]
 12%|█▏        | 637/5433 [01:08<48:06,  1.66it/s]
 12%|█▏        | 647/5433 [01:08<27:33,  2.89it/s]
 12%|█▏        | 659/5433 [01:08<16:04,  4.95it/s]
 12%|█▏        | 667/5433 [01:08<11:43,  6.77it/s]
 12%|█▏        | 678/5433 [01:08<07:46, 10.20it/s]
 13%|█▎        | 687/5433 [01:08<05:47, 13.66it/s]
 13%|█▎        | 695/5433 [01:08<04:47, 16.47it/s]
 13%|█▎        | 702/5433 [01:09<03:52, 20.32it/s]
 13%|█▎        | 709/5433 [01:09<03:19, 23.62it/s]
 13%|█▎        | 716/5433 [01:09<02:47, 28.18it/s]
 13%|█▎        | 722/5433 [01:09<02:51, 27.52it/s]
 13%|█▎        | 728/5433 [01:09<02:29, 31.38it/s]
 13%|█▎        | 733/5433 [01:09<02:24, 32.54it/s]
 14%|█▎        | 742/5433 [01:09<01:55, 40.54it/s]
 14%|█▍        | 748/5433 [01:10<02:19, 33.47it/s]
 14%|█▍        | 753/5433 [01:10<02:29, 31.30it/s]
 14%|█▍        | 759/5433 [01:10<02:15, 34.50it/s]
 14%|█▍        | 767/5433 [01:10<01:50, 42.04it/s]
 14%|█▍        | 772/5433 [01:10<01:54, 40.86it/s]
 14%|█▍        | 780/5433 [01:10<01:42, 45.37it/s]
 14%|█▍        | 785/5433 [01:11<01:49, 42.53it/s]
 14%|█▍        | 785/5433 [01:24<01:49, 42.53it/s]
 15%|█▍        | 788/5433 [01:24<1:01:25,  1.26it/s]
 15%|█▍        | 792/5433 [01:24<46:49,  1.65it/s]  
 15%|█▍        | 801/5433 [01:24<26:29,  2.91it/s]
 15%|█▍        | 807/5433 [01:24<19:01,  4.05it/s]
 15%|█▍        | 813/5433 [01:25<13:51,  5.56it/s]
 15%|█▌        | 822/5433 [01:25<08:48,  8.73it/s]
 15%|█▌        | 829/5433 [01:25<06:42, 11.42it/s]
 15%|█▌        | 835/5433 [01:25<05:23, 14.23it/s]
 15%|█▌        | 841/5433 [01:25<04:26, 17.25it/s]
 16%|█▌        | 848/5433 [01:25<03:26, 22.19it/s]
 16%|█▌        | 854/5433 [01:25<02:57, 25.74it/s]
 16%|█▌        | 859/5433 [01:26<02:42, 28.23it/s]
 16%|█▌        | 866/5433 [01:26<02:12, 34.52it/s]
 16%|█▌        | 872/5433 [01:26<02:01, 37.62it/s]
 16%|█▌        | 878/5433 [01:26<01:48, 42.09it/s]
 16%|█▋        | 885/5433 [01:26<01:36, 47.18it/s]
 16%|█▋        | 892/5433 [01:26<01:33, 48.56it/s]
 17%|█▋        | 899/5433 [01:26<01:33, 48.48it/s]
 17%|█▋        | 905/5433 [01:26<01:29, 50.46it/s]
 17%|█▋        | 911/5433 [01:27<01:29, 50.67it/s]
 17%|█▋        | 917/5433 [01:27<01:26, 52.49it/s]
 17%|█▋        | 926/5433 [01:27<01:21, 55.54it/s]
 17%|█▋        | 935/5433 [01:27<01:11, 62.53it/s]
 17%|█▋        | 947/5433 [01:27<00:58, 77.34it/s]
 18%|█▊        | 956/5433 [01:27<00:56, 79.84it/s]
 18%|█▊        | 965/5433 [01:27<01:11, 62.33it/s]
 18%|█▊        | 965/5433 [01:44<01:11, 62.33it/s]
 18%|█▊        | 969/5433 [01:44<51:11,  1.45it/s]
 18%|█▊        | 971/5433 [01:44<46:20,  1.60it/s]
 18%|█▊        | 977/5433 [01:44<32:30,  2.28it/s]
 18%|█▊        | 983/5433 [01:45<23:27,  3.16it/s]
 18%|█▊        | 988/5433 [01:45<17:43,  4.18it/s]
 18%|█▊        | 994/5433 [01:45<12:37,  5.86it/s]
 18%|█▊        | 999/5433 [01:45<09:58,  7.40it/s]
 18%|█▊        | 1003/5433 [01:45<08:21,  8.83it/s]
 19%|█▊        | 1008/5433 [01:45<06:18, 11.69it/s]
 19%|█▊        | 1014/5433 [01:45<04:36, 16.01it/s]
 19%|█▉        | 1019/5433 [01:46<04:30, 16.34it/s]
 19%|█▉        | 1025/5433 [01:46<03:28, 21.16it/s]
 19%|█▉        | 1030/5433 [01:46<03:25, 21.48it/s]
 19%|█▉        | 1035/5433 [01:46<02:52, 25.43it/s]
 19%|█▉        | 1039/5433 [01:46<02:56, 24.93it/s]
 19%|█▉        | 1043/5433 [01:47<03:12, 22.83it/s]
 19%|█▉        | 1049/5433 [01:47<02:49, 25.80it/s]
 19%|█▉        | 1055/5433 [01:47<02:17, 31.76it/s]
 19%|█▉        | 1059/5433 [01:47<02:41, 27.02it/s]
 20%|█▉        | 1063/5433 [01:47<02:28, 29.39it/s]
 20%|█▉        | 1072/5433 [01:47<01:55, 37.69it/s]
 20%|█▉        | 1079/5433 [01:47<01:50, 39.56it/s]
 20%|█▉        | 1084/5433 [01:48<02:01, 35.69it/s]
 20%|██        | 1093/5433 [01:48<01:38, 44.03it/s]
 20%|██        | 1104/5433 [01:48<01:19, 54.76it/s]
 20%|██        | 1110/5433 [01:48<01:24, 50.86it/s]
 21%|██        | 1116/5433 [01:48<01:22, 52.26it/s]
 21%|██        | 1116/5433 [02:09<01:22, 52.26it/s]
 21%|██        | 1121/5433 [02:09<1:10:25,  1.02it/s]
 21%|██        | 1122/5433 [02:09<1:06:44,  1.08it/s]
 21%|██        | 1135/5433 [02:09<31:07,  2.30it/s]  
 21%|██        | 1141/5433 [02:09<23:45,  3.01it/s]
 21%|██        | 1152/5433 [02:09<14:19,  4.98it/s]
 21%|██▏       | 1159/5433 [02:10<10:43,  6.64it/s]
 22%|██▏       | 1170/5433 [02:10<06:54, 10.29it/s]
 22%|██▏       | 1180/5433 [02:10<04:52, 14.55it/s]
 22%|██▏       | 1189/5433 [02:10<03:39, 19.29it/s]
 22%|██▏       | 1198/5433 [02:10<02:48, 25.19it/s]
 22%|██▏       | 1207/5433 [02:10<02:27, 28.74it/s]
 22%|██▏       | 1217/5433 [02:10<01:58, 35.50it/s]
 23%|██▎       | 1225/5433 [02:10<01:47, 39.05it/s]
 23%|██▎       | 1234/5433 [02:11<01:30, 46.60it/s]
 23%|██▎       | 1247/5433 [02:11<01:08, 60.73it/s]
 23%|██▎       | 1257/5433 [02:11<01:01, 68.12it/s]
 23%|██▎       | 1266/5433 [02:11<01:19, 52.15it/s]
 23%|██▎       | 1274/5433 [02:11<01:18, 52.81it/s]
 24%|██▎       | 1281/5433 [02:11<01:22, 50.48it/s]
 24%|██▍       | 1291/5433 [02:11<01:08, 60.39it/s]
 24%|██▍       | 1303/5433 [02:12<00:56, 73.22it/s]
 24%|██▍       | 1312/5433 [02:12<01:06, 62.03it/s]
 24%|██▍       | 1320/5433 [02:12<01:36, 42.65it/s]
 24%|██▍       | 1326/5433 [02:12<01:38, 41.65it/s]
 25%|██▍       | 1332/5433 [02:13<01:58, 34.59it/s]
 25%|██▍       | 1337/5433 [02:13<01:54, 35.75it/s]
 25%|██▍       | 1342/5433 [02:13<01:55, 35.50it/s]
 25%|██▍       | 1347/5433 [02:13<01:50, 37.09it/s]
 25%|██▍       | 1354/5433 [02:13<01:52, 36.41it/s]
 25%|██▍       | 1358/5433 [02:13<02:04, 32.71it/s]
 25%|██▌       | 1362/5433 [02:13<02:18, 29.33it/s]
 25%|██▌       | 1366/5433 [02:14<02:21, 28.66it/s]
 25%|██▌       | 1370/5433 [02:14<02:15, 29.90it/s]
 25%|██▌       | 1374/5433 [02:14<02:11, 30.77it/s]
 25%|██▌       | 1374/5433 [02:39<02:11, 30.77it/s]
 25%|██▌       | 1383/5433 [02:39<1:30:39,  1.34s/it]
 26%|██▌       | 1390/5433 [02:39<59:52,  1.13it/s]  
 26%|██▌       | 1397/5433 [02:39<40:28,  1.66it/s]
 26%|██▌       | 1402/5433 [02:40<30:38,  2.19it/s]
 26%|██▌       | 1409/5433 [02:40<20:41,  3.24it/s]
 26%|██▌       | 1415/5433 [02:40<15:13,  4.40it/s]
 26%|██▌       | 1422/5433 [02:40<10:49,  6.18it/s]
 26%|██▋       | 1427/5433 [02:40<08:28,  7.88it/s]
 26%|██▋       | 1436/5433 [02:40<05:30, 12.10it/s]
 27%|██▋       | 1442/5433 [02:40<04:35, 14.48it/s]
 27%|██▋       | 1447/5433 [02:41<03:51, 17.20it/s]
 27%|██▋       | 1452/5433 [02:41<03:20, 19.90it/s]
 27%|██▋       | 1457/5433 [02:41<03:11, 20.74it/s]
 27%|██▋       | 1462/5433 [02:41<02:51, 23.18it/s]
 27%|██▋       | 1467/5433 [02:41<02:29, 26.60it/s]
 27%|██▋       | 1471/5433 [02:41<02:22, 27.75it/s]
 27%|██▋       | 1475/5433 [02:42<02:23, 27.61it/s]
 27%|██▋       | 1479/5433 [02:42<02:21, 27.89it/s]
 27%|██▋       | 1484/5433 [02:42<02:04, 31.79it/s]
 27%|██▋       | 1490/5433 [02:42<01:47, 36.69it/s]
 28%|██▊       | 1499/5433 [02:42<01:32, 42.40it/s]
 28%|██▊       | 1504/5433 [02:42<01:31, 43.03it/s]
 28%|██▊       | 1510/5433 [02:42<01:24, 46.45it/s]
 28%|██▊       | 1515/5433 [02:42<01:35, 40.94it/s]
 28%|██▊       | 1521/5433 [02:43<01:28, 44.42it/s]
 28%|██▊       | 1526/5433 [02:43<01:28, 44.06it/s]
 28%|██▊       | 1534/5433 [02:43<01:17, 50.59it/s]
 28%|██▊       | 1540/5433 [02:43<01:44, 37.29it/s]
 28%|██▊       | 1547/5433 [02:43<01:34, 41.31it/s]
 29%|██▊       | 1552/5433 [02:43<01:36, 40.17it/s]
 29%|██▊       | 1557/5433 [02:43<01:49, 35.51it/s]
 29%|██▉       | 1562/5433 [02:44<01:41, 38.28it/s]
 29%|██▉       | 1567/5433 [02:44<01:42, 37.70it/s]
 29%|██▉       | 1571/5433 [02:44<01:43, 37.34it/s]
 29%|██▉       | 1579/5433 [02:44<01:23, 46.28it/s]
 29%|██▉       | 1584/5433 [02:44<01:22, 46.82it/s]
 29%|██▉       | 1590/5433 [02:44<01:20, 47.47it/s]
 29%|██▉       | 1595/5433 [02:44<01:28, 43.29it/s]
 30%|██▉       | 1603/5433 [02:44<01:14, 51.60it/s]
 30%|██▉       | 1609/5433 [02:45<01:25, 44.95it/s]
 30%|██▉       | 1614/5433 [02:45<01:25, 44.81it/s]
 30%|██▉       | 1619/5433 [02:45<01:23, 45.41it/s]
 30%|██▉       | 1624/5433 [02:45<01:39, 38.20it/s]
 30%|███       | 1632/5433 [02:45<01:19, 47.66it/s]
 30%|███       | 1638/5433 [02:45<01:19, 47.51it/s]
 30%|███       | 1644/5433 [02:45<01:15, 49.94it/s]
 30%|███       | 1653/5433 [02:45<01:04, 58.91it/s]
 30%|███       | 1653/5433 [03:16<01:04, 58.91it/s]
 31%|███       | 1660/5433 [03:16<1:24:37,  1.35s/it]
 31%|███       | 1667/5433 [03:17<59:23,  1.06it/s]  
 31%|███       | 1674/5433 [03:17<42:01,  1.49it/s]
 31%|███       | 1680/5433 [03:17<31:03,  2.01it/s]
 31%|███       | 1685/5433 [03:17<23:54,  2.61it/s]
 31%|███       | 1691/5433 [03:17<17:15,  3.61it/s]
 31%|███▏      | 1699/5433 [03:17<11:27,  5.43it/s]
 31%|███▏      | 1704/5433 [03:17<09:02,  6.87it/s]
 32%|███▏      | 1714/5433 [03:18<05:36, 11.05it/s]
 32%|███▏      | 1720/5433 [03:18<04:30, 13.71it/s]
 32%|███▏      | 1726/5433 [03:18<03:36, 17.15it/s]
 32%|███▏      | 1732/5433 [03:18<02:53, 21.30it/s]
 32%|███▏      | 1738/5433 [03:18<02:34, 23.84it/s]
 32%|███▏      | 1743/5433 [03:18<02:23, 25.76it/s]
 32%|███▏      | 1750/5433 [03:18<01:54, 32.30it/s]
 32%|███▏      | 1756/5433 [03:19<01:46, 34.51it/s]
 32%|███▏      | 1761/5433 [03:19<02:01, 30.32it/s]
 33%|███▎      | 1766/5433 [03:19<01:54, 31.91it/s]
 33%|███▎      | 1773/5433 [03:19<01:33, 39.02it/s]
 33%|███▎      | 1782/5433 [03:19<01:15, 48.54it/s]
 33%|███▎      | 1788/5433 [03:19<01:18, 46.39it/s]
 33%|███▎      | 1794/5433 [03:19<01:22, 44.34it/s]
 33%|███▎      | 1799/5433 [03:19<01:21, 44.45it/s]
 33%|███▎      | 1805/5433 [03:20<01:17, 46.72it/s]
 33%|███▎      | 1810/5433 [03:20<01:44, 34.55it/s]
 33%|███▎      | 1815/5433 [03:20<01:41, 35.53it/s]
 33%|███▎      | 1820/5433 [03:20<01:45, 34.10it/s]
 34%|███▎      | 1825/5433 [03:20<01:36, 37.49it/s]
 34%|███▎      | 1830/5433 [03:20<01:34, 38.19it/s]
 34%|███▍      | 1835/5433 [03:21<01:51, 32.38it/s]
 34%|███▍      | 1840/5433 [03:21<01:41, 35.56it/s]
 34%|███▍      | 1846/5433 [03:21<01:38, 36.46it/s]
 34%|███▍      | 1850/5433 [03:21<01:49, 32.85it/s]
 34%|███▍      | 1858/5433 [03:21<01:24, 42.53it/s]
 34%|███▍      | 1863/5433 [03:21<01:59, 29.87it/s]
 34%|███▍      | 1869/5433 [03:22<01:40, 35.33it/s]
 35%|███▍      | 1876/5433 [03:22<01:27, 40.55it/s]
 35%|███▍      | 1884/5433 [03:22<01:13, 48.55it/s]
 35%|███▍      | 1890/5433 [03:22<01:12, 48.94it/s]
 35%|███▍      | 1896/5433 [03:22<01:09, 50.97it/s]
 35%|███▌      | 1904/5433 [03:22<01:00, 58.27it/s]
 35%|███▌      | 1914/5433 [03:22<01:02, 56.21it/s]
 35%|███▌      | 1921/5433 [03:22<01:01, 57.05it/s]
 35%|███▌      | 1927/5433 [03:23<01:08, 51.25it/s]
 36%|███▌      | 1934/5433 [03:23<01:03, 55.37it/s]
 36%|███▌      | 1941/5433 [03:23<01:05, 52.95it/s]
 36%|███▌      | 1947/5433 [03:23<01:05, 52.94it/s]
 36%|███▌      | 1953/5433 [03:23<01:19, 43.92it/s]
 36%|███▌      | 1959/5433 [03:23<01:15, 46.15it/s]
 36%|███▌      | 1968/5433 [03:23<01:03, 54.67it/s]
 36%|███▋      | 1974/5433 [03:23<01:03, 54.21it/s]
 36%|███▋      | 1981/5433 [03:24<01:00, 56.89it/s]
 37%|███▋      | 1987/5433 [03:24<01:05, 52.52it/s]
 37%|███▋      | 1994/5433 [03:24<01:03, 54.52it/s]
 37%|███▋      | 2000/5433 [03:24<01:02, 55.23it/s]
 37%|███▋      | 2006/5433 [03:24<01:02, 55.04it/s]
 37%|███▋      | 2006/5433 [04:03<01:02, 55.04it/s]
 37%|███▋      | 2007/5433 [04:03<2:21:09,  2.47s/it]
 37%|███▋      | 2010/5433 [04:03<1:51:23,  1.95s/it]
 37%|███▋      | 2016/5433 [04:03<1:09:29,  1.22s/it]
 37%|███▋      | 2022/5433 [04:03<45:42,  1.24it/s]  
 37%|███▋      | 2027/5433 [04:03<32:40,  1.74it/s]
 37%|███▋      | 2033/5433 [04:04<22:00,  2.57it/s]
 38%|███▊      | 2038/5433 [04:04<16:15,  3.48it/s]
 38%|███▊      | 2043/5433 [04:04<11:54,  4.74it/s]
 38%|███▊      | 2048/5433 [04:04<08:47,  6.42it/s]
 38%|███▊      | 2053/5433 [04:04<06:52,  8.20it/s]
 38%|███▊      | 2057/5433 [04:04<06:09,  9.13it/s]
 38%|███▊      | 2062/5433 [04:05<04:37, 12.15it/s]
 38%|███▊      | 2068/5433 [04:05<03:41, 15.22it/s]
 38%|███▊      | 2072/5433 [04:05<03:38, 15.40it/s]
 38%|███▊      | 2077/5433 [04:05<02:56, 19.06it/s]
 38%|███▊      | 2081/5433 [04:05<02:40, 20.84it/s]
 38%|███▊      | 2088/5433 [04:05<01:56, 28.70it/s]
 39%|███▊      | 2095/5433 [04:05<01:32, 36.02it/s]
 39%|███▊      | 2103/5433 [04:06<01:20, 41.54it/s]
 39%|███▉      | 2110/5433 [04:06<01:12, 45.92it/s]
 39%|███▉      | 2116/5433 [04:06<01:14, 44.73it/s]
 39%|███▉      | 2125/5433 [04:06<01:07, 49.30it/s]
 39%|███▉      | 2131/5433 [04:06<01:07, 49.22it/s]
 39%|███▉      | 2137/5433 [04:06<01:15, 43.38it/s]
 40%|███▉      | 2148/5433 [04:06<00:56, 57.99it/s]
 40%|███▉      | 2156/5433 [04:07<00:52, 62.73it/s]
 40%|███▉      | 2169/5433 [04:07<00:40, 79.67it/s]
 40%|████      | 2184/5433 [04:07<00:36, 88.47it/s]
 40%|████      | 2197/5433 [04:07<00:32, 98.96it/s]
 41%|████      | 2216/5433 [04:07<00:26, 122.16it/s]
 41%|████      | 2230/5433 [04:07<00:26, 120.64it/s]
 41%|████▏     | 2246/5433 [04:07<00:25, 123.11it/s]
 42%|████▏     | 2259/5433 [04:07<00:25, 122.53it/s]
 42%|████▏     | 2272/5433 [04:07<00:28, 112.30it/s]
 42%|████▏     | 2286/5433 [04:08<00:27, 114.58it/s]
 42%|████▏     | 2305/5433 [04:08<00:24, 127.85it/s]
 43%|████▎     | 2319/5433 [04:08<00:24, 128.66it/s]
 43%|████▎     | 2337/5433 [04:08<00:23, 131.99it/s]
 43%|████▎     | 2351/5433 [04:08<00:24, 123.52it/s]
 44%|████▎     | 2364/5433 [04:08<00:26, 114.16it/s]
 44%|████▎     | 2376/5433 [04:08<00:31, 97.01it/s] 
 44%|████▍     | 2387/5433 [04:09<00:32, 95.09it/s]
 44%|████▍     | 2397/5433 [04:09<00:39, 76.43it/s]
 44%|████▍     | 2413/5433 [04:09<00:35, 85.79it/s]
 45%|████▍     | 2423/5433 [04:09<00:34, 87.76it/s]
 45%|████▍     | 2433/5433 [04:09<00:37, 79.81it/s]
 45%|████▍     | 2442/5433 [04:09<00:39, 74.83it/s]
 45%|████▌     | 2450/5433 [04:09<00:42, 70.21it/s]
 45%|████▌     | 2458/5433 [04:10<00:44, 67.36it/s]
 45%|████▌     | 2467/5433 [04:10<00:44, 67.05it/s]
 46%|████▌     | 2474/5433 [04:10<00:44, 66.95it/s]
 46%|████▌     | 2481/5433 [04:10<00:50, 58.54it/s]
 46%|████▌     | 2488/5433 [04:10<00:55, 53.51it/s]
 46%|████▌     | 2498/5433 [04:10<00:46, 62.51it/s]
 46%|████▌     | 2505/5433 [04:10<00:47, 62.21it/s]
 46%|████▌     | 2512/5433 [04:10<00:46, 62.21it/s]
 46%|████▋     | 2519/5433 [04:11<00:54, 53.28it/s]
 46%|████▋     | 2525/5433 [04:11<00:56, 51.34it/s]
 47%|████▋     | 2531/5433 [04:11<01:03, 45.60it/s]
 47%|████▋     | 2536/5433 [04:11<01:04, 44.67it/s]
 47%|████▋     | 2543/5433 [04:11<00:58, 49.38it/s]
 47%|████▋     | 2550/5433 [04:11<00:54, 53.01it/s]
 47%|████▋     | 2556/5433 [04:11<01:08, 42.06it/s]
 47%|████▋     | 2565/5433 [04:12<00:57, 49.60it/s]
 47%|████▋     | 2578/5433 [04:12<00:45, 62.77it/s]
 48%|████▊     | 2590/5433 [04:12<00:38, 74.17it/s]
 48%|████▊     | 2602/5433 [04:12<00:34, 81.70it/s]
 48%|████▊     | 2611/5433 [04:12<00:35, 79.18it/s]
 48%|████▊     | 2623/5433 [04:12<00:32, 87.23it/s]
 48%|████▊     | 2623/5433 [05:00<00:32, 87.23it/s]
 48%|████▊     | 2632/5433 [05:00<1:06:24,  1.42s/it]
 49%|████▊     | 2643/5433 [05:00<45:22,  1.02it/s]  
 49%|████▉     | 2652/5433 [05:00<33:14,  1.39it/s]
 49%|████▉     | 2663/5433 [05:00<22:38,  2.04it/s]
 49%|████▉     | 2672/5433 [05:01<16:34,  2.78it/s]
 49%|████▉     | 2684/5433 [05:01<11:00,  4.16it/s]
 50%|████▉     | 2693/5433 [05:01<08:24,  5.43it/s]
 50%|████▉     | 2701/5433 [05:01<06:32,  6.95it/s]
 50%|████▉     | 2708/5433 [05:01<05:07,  8.85it/s]
 50%|████▉     | 2715/5433 [05:01<04:05, 11.07it/s]
 50%|█████     | 2721/5433 [05:02<03:29, 12.94it/s]
 50%|█████     | 2726/5433 [05:02<02:55, 15.44it/s]
 50%|█████     | 2731/5433 [05:02<02:32, 17.76it/s]
 50%|█████     | 2738/5433 [05:02<02:02, 22.04it/s]
 50%|█████     | 2743/5433 [05:02<01:46, 25.32it/s]
 51%|█████     | 2748/5433 [05:02<01:40, 26.68it/s]
 51%|█████     | 2753/5433 [05:03<01:39, 26.89it/s]
 51%|█████     | 2757/5433 [05:03<01:35, 28.09it/s]
 51%|█████     | 2761/5433 [05:03<01:29, 29.91it/s]
 51%|█████     | 2767/5433 [05:03<01:16, 34.92it/s]
 51%|█████     | 2775/5433 [05:03<01:06, 40.09it/s]
 51%|█████     | 2780/5433 [05:03<01:29, 29.65it/s]
 51%|█████     | 2784/5433 [05:03<01:27, 30.12it/s]
 51%|█████▏    | 2791/5433 [05:04<01:10, 37.59it/s]
 51%|█████▏    | 2796/5433 [05:04<01:11, 36.98it/s]
 52%|█████▏    | 2803/5433 [05:04<01:01, 43.03it/s]
 52%|█████▏    | 2808/5433 [05:04<01:03, 41.02it/s]
 52%|█████▏    | 2815/5433 [05:04<00:57, 45.32it/s]
 52%|█████▏    | 2822/5433 [05:04<00:51, 50.97it/s]
 52%|█████▏    | 2832/5433 [05:04<00:42, 60.96it/s]
 52%|█████▏    | 2839/5433 [05:04<00:43, 60.09it/s]
 52%|█████▏    | 2846/5433 [05:05<00:50, 50.88it/s]
 52%|█████▏    | 2852/5433 [05:05<01:00, 42.45it/s]
 53%|█████▎    | 2857/5433 [05:05<01:02, 41.43it/s]
 53%|█████▎    | 2862/5433 [05:05<01:00, 42.69it/s]
 53%|█████▎    | 2868/5433 [05:05<00:54, 46.65it/s]
 53%|█████▎    | 2873/5433 [05:05<00:56, 45.05it/s]
 53%|█████▎    | 2881/5433 [05:05<00:49, 51.84it/s]
 53%|█████▎    | 2887/5433 [05:06<01:03, 39.82it/s]
 53%|█████▎    | 2892/5433 [05:06<01:07, 37.39it/s]
 53%|█████▎    | 2897/5433 [05:06<01:10, 36.06it/s]
 53%|█████▎    | 2904/5433 [05:06<01:04, 39.00it/s]
 54%|█████▎    | 2910/5433 [05:06<00:58, 43.43it/s]
 54%|█████▎    | 2915/5433 [05:06<00:59, 42.02it/s]
 54%|█████▍    | 2921/5433 [05:06<00:57, 43.41it/s]
 54%|█████▍    | 2926/5433 [05:07<01:02, 39.91it/s]
 54%|█████▍    | 2934/5433 [05:07<00:57, 43.14it/s]
 54%|█████▍    | 2943/5433 [05:07<00:46, 53.61it/s]
 54%|█████▍    | 2949/5433 [05:07<00:48, 51.52it/s]
 54%|█████▍    | 2956/5433 [05:07<00:45, 53.90it/s]
 55%|█████▍    | 2963/5433 [05:07<00:43, 56.78it/s]
 55%|█████▍    | 2970/5433 [05:07<00:43, 56.65it/s]
 55%|█████▍    | 2983/5433 [05:07<00:35, 68.89it/s]
 55%|█████▌    | 2990/5433 [05:08<00:35, 68.68it/s]
 55%|█████▌    | 2998/5433 [05:08<00:34, 70.22it/s]
 55%|█████▌    | 3006/5433 [05:08<00:35, 67.61it/s]
 55%|█████▌    | 3013/5433 [05:08<00:42, 57.31it/s]
 56%|█████▌    | 3026/5433 [05:08<00:32, 74.47it/s]
 56%|█████▌    | 3035/5433 [05:08<00:36, 65.00it/s]
 56%|█████▌    | 3043/5433 [05:08<00:38, 62.60it/s]
 56%|█████▌    | 3050/5433 [05:09<00:37, 62.85it/s]
 56%|█████▋    | 3057/5433 [05:09<00:38, 61.40it/s]
 56%|█████▋    | 3064/5433 [05:09<00:43, 54.47it/s]
 57%|█████▋    | 3071/5433 [05:09<00:41, 57.34it/s]
 57%|█████▋    | 3077/5433 [05:09<00:49, 47.18it/s]
 57%|█████▋    | 3083/5433 [05:09<00:47, 49.68it/s]
 57%|█████▋    | 3089/5433 [05:09<00:53, 44.15it/s]
 57%|█████▋    | 3098/5433 [05:10<00:42, 54.45it/s]
 57%|█████▋    | 3108/5433 [05:10<00:37, 62.79it/s]
 57%|█████▋    | 3116/5433 [05:10<00:34, 66.38it/s]
 58%|█████▊    | 3124/5433 [05:10<00:40, 56.99it/s]
 58%|█████▊    | 3131/5433 [05:10<00:43, 52.61it/s]
 58%|█████▊    | 3137/5433 [05:10<00:46, 49.64it/s]
 58%|█████▊    | 3143/5433 [05:10<00:45, 50.85it/s]
 58%|█████▊    | 3149/5433 [05:10<00:48, 47.07it/s]
 58%|█████▊    | 3154/5433 [05:11<00:56, 40.05it/s]
 58%|█████▊    | 3160/5433 [05:11<00:52, 43.42it/s]
 58%|█████▊    | 3165/5433 [05:11<00:56, 40.13it/s]
 58%|█████▊    | 3170/5433 [05:11<00:55, 40.93it/s]
 58%|█████▊    | 3170/5433 [06:09<00:55, 40.93it/s]
 58%|█████▊    | 3174/5433 [06:09<2:09:11,  3.43s/it]
 59%|█████▊    | 3180/5433 [06:09<1:25:43,  2.28s/it]
 59%|█████▊    | 3185/5433 [06:09<1:01:17,  1.64s/it]
 59%|█████▊    | 3191/5433 [06:09<41:13,  1.10s/it]  
 59%|█████▉    | 3199/5433 [06:09<25:33,  1.46it/s]
 59%|█████▉    | 3205/5433 [06:09<18:28,  2.01it/s]
 59%|█████▉    | 3211/5433 [06:10<13:12,  2.80it/s]
 59%|█████▉    | 3216/5433 [06:10<10:07,  3.65it/s]
 59%|█████▉    | 3224/5433 [06:10<06:35,  5.59it/s]
 60%|█████▉    | 3233/5433 [06:10<04:16,  8.59it/s]
 60%|█████▉    | 3241/5433 [06:10<03:02, 12.04it/s]
 60%|█████▉    | 3248/5433 [06:10<02:20, 15.52it/s]
 60%|█████▉    | 3255/5433 [06:11<02:04, 17.50it/s]
 60%|██████    | 3262/5433 [06:11<01:37, 22.38it/s]
 60%|██████    | 3268/5433 [06:11<01:21, 26.65it/s]
 60%|██████    | 3276/5433 [06:11<01:03, 34.00it/s]
 60%|██████    | 3284/5433 [06:11<00:54, 39.77it/s]
 61%|██████    | 3291/5433 [06:11<00:50, 42.21it/s]
 61%|██████    | 3302/5433 [06:11<00:38, 55.38it/s]
 61%|██████    | 3310/5433 [06:11<00:35, 59.82it/s]
 61%|██████    | 3318/5433 [06:11<00:33, 62.85it/s]
 61%|██████▏   | 3329/5433 [06:12<00:29, 72.01it/s]
 61%|██████▏   | 3341/5433 [06:12<00:25, 83.34it/s]
 62%|██████▏   | 3352/5433 [06:12<00:24, 84.73it/s]
 62%|██████▏   | 3361/5433 [06:12<00:24, 83.27it/s]
 62%|██████▏   | 3370/5433 [06:12<00:26, 76.73it/s]
 62%|██████▏   | 3378/5433 [06:12<00:28, 71.11it/s]
 62%|██████▏   | 3386/5433 [06:12<00:28, 70.79it/s]
 62%|██████▏   | 3394/5433 [06:12<00:28, 72.15it/s]
 63%|██████▎   | 3404/5433 [06:12<00:26, 77.79it/s]
 63%|██████▎   | 3413/5433 [06:13<00:25, 79.58it/s]
 63%|██████▎   | 3424/5433 [06:13<00:24, 82.81it/s]
 63%|██████▎   | 3435/5433 [06:13<00:22, 89.80it/s]
 63%|██████▎   | 3445/5433 [06:13<00:26, 74.51it/s]
 64%|██████▎   | 3453/5433 [06:13<00:29, 67.92it/s]
 64%|██████▎   | 3461/5433 [06:13<00:32, 61.32it/s]
 64%|██████▍   | 3469/5433 [06:13<00:29, 65.49it/s]
 64%|██████▍   | 3477/5433 [06:14<00:28, 67.79it/s]
 64%|██████▍   | 3485/5433 [06:14<00:35, 55.58it/s]
 64%|██████▍   | 3492/5433 [06:14<00:40, 48.47it/s]
 64%|██████▍   | 3498/5433 [06:14<00:48, 40.05it/s]
 64%|██████▍   | 3503/5433 [06:14<00:54, 35.16it/s]
 65%|██████▍   | 3511/5433 [06:14<00:44, 43.07it/s]
 65%|██████▍   | 3517/5433 [06:15<00:45, 42.07it/s]
 65%|██████▍   | 3522/5433 [06:15<00:50, 37.68it/s]
 65%|██████▍   | 3528/5433 [06:15<00:49, 38.77it/s]
 65%|██████▌   | 3535/5433 [06:15<00:41, 45.23it/s]
 65%|██████▌   | 3541/5433 [06:15<00:39, 47.33it/s]
 65%|██████▌   | 3547/5433 [06:15<00:37, 49.74it/s]
 65%|██████▌   | 3558/5433 [06:15<00:29, 63.99it/s]
 66%|██████▌   | 3565/5433 [06:16<00:48, 38.30it/s]
 66%|██████▌   | 3573/5433 [06:16<00:40, 45.73it/s]
 66%|██████▌   | 3583/5433 [06:16<00:33, 55.53it/s]
 66%|██████▌   | 3590/5433 [06:16<00:32, 57.44it/s]
 66%|██████▌   | 3597/5433 [06:16<00:32, 56.06it/s]
 66%|██████▋   | 3607/5433 [06:16<00:29, 62.05it/s]
 67%|██████▋   | 3614/5433 [06:17<00:34, 52.19it/s]
 67%|██████▋   | 3620/5433 [06:17<00:34, 52.71it/s]
 67%|██████▋   | 3626/5433 [06:17<00:38, 46.35it/s]
 67%|██████▋   | 3632/5433 [06:17<00:38, 47.32it/s]
 67%|██████▋   | 3638/5433 [06:17<00:36, 49.38it/s]
 67%|██████▋   | 3645/5433 [06:17<00:35, 50.69it/s]
 67%|██████▋   | 3651/5433 [06:17<00:37, 47.07it/s]
 67%|██████▋   | 3656/5433 [06:17<00:42, 41.72it/s]
 67%|██████▋   | 3661/5433 [06:18<00:40, 43.59it/s]
 67%|██████▋   | 3666/5433 [06:18<00:39, 44.97it/s]
 68%|██████▊   | 3672/5433 [06:18<00:37, 46.89it/s]
 68%|██████▊   | 3677/5433 [06:18<00:42, 41.69it/s]
 68%|██████▊   | 3682/5433 [06:18<00:50, 34.78it/s]
 68%|██████▊   | 3687/5433 [06:18<00:46, 37.51it/s]
 68%|██████▊   | 3692/5433 [06:18<00:48, 36.08it/s]
 68%|██████▊   | 3697/5433 [06:19<00:46, 37.03it/s]
 68%|██████▊   | 3704/5433 [06:19<00:39, 43.76it/s]
 68%|██████▊   | 3709/5433 [06:19<00:53, 31.97it/s]
 68%|██████▊   | 3713/5433 [06:19<01:00, 28.23it/s]
 68%|██████▊   | 3717/5433 [06:19<01:02, 27.42it/s]
 68%|██████▊   | 3721/5433 [06:19<01:05, 26.10it/s]
 69%|██████▊   | 3724/5433 [06:20<01:16, 22.30it/s]
 69%|██████▊   | 3727/5433 [06:20<01:25, 19.97it/s]
 69%|██████▊   | 3730/5433 [06:20<01:23, 20.38it/s]
 69%|██████▊   | 3734/5433 [06:20<01:11, 23.93it/s]
 69%|██████▉   | 3739/5433 [06:20<00:58, 28.94it/s]
 69%|██████▉   | 3743/5433 [06:20<00:55, 30.47it/s]
 69%|██████▉   | 3747/5433 [06:20<00:55, 30.47it/s]
 69%|██████▉   | 3751/5433 [06:21<00:55, 30.24it/s]
 69%|██████▉   | 3755/5433 [06:21<01:01, 27.09it/s]
 69%|██████▉   | 3759/5433 [06:21<01:01, 27.41it/s]
 69%|██████▉   | 3763/5433 [06:21<01:07, 24.56it/s]
 69%|██████▉   | 3768/5433 [06:21<00:55, 29.76it/s]
 69%|██████▉   | 3772/5433 [06:21<01:08, 24.27it/s]
 70%|██████▉   | 3776/5433 [06:22<01:10, 23.34it/s]
 70%|██████▉   | 3780/5433 [06:22<01:03, 26.01it/s]
 70%|██████▉   | 3783/5433 [06:22<01:10, 23.35it/s]
 70%|██████▉   | 3786/5433 [06:22<01:11, 22.97it/s]
 70%|██████▉   | 3792/5433 [06:22<00:54, 30.06it/s]
 70%|██████▉   | 3797/5433 [06:22<00:49, 33.35it/s]
 70%|██████▉   | 3801/5433 [06:22<00:48, 33.51it/s]
 70%|███████   | 3805/5433 [06:23<00:52, 31.12it/s]
 70%|███████   | 3809/5433 [06:23<00:54, 29.92it/s]
 70%|███████   | 3815/5433 [06:23<00:46, 34.69it/s]
 70%|███████   | 3815/5433 [07:34<00:46, 34.69it/s]
 70%|███████   | 3816/5433 [07:34<2:39:51,  5.93s/it]
 70%|███████   | 3817/5433 [07:34<2:23:06,  5.31s/it]
 70%|███████   | 3820/5433 [07:34<1:38:54,  3.68s/it]
 70%|███████   | 3823/5433 [07:34<1:08:43,  2.56s/it]
 70%|███████   | 3826/5433 [07:34<47:57,  1.79s/it]  
 70%|███████   | 3829/5433 [07:35<33:51,  1.27s/it]
 71%|███████   | 3831/5433 [07:35<26:47,  1.00s/it]
 71%|███████   | 3833/5433 [07:35<20:41,  1.29it/s]
 71%|███████   | 3840/5433 [07:35<09:34,  2.77it/s]
 71%|███████   | 3843/5433 [07:35<07:23,  3.59it/s]
 71%|███████   | 3847/5433 [07:35<05:13,  5.05it/s]
 71%|███████   | 3853/5433 [07:35<03:17,  8.01it/s]
 71%|███████   | 3859/5433 [07:36<02:18, 11.40it/s]
 71%|███████   | 3863/5433 [07:36<01:54, 13.67it/s]
 71%|███████   | 3868/5433 [07:36<01:35, 16.46it/s]
 71%|███████▏  | 3874/5433 [07:36<01:11, 21.84it/s]
 71%|███████▏  | 3879/5433 [07:36<01:02, 24.97it/s]
 72%|███████▏  | 3885/5433 [07:36<00:50, 30.52it/s]
 72%|███████▏  | 3892/5433 [07:36<00:40, 38.02it/s]
 72%|███████▏  | 3901/5433 [07:36<00:31, 48.98it/s]
 72%|███████▏  | 3909/5433 [07:37<00:27, 55.53it/s]
 72%|███████▏  | 3916/5433 [07:37<00:29, 52.07it/s]
 72%|███████▏  | 3922/5433 [07:37<00:30, 49.08it/s]
 72%|███████▏  | 3930/5433 [07:37<00:26, 56.27it/s]
 72%|███████▏  | 3938/5433 [07:37<00:29, 51.51it/s]
 73%|███████▎  | 3947/5433 [07:37<00:25, 57.99it/s]
 73%|███████▎  | 3954/5433 [07:37<00:27, 54.18it/s]
 73%|███████▎  | 3961/5433 [07:38<00:27, 54.42it/s]
 73%|███████▎  | 3967/5433 [07:38<00:27, 52.64it/s]
 73%|███████▎  | 3973/5433 [07:38<00:27, 53.52it/s]
 73%|███████▎  | 3979/5433 [07:38<00:29, 49.74it/s]
 73%|███████▎  | 3985/5433 [07:38<00:31, 45.52it/s]
 73%|███████▎  | 3990/5433 [07:38<00:41, 34.73it/s]
 74%|███████▎  | 3995/5433 [07:38<00:38, 37.64it/s]
 74%|███████▎  | 4004/5433 [07:39<00:31, 46.01it/s]
 74%|███████▍  | 4009/5433 [07:39<00:31, 44.99it/s]
 74%|███████▍  | 4014/5433 [07:39<00:32, 43.26it/s]
 74%|███████▍  | 4019/5433 [07:39<00:37, 38.01it/s]
 74%|███████▍  | 4024/5433 [07:39<00:37, 37.43it/s]
 74%|███████▍  | 4028/5433 [07:39<00:37, 37.21it/s]
 74%|███████▍  | 4033/5433 [07:39<00:35, 39.40it/s]
 74%|███████▍  | 4038/5433 [07:39<00:35, 39.44it/s]
 74%|███████▍  | 4046/5433 [07:40<00:28, 48.45it/s]
 75%|███████▍  | 4051/5433 [07:40<00:28, 48.05it/s]
 75%|███████▍  | 4056/5433 [07:40<00:32, 42.45it/s]
 75%|███████▍  | 4061/5433 [07:40<00:31, 42.97it/s]
 75%|███████▍  | 4066/5433 [07:40<00:31, 43.96it/s]
 75%|███████▍  | 4071/5433 [07:40<00:32, 41.59it/s]
 75%|███████▌  | 4077/5433 [07:40<00:29, 46.29it/s]
 75%|███████▌  | 4083/5433 [07:40<00:27, 49.47it/s]
 75%|███████▌  | 4091/5433 [07:41<00:24, 55.14it/s]
 75%|███████▌  | 4098/5433 [07:41<00:23, 57.69it/s]
 76%|███████▌  | 4104/5433 [07:41<00:27, 48.60it/s]
 76%|███████▌  | 4114/5433 [07:41<00:23, 57.13it/s]
 76%|███████▌  | 4121/5433 [07:41<00:23, 55.89it/s]
 76%|███████▌  | 4134/5433 [07:41<00:18, 71.59it/s]
 76%|███████▌  | 4142/5433 [07:41<00:17, 72.12it/s]
 76%|███████▋  | 4150/5433 [07:41<00:20, 63.21it/s]
 77%|███████▋  | 4160/5433 [07:42<00:17, 71.80it/s]
 77%|███████▋  | 4168/5433 [07:42<00:17, 73.76it/s]
 77%|███████▋  | 4176/5433 [07:42<00:17, 71.27it/s]
 77%|███████▋  | 4184/5433 [07:42<00:19, 63.20it/s]
 77%|███████▋  | 4196/5433 [07:42<00:16, 74.12it/s]
 77%|███████▋  | 4204/5433 [07:42<00:19, 64.54it/s]
 78%|███████▊  | 4211/5433 [07:42<00:23, 52.02it/s]
 78%|███████▊  | 4217/5433 [07:43<00:24, 48.78it/s]
 78%|███████▊  | 4223/5433 [07:43<00:28, 42.57it/s]
 78%|███████▊  | 4232/5433 [07:43<00:23, 50.75it/s]
 78%|███████▊  | 4238/5433 [07:43<00:23, 50.56it/s]
 78%|███████▊  | 4244/5433 [07:43<00:30, 38.37it/s]
 78%|███████▊  | 4249/5433 [07:43<00:32, 36.31it/s]
 78%|███████▊  | 4254/5433 [07:44<00:36, 32.59it/s]
 78%|███████▊  | 4258/5433 [07:44<00:35, 33.07it/s]
 78%|███████▊  | 4262/5433 [07:44<00:36, 32.15it/s]
 79%|███████▊  | 4268/5433 [07:44<00:31, 36.82it/s]
 79%|███████▊  | 4273/5433 [07:44<00:30, 37.99it/s]
 79%|███████▉  | 4281/5433 [07:44<00:24, 47.47it/s]
 79%|███████▉  | 4288/5433 [07:44<00:22, 51.89it/s]
 79%|███████▉  | 4294/5433 [07:44<00:23, 48.63it/s]
 79%|███████▉  | 4301/5433 [07:45<00:22, 50.32it/s]
 79%|███████▉  | 4307/5433 [07:45<00:24, 46.91it/s]
 79%|███████▉  | 4312/5433 [07:45<00:24, 45.65it/s]
 79%|███████▉  | 4317/5433 [07:45<00:27, 40.69it/s]
 80%|███████▉  | 4322/5433 [07:45<00:34, 32.06it/s]
 80%|███████▉  | 4326/5433 [07:45<00:34, 31.85it/s]
 80%|███████▉  | 4333/5433 [07:46<00:27, 39.75it/s]
 80%|███████▉  | 4340/5433 [07:46<00:27, 40.04it/s]
 80%|███████▉  | 4345/5433 [07:46<00:28, 38.46it/s]
 80%|████████  | 4350/5433 [07:46<00:28, 38.17it/s]
 80%|████████  | 4354/5433 [07:46<00:32, 33.10it/s]
 80%|████████  | 4362/5433 [07:46<00:25, 41.65it/s]
 80%|████████  | 4368/5433 [07:46<00:23, 44.86it/s]
 80%|████████  | 4373/5433 [07:47<00:32, 32.71it/s]
 81%|████████  | 4380/5433 [07:47<00:26, 39.30it/s]
 81%|████████  | 4387/5433 [07:47<00:23, 44.46it/s]
 81%|████████  | 4393/5433 [07:47<00:24, 42.62it/s]
 81%|████████  | 4399/5433 [07:47<00:22, 46.30it/s]
 81%|████████  | 4405/5433 [07:47<00:24, 41.36it/s]
 81%|████████  | 4410/5433 [07:48<00:30, 33.42it/s]
 81%|████████▏ | 4416/5433 [07:48<00:34, 29.27it/s]
 82%|████████▏ | 4434/5433 [07:48<00:18, 55.26it/s]
 82%|████████▏ | 4450/5433 [07:48<00:13, 75.49it/s]
 82%|████████▏ | 4463/5433 [07:48<00:11, 85.96it/s]
 82%|████████▏ | 4478/5433 [07:48<00:09, 100.61it/s]
 83%|████████▎ | 4490/5433 [07:48<00:09, 101.67it/s]
 83%|████████▎ | 4507/5433 [07:48<00:08, 114.35it/s]
 83%|████████▎ | 4520/5433 [07:49<00:07, 116.48it/s]
 83%|████████▎ | 4533/5433 [07:49<00:09, 95.85it/s] 
 84%|████████▍ | 4560/5433 [07:49<00:06, 134.26it/s]
 84%|████████▍ | 4577/5433 [07:49<00:05, 143.05it/s]
 85%|████████▍ | 4593/5433 [07:49<00:06, 121.32it/s]
 85%|████████▍ | 4607/5433 [07:49<00:07, 111.23it/s]
 85%|████████▌ | 4620/5433 [07:49<00:07, 108.31it/s]
 85%|████████▌ | 4632/5433 [07:50<00:07, 102.89it/s]
 85%|████████▌ | 4645/5433 [07:50<00:07, 107.97it/s]
 86%|████████▌ | 4659/5433 [07:50<00:06, 115.32it/s]
 86%|████████▌ | 4671/5433 [07:50<00:07, 102.88it/s]
 86%|████████▌ | 4682/5433 [07:50<00:07, 103.12it/s]
 86%|████████▋ | 4693/5433 [07:50<00:07, 97.34it/s] 
 86%|████████▋ | 4693/5433 [09:19<00:07, 97.34it/s]
 86%|████████▋ | 4699/5433 [09:19<31:37,  2.59s/it]
 87%|████████▋ | 4708/5433 [09:19<22:46,  1.88s/it]
 87%|████████▋ | 4718/5433 [09:19<15:43,  1.32s/it]
 87%|████████▋ | 4727/5433 [09:19<11:15,  1.05it/s]
 87%|████████▋ | 4736/5433 [09:19<07:58,  1.46it/s]
 87%|████████▋ | 4746/5433 [09:19<05:27,  2.10it/s]
 88%|████████▊ | 4757/5433 [09:19<03:38,  3.10it/s]
 88%|████████▊ | 4771/5433 [09:19<02:15,  4.88it/s]
 88%|████████▊ | 4782/5433 [09:20<01:35,  6.80it/s]
 88%|████████▊ | 4794/5433 [09:20<01:05,  9.68it/s]
 88%|████████▊ | 4806/5433 [09:20<00:46, 13.55it/s]
 89%|████████▊ | 4818/5433 [09:20<00:33, 18.42it/s]
 89%|████████▉ | 4829/5433 [09:20<00:25, 24.13it/s]
 89%|████████▉ | 4840/5433 [09:20<00:20, 28.31it/s]
 89%|████████▉ | 4849/5433 [09:20<00:17, 34.26it/s]
 89%|████████▉ | 4859/5433 [09:20<00:14, 39.48it/s]
 90%|████████▉ | 4868/5433 [09:21<00:13, 42.81it/s]
 90%|████████▉ | 4877/5433 [09:21<00:11, 48.91it/s]
 90%|████████▉ | 4885/5433 [09:21<00:10, 52.37it/s]
 90%|█████████ | 4899/5433 [09:21<00:07, 67.11it/s]
 90%|█████████ | 4910/5433 [09:21<00:07, 72.87it/s]
 91%|█████████ | 4919/5433 [09:21<00:07, 68.45it/s]
 91%|█████████ | 4932/5433 [09:21<00:06, 81.39it/s]
 91%|█████████ | 4945/5433 [09:21<00:05, 92.94it/s]
 91%|█████████ | 4956/5433 [09:22<00:05, 94.58it/s]
 91%|█████████▏| 4967/5433 [09:22<00:04, 94.21it/s]
 92%|█████████▏| 4977/5433 [09:22<00:04, 92.83it/s]
 92%|█████████▏| 4990/5433 [09:22<00:04, 102.68it/s]
 92%|█████████▏| 5001/5433 [09:22<00:04, 88.89it/s] 
 92%|█████████▏| 5011/5433 [09:22<00:05, 79.28it/s]
 92%|█████████▏| 5024/5433 [09:22<00:04, 86.65it/s]
 93%|█████████▎| 5034/5433 [09:23<00:04, 80.87it/s]
 93%|█████████▎| 5043/5433 [09:23<00:04, 81.44it/s]
 93%|█████████▎| 5052/5433 [09:23<00:04, 82.33it/s]
 93%|█████████▎| 5061/5433 [09:23<00:05, 74.07it/s]
 93%|█████████▎| 5069/5433 [09:23<00:04, 73.54it/s]
 94%|█████████▎| 5084/5433 [09:23<00:03, 90.31it/s]
 94%|█████████▍| 5102/5433 [09:23<00:02, 113.03it/s]
 94%|█████████▍| 5114/5433 [09:23<00:02, 113.41it/s]
 94%|█████████▍| 5126/5433 [09:23<00:02, 114.47it/s]
 95%|█████████▍| 5146/5433 [09:24<00:02, 131.35it/s]
 95%|█████████▌| 5162/5433 [09:24<00:01, 138.29it/s]
 95%|█████████▌| 5177/5433 [09:24<00:01, 140.57it/s]
 96%|█████████▌| 5192/5433 [09:24<00:02, 110.29it/s]
 96%|█████████▌| 5206/5433 [09:24<00:01, 115.32it/s]
 96%|█████████▌| 5219/5433 [09:24<00:02, 79.08it/s] 
 96%|█████████▋| 5230/5433 [09:25<00:02, 77.22it/s]
 96%|█████████▋| 5240/5433 [09:25<00:02, 66.45it/s]
 97%|█████████▋| 5248/5433 [09:25<00:03, 46.78it/s]
 97%|█████████▋| 5255/5433 [09:25<00:03, 46.57it/s]
 97%|█████████▋| 5266/5433 [09:25<00:03, 51.11it/s]
 97%|█████████▋| 5275/5433 [09:26<00:02, 53.68it/s]
 97%|█████████▋| 5281/5433 [09:26<00:03, 48.82it/s]
 97%|█████████▋| 5287/5433 [09:26<00:02, 49.49it/s]
 97%|█████████▋| 5295/5433 [09:26<00:02, 51.13it/s]
 98%|█████████▊| 5310/5433 [09:26<00:01, 71.85it/s]
 98%|█████████▊| 5321/5433 [09:26<00:01, 80.69it/s]
 98%|█████████▊| 5339/5433 [09:26<00:00, 104.38it/s]
 98%|█████████▊| 5351/5433 [09:26<00:00, 96.00it/s] 
 99%|█████████▊| 5362/5433 [09:27<00:00, 97.62it/s]
 99%|█████████▉| 5380/5433 [09:27<00:00, 117.92it/s]
 99%|█████████▉| 5397/5433 [09:27<00:00, 130.12it/s]
100%|█████████▉| 5413/5433 [09:27<00:00, 136.72it/s]
100%|██████████| 5433/5433 [09:27<00:00,  9.57it/s] 
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-27 12:45:43.946 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-27 12:45:48.842 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-27 12:45:59.130 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-27 12:46:02.904 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-27 12:46:08.286 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-27 12:47:17.992 | INFO     | __main__:retrieve_proof:279 - 52515
2024-05-27 12:47:18.019 | INFO     | prover.proof_search:__init__:422 - Launching 5 workers with 1 GPUs.
2024-05-27 12:47:23,012	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8266 [39m[22m
2024-05-27 12:47:24.049 | INFO     | prover.proof_search:search_unordered:467 - before theorem search: 
(pid=3813312) [2024-05-27 12:47:29,059] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(pid=3813310)  [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
(pid=3813312)  [WARNING]  async_io: please install the libaio-dev package with apt
(pid=3813312)  [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
(pid=3813312)  [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
(pid=3813312)  [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
(pid=3813312)  [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
(GpuProver pid=3813310) Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt`
(GpuProver pid=3813310) 2024-05-27 12:47:30.850 | INFO     | generator.model:__init__:110 - Without retrieval
(GpuProver pid=3813310) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
(GpuProver pid=3813310)   warnings.warn(
(GpuProver pid=3813310) Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
(GpuProver pid=3813312) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters']
(GpuProver pid=3813312) 2024-05-27 12:47:33.410 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_one_conjunction')
(GpuProver pid=3813311) 2024-05-27 12:47:33.544 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_seven_existential')
(GpuProver pid=3813314) 2024-05-27 12:47:33.551 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Complex.lean'), full_name='abs_val')
(GpuProver pid=3813313) 2024-05-27 12:47:33.566 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Basic.lean'), full_name='foo')
(GpuProver pid=3813313) 2024-05-27 12:51:09.805 | INFO     | prover.proof_search:_best_first_search:155 - Found a proof!
(GpuProver pid=3813313) Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt` [repeated 4x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)
(GpuProver pid=3813313) 2024-05-27 12:47:31.147 | INFO     | generator.model:__init__:110 - Without retrieval [repeated 4x across cluster]
(GpuProver pid=3813313) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`. [repeated 4x across cluster]
(GpuProver pid=3813313)   warnings.warn( [repeated 4x across cluster]
(GpuProver pid=3813313) Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained. [repeated 4x across cluster]
(GpuProver pid=3813311) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters'] [repeated 4x across cluster]
(killed on purpose by Adarsh)





ATTEMPT 5






Script executed from: /home/adarsh/ReProver
[2024-05-27 13:15:06,469] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Found 1 repositories
Processing Adarsh321123/new-version-test
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Already on 'main'
Your branch is up to date with 'origin/main'.
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Already up to date.
Switched to a new branch '_LeanCopilotBot'
Branch '_LeanCopilotBot' set up to track remote branch '_LeanCopilotBot' from 'origin'.
Already up to date.
2024-05-27 13:15:19.041 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-27 13:15:19.041 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc1
2024-05-27 13:15:19.041 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-27 13:15:19.041 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 13:15:19.041 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-27 13:15:19.073 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-27 13:15:19.073 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54')
2024-05-27 13:15:19.073 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-version-test-279c3bc5c6d1e1b8810c99129d7d2c43c5469b54/new-version-test
2024-05-27 13:15:21,393	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

  0%|          | 0/5433 [00:00<?, ?it/s]
  0%|          | 1/5433 [00:01<2:37:17,  1.74s/it]
  0%|          | 20/5433 [00:01<06:01, 14.97it/s] 
  1%|          | 35/5433 [00:02<03:46, 23.85it/s]
  1%|          | 44/5433 [00:02<03:55, 22.87it/s]
  1%|          | 50/5433 [00:03<04:40, 19.17it/s]
  1%|          | 61/5433 [00:03<04:38, 19.31it/s]
  1%|          | 65/5433 [00:03<04:16, 20.93it/s]
  1%|▏         | 69/5433 [00:04<06:12, 14.40it/s]
  1%|▏         | 76/5433 [00:05<07:16, 12.28it/s]
  2%|▏         | 86/5433 [00:05<05:01, 17.76it/s]
  2%|▏         | 104/5433 [00:06<05:59, 14.82it/s]
  3%|▎         | 140/5433 [00:06<02:35, 34.01it/s]
  3%|▎         | 153/5433 [00:08<04:15, 20.69it/s]
  3%|▎         | 162/5433 [00:08<03:40, 23.96it/s]
  3%|▎         | 171/5433 [00:09<05:56, 14.75it/s]
  3%|▎         | 178/5433 [00:10<05:12, 16.80it/s]
  3%|▎         | 184/5433 [00:10<04:41, 18.64it/s]
  3%|▎         | 189/5433 [00:11<09:24,  9.29it/s]
  4%|▎         | 196/5433 [00:12<07:13, 12.08it/s]
  4%|▎         | 201/5433 [00:12<06:19, 13.77it/s]
  4%|▍         | 205/5433 [00:12<05:33, 15.69it/s]
  4%|▍         | 211/5433 [00:12<04:21, 20.01it/s]
  4%|▍         | 216/5433 [00:14<12:30,  6.95it/s]
  4%|▍         | 221/5433 [00:14<09:40,  8.97it/s]
  4%|▍         | 229/5433 [00:14<06:23, 13.57it/s]
  4%|▍         | 239/5433 [00:14<04:11, 20.63it/s]
  5%|▍         | 245/5433 [00:14<03:34, 24.13it/s]
  5%|▍         | 251/5433 [00:15<03:00, 28.76it/s]
  5%|▍         | 257/5433 [00:15<02:45, 31.31it/s]
  5%|▍         | 263/5433 [00:18<14:25,  5.97it/s]
  5%|▍         | 267/5433 [00:18<12:13,  7.05it/s]
  5%|▍         | 271/5433 [00:18<10:05,  8.53it/s]
  5%|▌         | 276/5433 [00:18<07:39, 11.22it/s]
  5%|▌         | 280/5433 [00:18<06:18, 13.61it/s]
  5%|▌         | 285/5433 [00:18<04:59, 17.16it/s]
  5%|▌         | 291/5433 [00:19<03:52, 22.10it/s]
  5%|▌         | 296/5433 [00:22<19:42,  4.35it/s]
  6%|▌         | 303/5433 [00:22<12:57,  6.60it/s]
  6%|▌         | 309/5433 [00:22<09:22,  9.11it/s]
  6%|▌         | 314/5433 [00:22<07:30, 11.37it/s]
  6%|▌         | 321/5433 [00:22<05:22, 15.83it/s]
  6%|▌         | 326/5433 [00:23<04:28, 19.02it/s]
  6%|▌         | 331/5433 [00:23<03:48, 22.34it/s]
  6%|▌         | 336/5433 [00:23<03:21, 25.34it/s]
  6%|▋         | 341/5433 [00:23<03:01, 28.07it/s]
  6%|▋         | 346/5433 [00:27<22:15,  3.81it/s]
  6%|▋         | 349/5433 [00:27<18:38,  4.54it/s]
  7%|▋         | 354/5433 [00:27<13:13,  6.40it/s]
  7%|▋         | 363/5433 [00:27<07:40, 11.01it/s]
  7%|▋         | 368/5433 [00:27<06:05, 13.86it/s]
  7%|▋         | 377/5433 [00:28<04:00, 21.00it/s]
  7%|▋         | 384/5433 [00:28<03:14, 25.94it/s]
  7%|▋         | 391/5433 [00:28<02:38, 31.80it/s]
  7%|▋         | 398/5433 [00:28<02:28, 33.86it/s]
  7%|▋         | 407/5433 [00:28<02:10, 38.55it/s]
  8%|▊         | 413/5433 [00:34<21:16,  3.93it/s]
  8%|▊         | 417/5433 [00:34<17:31,  4.77it/s]
  8%|▊         | 424/5433 [00:34<12:09,  6.87it/s]
  8%|▊         | 429/5433 [00:34<09:40,  8.62it/s]
  8%|▊         | 434/5433 [00:34<07:38, 10.90it/s]
  8%|▊         | 440/5433 [00:34<05:41, 14.60it/s]
  8%|▊         | 448/5433 [00:34<04:00, 20.76it/s]
  8%|▊         | 454/5433 [00:35<03:27, 24.05it/s]
  9%|▊         | 463/5433 [00:35<02:32, 32.49it/s]
  9%|▊         | 473/5433 [00:35<01:58, 41.85it/s]
  9%|▉         | 480/5433 [00:35<02:00, 41.05it/s]
  9%|▉         | 487/5433 [00:35<01:49, 45.15it/s]
  9%|▉         | 493/5433 [00:35<01:56, 42.41it/s]
  9%|▉         | 499/5433 [00:42<25:27,  3.23it/s]
  9%|▉         | 503/5433 [00:42<21:18,  3.85it/s]
  9%|▉         | 508/5433 [00:42<16:15,  5.05it/s]
  9%|▉         | 512/5433 [00:42<13:21,  6.14it/s]
 10%|▉         | 518/5433 [00:42<09:31,  8.61it/s]
 10%|▉         | 522/5433 [00:43<08:13,  9.95it/s]
 10%|▉         | 526/5433 [00:43<06:45, 12.10it/s]
 10%|▉         | 530/5433 [00:43<06:16, 13.01it/s]
 10%|▉         | 533/5433 [00:43<05:44, 14.24it/s]
 10%|▉         | 536/5433 [00:43<05:08, 15.88it/s]
 10%|▉         | 542/5433 [00:43<03:38, 22.35it/s]
 10%|█         | 547/5433 [00:44<03:05, 26.40it/s]
 10%|█         | 552/5433 [00:51<41:12,  1.97it/s]
 10%|█         | 556/5433 [00:51<31:03,  2.62it/s]
 10%|█         | 560/5433 [00:51<23:28,  3.46it/s]
 10%|█         | 566/5433 [00:52<15:24,  5.27it/s]
 10%|█         | 570/5433 [00:52<12:13,  6.63it/s]
 11%|█         | 573/5433 [00:52<10:25,  7.78it/s]
 11%|█         | 578/5433 [00:52<07:24, 10.92it/s]
 11%|█         | 582/5433 [00:52<06:18, 12.83it/s]
 11%|█         | 587/5433 [00:52<04:52, 16.59it/s]
 11%|█         | 591/5433 [00:52<04:11, 19.28it/s]
 11%|█         | 596/5433 [00:53<03:24, 23.60it/s]
 11%|█         | 600/5433 [00:53<03:11, 25.26it/s]
 11%|█         | 605/5433 [00:53<02:45, 29.21it/s]
 11%|█         | 609/5433 [00:53<02:57, 27.11it/s]
 11%|█▏        | 613/5433 [00:53<02:45, 29.09it/s]
 11%|█▏        | 618/5433 [00:53<02:23, 33.50it/s]
 11%|█▏        | 623/5433 [00:53<02:11, 36.50it/s]
 12%|█▏        | 631/5433 [01:03<40:36,  1.97it/s]
 12%|█▏        | 640/5433 [01:03<24:33,  3.25it/s]
 12%|█▏        | 647/5433 [01:03<17:18,  4.61it/s]
 12%|█▏        | 657/5433 [01:03<10:53,  7.31it/s]
 12%|█▏        | 667/5433 [01:03<07:24, 10.73it/s]
 12%|█▏        | 674/5433 [01:03<05:47, 13.68it/s]
 13%|█▎        | 685/5433 [01:03<03:56, 20.03it/s]
 13%|█▎        | 693/5433 [01:03<03:16, 24.18it/s]
 13%|█▎        | 700/5433 [01:04<02:55, 26.92it/s]
 13%|█▎        | 707/5433 [01:04<02:27, 32.05it/s]
 13%|█▎        | 714/5433 [01:04<02:05, 37.67it/s]
 13%|█▎        | 723/5433 [01:04<01:40, 46.74it/s]
 13%|█▎        | 731/5433 [01:04<01:38, 47.77it/s]
 14%|█▎        | 739/5433 [01:04<01:26, 53.98it/s]
 14%|█▍        | 748/5433 [01:04<01:17, 60.42it/s]
 14%|█▍        | 756/5433 [01:04<01:34, 49.38it/s]
 14%|█▍        | 763/5433 [01:05<01:30, 51.78it/s]
 14%|█▍        | 770/5433 [01:05<01:35, 48.69it/s]
 14%|█▍        | 776/5433 [01:05<01:34, 49.46it/s]
 14%|█▍        | 782/5433 [01:05<01:34, 49.35it/s]
 15%|█▍        | 788/5433 [01:05<01:47, 43.37it/s]
 15%|█▍        | 788/5433 [01:17<01:47, 43.37it/s]
 15%|█▍        | 791/5433 [01:17<51:10,  1.51it/s]
 15%|█▍        | 796/5433 [01:17<37:14,  2.08it/s]
 15%|█▍        | 801/5433 [01:17<27:23,  2.82it/s]
 15%|█▍        | 805/5433 [01:17<21:11,  3.64it/s]
 15%|█▍        | 810/5433 [01:17<15:10,  5.08it/s]
 15%|█▌        | 820/5433 [01:18<08:29,  9.06it/s]
 15%|█▌        | 826/5433 [01:18<06:43, 11.42it/s]
 15%|█▌        | 831/5433 [01:18<05:29, 13.96it/s]
 15%|█▌        | 836/5433 [01:18<04:31, 16.90it/s]
 16%|█▌        | 843/5433 [01:18<03:21, 22.75it/s]
 16%|█▌        | 851/5433 [01:18<02:30, 30.51it/s]
 16%|█▌        | 857/5433 [01:18<02:13, 34.34it/s]
 16%|█▌        | 866/5433 [01:18<01:50, 41.37it/s]
 16%|█▌        | 872/5433 [01:19<01:44, 43.74it/s]
 16%|█▌        | 878/5433 [01:19<01:37, 46.74it/s]
 16%|█▋        | 884/5433 [01:19<01:35, 47.65it/s]
 16%|█▋        | 890/5433 [01:19<01:41, 44.72it/s]
 16%|█▋        | 896/5433 [01:19<01:34, 47.84it/s]
 17%|█▋        | 902/5433 [01:19<01:39, 45.60it/s]
 17%|█▋        | 908/5433 [01:19<01:34, 48.10it/s]
 17%|█▋        | 914/5433 [01:19<01:35, 47.36it/s]
 17%|█▋        | 919/5433 [01:20<01:34, 47.78it/s]
 17%|█▋        | 931/5433 [01:20<01:07, 66.36it/s]
 17%|█▋        | 939/5433 [01:20<01:06, 67.60it/s]
 17%|█▋        | 947/5433 [01:20<01:05, 68.99it/s]
 17%|█▋        | 947/5433 [01:35<01:05, 68.99it/s]
 18%|█▊        | 951/5433 [01:35<52:09,  1.43it/s]
 18%|█▊        | 958/5433 [01:35<36:23,  2.05it/s]
 18%|█▊        | 965/5433 [01:35<25:35,  2.91it/s]
 18%|█▊        | 972/5433 [01:36<18:06,  4.10it/s]
 18%|█▊        | 979/5433 [01:36<13:26,  5.52it/s]
 18%|█▊        | 986/5433 [01:36<09:56,  7.46it/s]
 18%|█▊        | 996/5433 [01:36<06:28, 11.43it/s]
 18%|█▊        | 1002/5433 [01:36<05:47, 12.76it/s]
 19%|█▊        | 1007/5433 [01:37<05:07, 14.38it/s]
 19%|█▊        | 1015/5433 [01:37<03:44, 19.71it/s]
 19%|█▉        | 1023/5433 [01:37<02:52, 25.56it/s]
 19%|█▉        | 1029/5433 [01:37<02:40, 27.42it/s]
 19%|█▉        | 1034/5433 [01:37<03:11, 22.94it/s]
 19%|█▉        | 1039/5433 [01:37<02:50, 25.84it/s]
 19%|█▉        | 1043/5433 [01:38<03:14, 22.53it/s]
 19%|█▉        | 1047/5433 [01:38<03:14, 22.58it/s]
 19%|█▉        | 1052/5433 [01:38<03:08, 23.21it/s]
 19%|█▉        | 1055/5433 [01:38<03:11, 22.85it/s]
 19%|█▉        | 1059/5433 [01:38<02:51, 25.56it/s]
 20%|█▉        | 1064/5433 [01:38<02:30, 29.03it/s]
 20%|█▉        | 1070/5433 [01:39<02:20, 31.10it/s]
 20%|█▉        | 1079/5433 [01:39<01:41, 42.70it/s]
 20%|█▉        | 1086/5433 [01:39<01:38, 43.98it/s]
 20%|██        | 1093/5433 [01:39<01:35, 45.34it/s]
 20%|██        | 1102/5433 [01:39<01:20, 53.78it/s]
 20%|██        | 1102/5433 [01:58<01:20, 53.78it/s]
 20%|██        | 1109/5433 [01:58<57:11,  1.26it/s]
 21%|██        | 1116/5433 [01:58<40:37,  1.77it/s]
 21%|██        | 1123/5433 [01:58<29:15,  2.46it/s]
 21%|██        | 1132/5433 [01:58<19:17,  3.72it/s]
 21%|██        | 1138/5433 [01:59<15:11,  4.71it/s]
 21%|██        | 1149/5433 [01:59<09:24,  7.59it/s]
 21%|██▏       | 1157/5433 [01:59<06:54, 10.32it/s]
 21%|██▏       | 1167/5433 [01:59<04:47, 14.84it/s]
 22%|██▏       | 1175/5433 [01:59<03:42, 19.17it/s]
 22%|██▏       | 1185/5433 [01:59<02:43, 25.98it/s]
 22%|██▏       | 1194/5433 [01:59<02:17, 30.74it/s]
 22%|██▏       | 1202/5433 [01:59<01:57, 35.93it/s]
 22%|██▏       | 1209/5433 [02:00<01:44, 40.60it/s]
 22%|██▏       | 1216/5433 [02:00<01:32, 45.50it/s]
 23%|██▎       | 1229/5433 [02:00<01:08, 60.94it/s]
 23%|██▎       | 1238/5433 [02:00<01:12, 58.01it/s]
 23%|██▎       | 1249/5433 [02:00<01:04, 65.21it/s]
 23%|██▎       | 1260/5433 [02:00<00:55, 74.74it/s]
 23%|██▎       | 1269/5433 [02:00<00:56, 74.18it/s]
 24%|██▎       | 1278/5433 [02:00<00:56, 73.64it/s]
 24%|██▎       | 1286/5433 [02:01<00:58, 71.29it/s]
 24%|██▍       | 1294/5433 [02:01<01:05, 63.33it/s]
 24%|██▍       | 1301/5433 [02:01<01:21, 50.63it/s]
 24%|██▍       | 1318/5433 [02:01<00:59, 68.62it/s]
 24%|██▍       | 1326/5433 [02:01<01:18, 52.11it/s]
 25%|██▍       | 1333/5433 [02:02<01:20, 51.16it/s]
 25%|██▍       | 1339/5433 [02:02<01:35, 43.08it/s]
 25%|██▍       | 1344/5433 [02:02<01:59, 34.35it/s]
 25%|██▍       | 1348/5433 [02:02<01:57, 34.78it/s]
 25%|██▍       | 1352/5433 [02:02<01:55, 35.20it/s]
 25%|██▍       | 1358/5433 [02:02<01:42, 39.78it/s]
 25%|██▌       | 1363/5433 [02:02<01:50, 36.75it/s]
 25%|██▌       | 1372/5433 [02:03<01:24, 47.85it/s]
 25%|██▌       | 1372/5433 [02:29<01:24, 47.85it/s]
 25%|██▌       | 1378/5433 [02:29<1:25:25,  1.26s/it]
 25%|██▌       | 1382/5433 [02:29<1:07:47,  1.00s/it]
 26%|██▌       | 1387/5433 [02:29<49:48,  1.35it/s]  
 26%|██▌       | 1391/5433 [02:30<38:34,  1.75it/s]
 26%|██▌       | 1395/5433 [02:30<29:37,  2.27it/s]
 26%|██▌       | 1402/5433 [02:30<18:28,  3.64it/s]
 26%|██▌       | 1408/5433 [02:30<12:51,  5.21it/s]
 26%|██▌       | 1416/5433 [02:30<08:17,  8.08it/s]
 26%|██▌       | 1423/5433 [02:30<05:58, 11.18it/s]
 26%|██▋       | 1430/5433 [02:30<04:26, 15.04it/s]
 26%|██▋       | 1436/5433 [02:31<03:33, 18.71it/s]
 27%|██▋       | 1444/5433 [02:31<02:41, 24.66it/s]
 27%|██▋       | 1452/5433 [02:31<02:05, 31.84it/s]
 27%|██▋       | 1459/5433 [02:31<02:08, 30.88it/s]
 27%|██▋       | 1465/5433 [02:31<02:22, 27.81it/s]
 27%|██▋       | 1470/5433 [02:31<02:10, 30.43it/s]
 27%|██▋       | 1475/5433 [02:32<02:10, 30.35it/s]
 27%|██▋       | 1479/5433 [02:32<02:04, 31.88it/s]
 27%|██▋       | 1484/5433 [02:32<01:56, 34.03it/s]
 27%|██▋       | 1488/5433 [02:32<02:07, 30.86it/s]
 28%|██▊       | 1497/5433 [02:32<01:30, 43.42it/s]
 28%|██▊       | 1503/5433 [02:32<01:28, 44.17it/s]
 28%|██▊       | 1511/5433 [02:32<01:15, 51.90it/s]
 28%|██▊       | 1519/5433 [02:32<01:15, 51.73it/s]
 28%|██▊       | 1525/5433 [02:33<01:23, 46.73it/s]
 28%|██▊       | 1531/5433 [02:33<01:25, 45.50it/s]
 28%|██▊       | 1536/5433 [02:33<01:40, 38.74it/s]
 28%|██▊       | 1541/5433 [02:33<01:39, 39.17it/s]
 28%|██▊       | 1546/5433 [02:33<01:35, 40.64it/s]
 29%|██▊       | 1551/5433 [02:33<01:32, 42.11it/s]
 29%|██▊       | 1557/5433 [02:33<01:23, 46.61it/s]
 29%|██▉       | 1562/5433 [02:34<01:42, 37.85it/s]
 29%|██▉       | 1567/5433 [02:34<01:36, 40.21it/s]
 29%|██▉       | 1575/5433 [02:34<01:22, 46.77it/s]
 29%|██▉       | 1585/5433 [02:34<01:04, 59.58it/s]
 29%|██▉       | 1592/5433 [02:34<01:04, 59.27it/s]
 29%|██▉       | 1599/5433 [02:34<01:18, 48.59it/s]
 30%|██▉       | 1605/5433 [02:34<01:26, 44.20it/s]
 30%|██▉       | 1610/5433 [02:34<01:24, 45.37it/s]
 30%|██▉       | 1615/5433 [02:35<01:30, 42.42it/s]
 30%|██▉       | 1620/5433 [02:35<01:39, 38.41it/s]
 30%|██▉       | 1625/5433 [02:35<01:37, 39.04it/s]
 30%|███       | 1635/5433 [02:35<01:20, 47.40it/s]
 30%|███       | 1635/5433 [03:05<01:20, 47.40it/s]
 30%|███       | 1637/5433 [03:05<1:48:43,  1.72s/it]
 30%|███       | 1645/5433 [03:06<1:06:28,  1.05s/it]
 30%|███       | 1652/5433 [03:06<45:05,  1.40it/s]  
 31%|███       | 1660/5433 [03:06<29:36,  2.12it/s]
 31%|███       | 1666/5433 [03:06<21:58,  2.86it/s]
 31%|███       | 1672/5433 [03:06<16:23,  3.82it/s]
 31%|███       | 1677/5433 [03:06<12:36,  4.97it/s]
 31%|███       | 1682/5433 [03:06<09:48,  6.37it/s]
 31%|███       | 1689/5433 [03:07<06:55,  9.02it/s]
 31%|███       | 1695/5433 [03:07<05:16, 11.81it/s]
 31%|███▏      | 1700/5433 [03:07<04:19, 14.37it/s]
 31%|███▏      | 1708/5433 [03:07<03:04, 20.22it/s]
 32%|███▏      | 1713/5433 [03:07<02:39, 23.28it/s]
 32%|███▏      | 1719/5433 [03:07<02:11, 28.21it/s]
 32%|███▏      | 1727/5433 [03:07<01:43, 35.70it/s]
 32%|███▏      | 1735/5433 [03:07<01:29, 41.35it/s]
 32%|███▏      | 1741/5433 [03:08<01:26, 42.50it/s]
 32%|███▏      | 1747/5433 [03:08<01:30, 40.86it/s]
 32%|███▏      | 1752/5433 [03:08<01:40, 36.50it/s]
 32%|███▏      | 1757/5433 [03:08<01:34, 38.99it/s]
 32%|███▏      | 1762/5433 [03:08<01:54, 31.98it/s]
 33%|███▎      | 1767/5433 [03:08<01:45, 34.63it/s]
 33%|███▎      | 1771/5433 [03:09<02:12, 27.55it/s]
 33%|███▎      | 1776/5433 [03:09<01:55, 31.57it/s]
 33%|███▎      | 1782/5433 [03:09<01:37, 37.46it/s]
 33%|███▎      | 1789/5433 [03:09<01:24, 43.33it/s]
 33%|███▎      | 1794/5433 [03:09<01:53, 31.99it/s]
 33%|███▎      | 1798/5433 [03:09<01:49, 33.33it/s]
 33%|███▎      | 1805/5433 [03:09<01:33, 38.89it/s]
 33%|███▎      | 1810/5433 [03:10<01:29, 40.26it/s]
 33%|███▎      | 1818/5433 [03:10<01:18, 46.17it/s]
 34%|███▎      | 1823/5433 [03:10<01:47, 33.66it/s]
 34%|███▎      | 1827/5433 [03:10<01:44, 34.46it/s]
 34%|███▎      | 1833/5433 [03:10<01:48, 33.09it/s]
 34%|███▍      | 1837/5433 [03:10<01:49, 32.71it/s]
 34%|███▍      | 1845/5433 [03:11<01:23, 42.76it/s]
 34%|███▍      | 1852/5433 [03:11<01:13, 48.58it/s]
 34%|███▍      | 1858/5433 [03:11<01:18, 45.30it/s]
 34%|███▍      | 1864/5433 [03:11<01:16, 46.73it/s]
 34%|███▍      | 1871/5433 [03:11<01:11, 49.97it/s]
 35%|███▍      | 1879/5433 [03:11<01:02, 56.99it/s]
 35%|███▍      | 1885/5433 [03:11<01:09, 51.10it/s]
 35%|███▍      | 1894/5433 [03:11<00:58, 60.55it/s]
 35%|███▌      | 1905/5433 [03:11<00:48, 72.03it/s]
 35%|███▌      | 1913/5433 [03:12<00:49, 70.73it/s]
 35%|███▌      | 1921/5433 [03:12<00:54, 64.16it/s]
 35%|███▌      | 1928/5433 [03:12<01:01, 57.43it/s]
 36%|███▌      | 1935/5433 [03:12<01:06, 52.49it/s]
 36%|███▌      | 1944/5433 [03:12<00:58, 59.95it/s]
 36%|███▌      | 1951/5433 [03:12<01:02, 55.44it/s]
 36%|███▌      | 1961/5433 [03:12<00:53, 65.37it/s]
 36%|███▌      | 1968/5433 [03:13<00:52, 66.01it/s]
 36%|███▋      | 1977/5433 [03:13<00:48, 71.96it/s]
 37%|███▋      | 1991/5433 [03:13<00:38, 88.49it/s]
 37%|███▋      | 1991/5433 [03:53<00:38, 88.49it/s]
 37%|███▋      | 1994/5433 [03:53<1:27:54,  1.53s/it]
 37%|███▋      | 1998/5433 [03:53<1:12:40,  1.27s/it]
 37%|███▋      | 2005/5433 [03:53<50:42,  1.13it/s]  
 37%|███▋      | 2011/5433 [03:53<37:07,  1.54it/s]
 37%|███▋      | 2017/5433 [03:54<27:03,  2.10it/s]
 37%|███▋      | 2026/5433 [03:54<17:14,  3.29it/s]
 37%|███▋      | 2032/5433 [03:54<12:56,  4.38it/s]
 38%|███▊      | 2038/5433 [03:54<09:51,  5.74it/s]
 38%|███▊      | 2044/5433 [03:54<07:22,  7.65it/s]
 38%|███▊      | 2049/5433 [03:54<05:54,  9.54it/s]
 38%|███▊      | 2055/5433 [03:54<04:35, 12.25it/s]
 38%|███▊      | 2061/5433 [03:55<03:30, 16.02it/s]
 38%|███▊      | 2066/5433 [03:55<02:54, 19.32it/s]
 38%|███▊      | 2072/5433 [03:55<02:18, 24.25it/s]
 38%|███▊      | 2077/5433 [03:55<02:01, 27.57it/s]
 38%|███▊      | 2085/5433 [03:55<01:35, 34.99it/s]
 38%|███▊      | 2091/5433 [03:55<01:35, 35.00it/s]
 39%|███▊      | 2097/5433 [03:55<01:25, 39.10it/s]
 39%|███▊      | 2103/5433 [03:55<01:17, 43.10it/s]
 39%|███▉      | 2109/5433 [03:56<01:12, 45.72it/s]
 39%|███▉      | 2115/5433 [03:56<01:21, 40.55it/s]
 39%|███▉      | 2120/5433 [03:56<01:33, 35.35it/s]
 39%|███▉      | 2126/5433 [03:56<01:22, 40.21it/s]
 39%|███▉      | 2131/5433 [03:56<01:34, 34.80it/s]
 39%|███▉      | 2139/5433 [03:56<01:15, 43.55it/s]
 39%|███▉      | 2145/5433 [03:56<01:13, 44.47it/s]
 40%|███▉      | 2150/5433 [03:57<01:21, 40.07it/s]
 40%|███▉      | 2156/5433 [03:57<01:15, 43.37it/s]
 40%|███▉      | 2171/5433 [03:57<00:47, 68.93it/s]
 40%|████      | 2188/5433 [03:57<00:34, 94.49it/s]
 41%|████      | 2202/5433 [03:57<00:32, 99.63it/s]
 41%|████      | 2217/5433 [03:57<00:28, 111.15it/s]
 41%|████      | 2229/5433 [03:57<00:30, 106.24it/s]
 41%|████▏     | 2249/5433 [03:57<00:24, 129.43it/s]
 42%|████▏     | 2263/5433 [03:58<00:25, 123.40it/s]
 42%|████▏     | 2280/5433 [03:58<00:23, 133.35it/s]
 43%|████▎     | 2310/5433 [03:58<00:17, 175.61it/s]
 43%|████▎     | 2329/5433 [03:58<00:19, 159.08it/s]
 43%|████▎     | 2346/5433 [03:58<00:20, 153.83it/s]
 43%|████▎     | 2362/5433 [03:58<00:22, 133.63it/s]
 44%|████▍     | 2377/5433 [03:58<00:22, 133.17it/s]
 44%|████▍     | 2391/5433 [03:58<00:25, 117.55it/s]
 44%|████▍     | 2404/5433 [03:59<00:29, 102.45it/s]
 44%|████▍     | 2415/5433 [03:59<00:37, 80.73it/s] 
 45%|████▍     | 2431/5433 [03:59<00:31, 95.58it/s]
 45%|████▍     | 2442/5433 [03:59<00:35, 84.42it/s]
 45%|████▌     | 2452/5433 [03:59<00:36, 82.79it/s]
 45%|████▌     | 2461/5433 [03:59<00:38, 77.40it/s]
 45%|████▌     | 2470/5433 [04:00<00:47, 62.93it/s]
 46%|████▌     | 2477/5433 [04:00<00:47, 62.39it/s]
 46%|████▌     | 2485/5433 [04:00<00:44, 65.92it/s]
 46%|████▌     | 2493/5433 [04:00<00:50, 58.38it/s]
 46%|████▌     | 2500/5433 [04:00<00:57, 51.17it/s]
 46%|████▌     | 2506/5433 [04:00<00:56, 51.67it/s]
 46%|████▌     | 2512/5433 [04:01<01:08, 42.93it/s]
 46%|████▋     | 2517/5433 [04:01<01:06, 43.62it/s]
 46%|████▋     | 2522/5433 [04:01<01:05, 44.75it/s]
 47%|████▋     | 2531/5433 [04:01<00:52, 54.98it/s]
 47%|████▋     | 2537/5433 [04:01<00:54, 53.01it/s]
 47%|████▋     | 2545/5433 [04:01<00:49, 57.95it/s]
 47%|████▋     | 2552/5433 [04:01<00:51, 55.87it/s]
 47%|████▋     | 2564/5433 [04:01<00:39, 71.90it/s]
 47%|████▋     | 2572/5433 [04:01<00:43, 65.91it/s]
 47%|████▋     | 2580/5433 [04:02<00:43, 65.77it/s]
 47%|████▋     | 2580/5433 [04:52<00:43, 65.77it/s]
 48%|████▊     | 2584/5433 [04:52<1:42:28,  2.16s/it]
 48%|████▊     | 2595/5433 [04:52<1:01:06,  1.29s/it]
 48%|████▊     | 2611/5433 [04:52<33:13,  1.42it/s]  
 48%|████▊     | 2621/5433 [04:52<23:43,  1.97it/s]
 48%|████▊     | 2630/5433 [04:52<17:26,  2.68it/s]
 49%|████▊     | 2640/5433 [04:52<12:18,  3.78it/s]
 49%|████▉     | 2650/5433 [04:52<08:45,  5.29it/s]
 49%|████▉     | 2659/5433 [04:52<06:29,  7.12it/s]
 49%|████▉     | 2667/5433 [04:53<05:02,  9.13it/s]
 49%|████▉     | 2674/5433 [04:53<03:59, 11.54it/s]
 49%|████▉     | 2684/5433 [04:53<02:49, 16.24it/s]
 50%|████▉     | 2692/5433 [04:53<02:16, 20.07it/s]
 50%|████▉     | 2699/5433 [04:53<01:56, 23.56it/s]
 50%|████▉     | 2706/5433 [04:53<01:36, 28.24it/s]
 50%|████▉     | 2713/5433 [04:53<01:21, 33.20it/s]
 50%|█████     | 2720/5433 [04:53<01:12, 37.36it/s]
 50%|█████     | 2729/5433 [04:54<01:00, 44.84it/s]
 50%|█████     | 2736/5433 [04:54<00:59, 45.34it/s]
 50%|█████     | 2742/5433 [04:54<01:04, 42.02it/s]
 51%|█████     | 2750/5433 [04:54<00:57, 46.62it/s]
 51%|█████     | 2756/5433 [04:54<01:28, 30.41it/s]
 51%|█████     | 2761/5433 [04:55<01:33, 28.53it/s]
 51%|█████     | 2766/5433 [04:55<01:23, 31.96it/s]
 51%|█████     | 2773/5433 [04:55<01:09, 38.31it/s]
 51%|█████     | 2781/5433 [04:55<00:58, 45.35it/s]
 51%|█████▏    | 2787/5433 [04:55<01:05, 40.53it/s]
 51%|█████▏    | 2792/5433 [04:55<01:10, 37.36it/s]
 52%|█████▏    | 2800/5433 [04:55<00:58, 44.81it/s]
 52%|█████▏    | 2807/5433 [04:56<00:53, 48.86it/s]
 52%|█████▏    | 2813/5433 [04:56<01:01, 42.71it/s]
 52%|█████▏    | 2818/5433 [04:56<00:59, 44.24it/s]
 52%|█████▏    | 2824/5433 [04:56<00:54, 47.94it/s]
 52%|█████▏    | 2830/5433 [04:56<00:56, 45.70it/s]
 52%|█████▏    | 2835/5433 [04:56<01:00, 42.60it/s]
 52%|█████▏    | 2842/5433 [04:56<00:52, 49.05it/s]
 52%|█████▏    | 2848/5433 [04:56<00:54, 47.35it/s]
 53%|█████▎    | 2857/5433 [04:57<00:45, 56.65it/s]
 53%|█████▎    | 2864/5433 [04:57<00:46, 55.57it/s]
 53%|█████▎    | 2872/5433 [04:57<00:42, 60.80it/s]
 53%|█████▎    | 2879/5433 [04:57<00:40, 62.87it/s]
 53%|█████▎    | 2886/5433 [04:57<00:42, 60.38it/s]
 53%|█████▎    | 2893/5433 [04:57<01:16, 33.17it/s]
 53%|█████▎    | 2900/5433 [04:58<01:06, 38.21it/s]
 54%|█████▎    | 2909/5433 [04:58<00:53, 46.85it/s]
 54%|█████▎    | 2916/5433 [04:58<00:55, 45.57it/s]
 54%|█████▍    | 2925/5433 [04:58<00:45, 54.66it/s]
 54%|█████▍    | 2932/5433 [04:58<00:49, 50.23it/s]
 54%|█████▍    | 2938/5433 [04:58<00:48, 51.79it/s]
 54%|█████▍    | 2944/5433 [04:58<00:46, 53.57it/s]
 54%|█████▍    | 2952/5433 [04:58<00:41, 59.59it/s]
 54%|█████▍    | 2959/5433 [04:59<00:43, 57.34it/s]
 55%|█████▍    | 2966/5433 [04:59<00:50, 48.93it/s]
 55%|█████▍    | 2975/5433 [04:59<00:42, 58.24it/s]
 55%|█████▍    | 2982/5433 [04:59<00:46, 52.76it/s]
 55%|█████▌    | 2995/5433 [04:59<00:35, 68.58it/s]
 55%|█████▌    | 3003/5433 [04:59<00:41, 58.70it/s]
 55%|█████▌    | 3010/5433 [04:59<00:42, 57.11it/s]
 56%|█████▌    | 3017/5433 [05:00<00:40, 58.98it/s]
 56%|█████▌    | 3030/5433 [05:00<00:32, 73.36it/s]
 56%|█████▌    | 3038/5433 [05:00<00:35, 68.23it/s]
 56%|█████▌    | 3047/5433 [05:00<00:32, 73.41it/s]
 56%|█████▌    | 3055/5433 [05:00<00:33, 71.56it/s]
 56%|█████▋    | 3063/5433 [05:00<00:39, 60.02it/s]
 57%|█████▋    | 3070/5433 [05:00<00:38, 60.96it/s]
 57%|█████▋    | 3077/5433 [05:01<00:47, 49.22it/s]
 57%|█████▋    | 3083/5433 [05:01<00:47, 49.72it/s]
 57%|█████▋    | 3091/5433 [05:01<00:47, 49.30it/s]
 57%|█████▋    | 3097/5433 [05:01<00:45, 50.94it/s]
 57%|█████▋    | 3109/5433 [05:01<00:35, 65.18it/s]
 57%|█████▋    | 3119/5433 [05:01<00:33, 69.45it/s]
 58%|█████▊    | 3127/5433 [05:01<00:37, 60.91it/s]
 58%|█████▊    | 3134/5433 [05:01<00:37, 60.97it/s]
 58%|█████▊    | 3141/5433 [05:02<00:46, 49.41it/s]
 58%|█████▊    | 3147/5433 [05:02<00:51, 44.31it/s]
 58%|█████▊    | 3147/5433 [06:05<00:51, 44.31it/s]
 58%|█████▊    | 3150/5433 [06:05<2:01:48,  3.20s/it]
 58%|█████▊    | 3152/5433 [06:06<1:46:54,  2.81s/it]
 58%|█████▊    | 3157/5433 [06:06<1:14:00,  1.95s/it]
 58%|█████▊    | 3161/5433 [06:06<54:52,  1.45s/it]  
 58%|█████▊    | 3165/5433 [06:06<40:11,  1.06s/it]
 58%|█████▊    | 3169/5433 [06:06<29:13,  1.29it/s]
 58%|█████▊    | 3175/5433 [06:06<18:28,  2.04it/s]
 59%|█████▊    | 3180/5433 [06:06<13:06,  2.87it/s]
 59%|█████▊    | 3188/5433 [06:06<07:52,  4.76it/s]
 59%|█████▉    | 3194/5433 [06:07<05:39,  6.60it/s]
 59%|█████▉    | 3200/5433 [06:07<04:16,  8.71it/s]
 59%|█████▉    | 3208/5433 [06:07<02:52, 12.91it/s]
 59%|█████▉    | 3214/5433 [06:07<02:24, 15.33it/s]
 59%|█████▉    | 3220/5433 [06:07<02:03, 17.91it/s]
 59%|█████▉    | 3225/5433 [06:07<01:47, 20.47it/s]
 60%|█████▉    | 3233/5433 [06:08<01:19, 27.55it/s]
 60%|█████▉    | 3242/5433 [06:08<00:59, 37.12it/s]
 60%|█████▉    | 3249/5433 [06:08<00:51, 42.01it/s]
 60%|█████▉    | 3256/5433 [06:08<00:47, 46.10it/s]
 60%|██████    | 3263/5433 [06:08<00:43, 50.33it/s]
 60%|██████    | 3270/5433 [06:08<00:43, 49.61it/s]
 60%|██████    | 3281/5433 [06:08<00:34, 62.27it/s]
 61%|██████    | 3289/5433 [06:08<00:34, 61.98it/s]
 61%|██████    | 3300/5433 [06:08<00:29, 73.34it/s]
 61%|██████    | 3310/5433 [06:09<00:26, 79.79it/s]
 61%|██████    | 3320/5433 [06:09<00:25, 83.64it/s]
 61%|██████▏   | 3329/5433 [06:09<00:27, 77.62it/s]
 61%|██████▏   | 3339/5433 [06:09<00:26, 80.05it/s]
 62%|██████▏   | 3348/5433 [06:09<00:27, 75.56it/s]
 62%|██████▏   | 3360/5433 [06:09<00:24, 84.61it/s]
 62%|██████▏   | 3369/5433 [06:09<00:25, 79.39it/s]
 62%|██████▏   | 3378/5433 [06:09<00:25, 80.03it/s]
 62%|██████▏   | 3390/5433 [06:10<00:23, 88.77it/s]
 63%|██████▎   | 3400/5433 [06:10<00:22, 89.85it/s]
 63%|██████▎   | 3410/5433 [06:10<00:22, 89.28it/s]
 63%|██████▎   | 3422/5433 [06:10<00:21, 92.70it/s]
 63%|██████▎   | 3432/5433 [06:10<00:21, 92.54it/s]
 63%|██████▎   | 3442/5433 [06:10<00:27, 73.62it/s]
 64%|██████▎   | 3452/5433 [06:10<00:25, 77.72it/s]
 64%|██████▎   | 3461/5433 [06:10<00:29, 66.10it/s]
 64%|██████▍   | 3469/5433 [06:11<00:33, 58.71it/s]
 64%|██████▍   | 3477/5433 [06:11<00:31, 62.68it/s]
 64%|██████▍   | 3484/5433 [06:11<00:33, 58.93it/s]
 64%|██████▍   | 3491/5433 [06:11<00:33, 57.38it/s]
 64%|██████▍   | 3497/5433 [06:11<00:35, 54.16it/s]
 64%|██████▍   | 3503/5433 [06:11<00:41, 45.97it/s]
 65%|██████▍   | 3511/5433 [06:11<00:36, 53.12it/s]
 65%|██████▍   | 3517/5433 [06:12<00:43, 44.52it/s]
 65%|██████▍   | 3526/5433 [06:12<00:37, 50.84it/s]
 65%|██████▌   | 3532/5433 [06:12<00:47, 40.26it/s]
 65%|██████▌   | 3540/5433 [06:12<00:41, 45.29it/s]
 65%|██████▌   | 3547/5433 [06:12<00:38, 49.57it/s]
 65%|██████▌   | 3553/5433 [06:12<00:43, 43.63it/s]
 66%|██████▌   | 3561/5433 [06:13<00:37, 49.35it/s]
 66%|██████▌   | 3567/5433 [06:13<00:37, 49.76it/s]
 66%|██████▌   | 3576/5433 [06:13<00:32, 56.89it/s]
 66%|██████▌   | 3586/5433 [06:13<00:27, 67.11it/s]
 66%|██████▌   | 3594/5433 [06:13<00:28, 64.39it/s]
 66%|██████▋   | 3606/5433 [06:13<00:24, 73.44it/s]
 67%|██████▋   | 3614/5433 [06:13<00:25, 72.51it/s]
 67%|██████▋   | 3622/5433 [06:13<00:29, 62.12it/s]
 67%|██████▋   | 3632/5433 [06:14<00:25, 70.68it/s]
 67%|██████▋   | 3640/5433 [06:14<00:28, 63.51it/s]
 67%|██████▋   | 3647/5433 [06:14<00:35, 49.82it/s]
 67%|██████▋   | 3653/5433 [06:14<00:41, 42.59it/s]
 67%|██████▋   | 3660/5433 [06:14<00:37, 47.92it/s]
 67%|██████▋   | 3666/5433 [06:14<00:47, 37.39it/s]
 68%|██████▊   | 3671/5433 [06:15<00:59, 29.54it/s]
 68%|██████▊   | 3677/5433 [06:15<00:51, 34.40it/s]
 68%|██████▊   | 3688/5433 [06:15<00:36, 48.32it/s]
 68%|██████▊   | 3695/5433 [06:15<00:35, 49.31it/s]
 68%|██████▊   | 3701/5433 [06:15<00:44, 39.29it/s]
 68%|██████▊   | 3707/5433 [06:16<00:43, 40.10it/s]
 68%|██████▊   | 3714/5433 [06:16<00:41, 41.27it/s]
 68%|██████▊   | 3719/5433 [06:16<00:49, 34.76it/s]
 69%|██████▊   | 3724/5433 [06:16<00:47, 35.75it/s]
 69%|██████▊   | 3728/5433 [06:16<00:51, 32.97it/s]
 69%|██████▊   | 3732/5433 [06:16<01:03, 26.86it/s]
 69%|██████▊   | 3735/5433 [06:17<01:02, 27.00it/s]
 69%|██████▉   | 3738/5433 [06:17<01:03, 26.79it/s]
 69%|██████▉   | 3741/5433 [06:17<01:12, 23.47it/s]
 69%|██████▉   | 3745/5433 [06:17<01:04, 26.06it/s]
 69%|██████▉   | 3748/5433 [06:17<01:07, 24.80it/s]
 69%|██████▉   | 3751/5433 [06:17<01:05, 25.59it/s]
 69%|██████▉   | 3754/5433 [06:17<01:13, 22.75it/s]
 69%|██████▉   | 3763/5433 [06:17<00:45, 36.39it/s]
 69%|██████▉   | 3767/5433 [06:18<00:45, 37.02it/s]
 69%|██████▉   | 3771/5433 [06:18<00:45, 36.42it/s]
 70%|██████▉   | 3776/5433 [06:18<00:46, 35.61it/s]
 70%|██████▉   | 3780/5433 [06:18<01:00, 27.50it/s]
 70%|██████▉   | 3784/5433 [06:18<01:02, 26.26it/s]
 70%|██████▉   | 3787/5433 [06:18<01:10, 23.31it/s]
 70%|██████▉   | 3790/5433 [06:19<01:12, 22.62it/s]
 70%|██████▉   | 3790/5433 [07:38<01:12, 22.62it/s]
 70%|██████▉   | 3792/5433 [07:38<3:27:22,  7.58s/it]
 70%|██████▉   | 3795/5433 [07:38<2:27:23,  5.40s/it]
 70%|██████▉   | 3798/5433 [07:38<1:44:25,  3.83s/it]
 70%|██████▉   | 3801/5433 [07:38<1:13:56,  2.72s/it]
 70%|███████   | 3807/5433 [07:38<40:19,  1.49s/it]  
 70%|███████   | 3811/5433 [07:39<28:17,  1.05s/it]
 70%|███████   | 3815/5433 [07:39<19:54,  1.35it/s]
 70%|███████   | 3820/5433 [07:39<13:10,  2.04it/s]
 70%|███████   | 3824/5433 [07:39<09:34,  2.80it/s]
 70%|███████   | 3828/5433 [07:39<07:10,  3.73it/s]
 71%|███████   | 3833/5433 [07:39<04:56,  5.40it/s]
 71%|███████   | 3837/5433 [07:39<03:58,  6.70it/s]
 71%|███████   | 3844/5433 [07:40<02:36, 10.18it/s]
 71%|███████   | 3849/5433 [07:40<02:04, 12.76it/s]
 71%|███████   | 3854/5433 [07:40<01:38, 16.02it/s]
 71%|███████   | 3858/5433 [07:40<01:23, 18.85it/s]
 71%|███████   | 3862/5433 [07:40<01:29, 17.56it/s]
 71%|███████   | 3869/5433 [07:40<01:05, 23.92it/s]
 71%|███████▏  | 3874/5433 [07:41<01:01, 25.46it/s]
 71%|███████▏  | 3878/5433 [07:41<00:57, 26.90it/s]
 71%|███████▏  | 3883/5433 [07:41<00:53, 29.00it/s]
 72%|███████▏  | 3890/5433 [07:41<00:41, 36.91it/s]
 72%|███████▏  | 3897/5433 [07:41<00:36, 42.43it/s]
 72%|███████▏  | 3902/5433 [07:41<00:36, 41.85it/s]
 72%|███████▏  | 3909/5433 [07:41<00:32, 47.25it/s]
 72%|███████▏  | 3915/5433 [07:41<00:30, 49.07it/s]
 72%|███████▏  | 3921/5433 [07:42<00:31, 48.64it/s]
 72%|███████▏  | 3927/5433 [07:42<00:30, 49.08it/s]
 72%|███████▏  | 3934/5433 [07:42<00:28, 52.45it/s]
 73%|███████▎  | 3940/5433 [07:42<00:28, 53.18it/s]
 73%|███████▎  | 3949/5433 [07:42<00:24, 59.96it/s]
 73%|███████▎  | 3957/5433 [07:42<00:23, 64.15it/s]
 73%|███████▎  | 3964/5433 [07:42<00:22, 65.01it/s]
 73%|███████▎  | 3972/5433 [07:42<00:27, 52.27it/s]
 73%|███████▎  | 3978/5433 [07:43<00:29, 49.11it/s]
 73%|███████▎  | 3984/5433 [07:43<00:31, 46.05it/s]
 73%|███████▎  | 3990/5433 [07:43<00:30, 47.36it/s]
 74%|███████▎  | 3996/5433 [07:43<00:28, 49.90it/s]
 74%|███████▎  | 4004/5433 [07:43<00:24, 57.47it/s]
 74%|███████▍  | 4011/5433 [07:43<00:30, 46.41it/s]
 74%|███████▍  | 4018/5433 [07:43<00:31, 45.11it/s]
 74%|███████▍  | 4023/5433 [07:44<00:35, 39.49it/s]
 74%|███████▍  | 4028/5433 [07:44<00:34, 41.16it/s]
 74%|███████▍  | 4036/5433 [07:44<00:28, 48.37it/s]
 74%|███████▍  | 4046/5433 [07:44<00:23, 59.70it/s]
 75%|███████▍  | 4053/5433 [07:44<00:23, 59.51it/s]
 75%|███████▍  | 4060/5433 [07:44<00:24, 56.20it/s]
 75%|███████▍  | 4068/5433 [07:44<00:23, 59.31it/s]
 75%|███████▌  | 4075/5433 [07:45<00:25, 52.53it/s]
 75%|███████▌  | 4081/5433 [07:45<00:27, 49.22it/s]
 75%|███████▌  | 4087/5433 [07:45<00:30, 43.73it/s]
 75%|███████▌  | 4093/5433 [07:45<00:29, 45.00it/s]
 75%|███████▌  | 4100/5433 [07:45<00:26, 50.74it/s]
 76%|███████▌  | 4106/5433 [07:45<00:26, 50.69it/s]
 76%|███████▌  | 4116/5433 [07:45<00:21, 61.53it/s]
 76%|███████▌  | 4125/5433 [07:45<00:21, 59.78it/s]
 76%|███████▌  | 4133/5433 [07:46<00:20, 64.49it/s]
 76%|███████▌  | 4140/5433 [07:46<00:23, 55.19it/s]
 76%|███████▋  | 4148/5433 [07:46<00:21, 59.72it/s]
 77%|███████▋  | 4158/5433 [07:46<00:18, 69.44it/s]
 77%|███████▋  | 4166/5433 [07:46<00:17, 70.88it/s]
 77%|███████▋  | 4174/5433 [07:46<00:19, 65.47it/s]
 77%|███████▋  | 4181/5433 [07:46<00:22, 56.74it/s]
 77%|███████▋  | 4190/5433 [07:46<00:20, 61.51it/s]
 77%|███████▋  | 4197/5433 [07:47<00:22, 55.51it/s]
 77%|███████▋  | 4210/5433 [07:47<00:16, 72.12it/s]
 78%|███████▊  | 4218/5433 [07:47<00:20, 59.48it/s]
 78%|███████▊  | 4227/5433 [07:47<00:18, 65.72it/s]
 78%|███████▊  | 4235/5433 [07:47<00:20, 59.89it/s]
 78%|███████▊  | 4242/5433 [07:47<00:26, 45.36it/s]
 78%|███████▊  | 4248/5433 [07:48<00:24, 47.52it/s]
 78%|███████▊  | 4254/5433 [07:48<00:27, 43.17it/s]
 78%|███████▊  | 4259/5433 [07:48<00:33, 35.37it/s]
 78%|███████▊  | 4264/5433 [07:48<00:33, 35.36it/s]
 79%|███████▊  | 4268/5433 [07:48<00:37, 31.35it/s]
 79%|███████▊  | 4272/5433 [07:48<00:35, 32.59it/s]
 79%|███████▉  | 4279/5433 [07:49<00:30, 38.21it/s]
 79%|███████▉  | 4284/5433 [07:49<00:34, 33.64it/s]
 79%|███████▉  | 4292/5433 [07:49<00:30, 37.55it/s]
 79%|███████▉  | 4298/5433 [07:49<00:27, 41.38it/s]
 79%|███████▉  | 4305/5433 [07:49<00:23, 47.50it/s]
 79%|███████▉  | 4313/5433 [07:49<00:20, 55.16it/s]
 80%|███████▉  | 4320/5433 [07:49<00:23, 47.23it/s]
 80%|███████▉  | 4326/5433 [07:50<00:24, 45.09it/s]
 80%|███████▉  | 4331/5433 [07:50<00:32, 33.87it/s]
 80%|███████▉  | 4343/5433 [07:50<00:22, 48.69it/s]
 80%|████████  | 4349/5433 [07:50<00:23, 45.72it/s]
 80%|████████  | 4355/5433 [07:50<00:31, 33.95it/s]
 80%|████████  | 4360/5433 [07:51<00:30, 35.62it/s]
 80%|████████  | 4365/5433 [07:51<00:29, 35.89it/s]
 80%|████████  | 4370/5433 [07:51<00:27, 38.43it/s]
 81%|████████  | 4375/5433 [07:51<00:31, 33.74it/s]
 81%|████████  | 4379/5433 [07:51<00:46, 22.60it/s]
 81%|████████  | 4387/5433 [07:51<00:34, 30.43it/s]
 81%|████████  | 4392/5433 [07:52<00:31, 33.38it/s]
 81%|████████  | 4398/5433 [07:52<00:26, 38.60it/s]
 81%|████████  | 4403/5433 [07:52<00:27, 37.71it/s]
 81%|████████  | 4413/5433 [07:52<00:20, 50.59it/s]
 81%|████████▏ | 4419/5433 [07:52<00:21, 47.61it/s]
 81%|████████▏ | 4426/5433 [07:52<00:19, 51.46it/s]
 82%|████████▏ | 4445/5433 [07:52<00:11, 85.12it/s]
 82%|████████▏ | 4459/5433 [07:52<00:09, 99.31it/s]
 82%|████████▏ | 4472/5433 [07:52<00:08, 106.95it/s]
 83%|████████▎ | 4495/5433 [07:53<00:06, 137.18it/s]
 83%|████████▎ | 4512/5433 [07:53<00:06, 142.91it/s]
 83%|████████▎ | 4530/5433 [07:53<00:05, 152.96it/s]
 84%|████████▎ | 4546/5433 [07:53<00:05, 151.10it/s]
 84%|████████▍ | 4562/5433 [07:53<00:06, 130.09it/s]
 84%|████████▍ | 4576/5433 [07:53<00:08, 105.41it/s]
 84%|████████▍ | 4588/5433 [07:53<00:08, 98.34it/s] 
 85%|████████▍ | 4599/5433 [07:54<00:08, 93.46it/s]
 85%|████████▍ | 4599/5433 [09:29<00:08, 93.46it/s]
 85%|████████▍ | 4617/5433 [09:29<26:25,  1.94s/it]
 85%|████████▌ | 4624/5433 [09:29<21:49,  1.62s/it]
 85%|████████▌ | 4633/5433 [09:29<16:32,  1.24s/it]
 85%|████████▌ | 4645/5433 [09:30<11:16,  1.16it/s]
 86%|████████▌ | 4655/5433 [09:30<08:09,  1.59it/s]
 86%|████████▌ | 4673/5433 [09:30<04:44,  2.67it/s]
 86%|████████▌ | 4685/5433 [09:30<03:23,  3.68it/s]
 86%|████████▋ | 4697/5433 [09:30<02:25,  5.05it/s]
 87%|████████▋ | 4708/5433 [09:30<01:46,  6.78it/s]
 87%|████████▋ | 4723/5433 [09:30<01:10, 10.10it/s]
 87%|████████▋ | 4734/5433 [09:30<00:52, 13.32it/s]
 87%|████████▋ | 4745/5433 [09:31<00:40, 17.08it/s]
 88%|████████▊ | 4755/5433 [09:31<00:32, 20.56it/s]
 88%|████████▊ | 4767/5433 [09:31<00:24, 27.66it/s]
 88%|████████▊ | 4781/5433 [09:31<00:17, 37.09it/s]
 88%|████████▊ | 4792/5433 [09:31<00:14, 45.42it/s]
 88%|████████▊ | 4804/5433 [09:31<00:11, 55.66it/s]
 89%|████████▊ | 4815/5433 [09:31<00:10, 59.42it/s]
 89%|████████▉ | 4825/5433 [09:31<00:09, 66.46it/s]
 89%|████████▉ | 4835/5433 [09:32<00:08, 70.13it/s]
 89%|████████▉ | 4849/5433 [09:32<00:06, 84.52it/s]
 89%|████████▉ | 4860/5433 [09:32<00:07, 75.36it/s]
 90%|████████▉ | 4870/5433 [09:32<00:07, 75.42it/s]
 90%|████████▉ | 4879/5433 [09:32<00:08, 66.76it/s]
 90%|████████▉ | 4887/5433 [09:32<00:08, 67.83it/s]
 90%|█████████ | 4895/5433 [09:32<00:09, 57.12it/s]
 90%|█████████ | 4902/5433 [09:33<00:08, 59.23it/s]
 91%|█████████ | 4920/5433 [09:33<00:05, 86.32it/s]
 91%|█████████ | 4935/5433 [09:33<00:04, 101.41it/s]
 91%|█████████ | 4949/5433 [09:33<00:04, 111.05it/s]
 91%|█████████▏| 4962/5433 [09:33<00:04, 103.32it/s]
 92%|█████████▏| 4974/5433 [09:33<00:04, 104.42it/s]
 92%|█████████▏| 4987/5433 [09:33<00:04, 108.23it/s]
 92%|█████████▏| 4999/5433 [09:33<00:04, 87.09it/s] 
 92%|█████████▏| 5009/5433 [09:34<00:05, 75.87it/s]
 92%|█████████▏| 5018/5433 [09:34<00:05, 78.69it/s]
 93%|█████████▎| 5034/5433 [09:34<00:04, 91.86it/s]
 93%|█████████▎| 5045/5433 [09:34<00:04, 96.20it/s]
 93%|█████████▎| 5057/5433 [09:34<00:03, 95.26it/s]
 93%|█████████▎| 5067/5433 [09:34<00:04, 89.78it/s]
 93%|█████████▎| 5079/5433 [09:34<00:03, 96.40it/s]
 94%|█████████▎| 5093/5433 [09:34<00:03, 101.97it/s]
 94%|█████████▍| 5106/5433 [09:35<00:03, 108.26it/s]
 94%|█████████▍| 5118/5433 [09:35<00:02, 105.17it/s]
 94%|█████████▍| 5133/5433 [09:35<00:02, 110.29it/s]
 95%|█████████▍| 5146/5433 [09:35<00:02, 115.44it/s]
 95%|█████████▌| 5162/5433 [09:35<00:02, 122.80it/s]
 95%|█████████▌| 5185/5433 [09:35<00:01, 150.57it/s]
 96%|█████████▌| 5201/5433 [09:35<00:01, 141.41it/s]
 96%|█████████▌| 5216/5433 [09:36<00:02, 95.95it/s] 
 96%|█████████▌| 5228/5433 [09:36<00:02, 75.64it/s]
 96%|█████████▋| 5238/5433 [09:36<00:02, 68.75it/s]
 97%|█████████▋| 5247/5433 [09:36<00:02, 69.86it/s]
 97%|█████████▋| 5255/5433 [09:36<00:02, 64.34it/s]
 97%|█████████▋| 5263/5433 [09:37<00:03, 46.08it/s]
 97%|█████████▋| 5272/5433 [09:37<00:03, 50.40it/s]
 97%|█████████▋| 5278/5433 [09:37<00:03, 47.84it/s]
 97%|█████████▋| 5285/5433 [09:37<00:02, 51.99it/s]
 97%|█████████▋| 5291/5433 [09:37<00:02, 49.89it/s]
 98%|█████████▊| 5301/5433 [09:37<00:02, 58.07it/s]
 98%|█████████▊| 5319/5433 [09:37<00:01, 85.56it/s]
 98%|█████████▊| 5330/5433 [09:37<00:01, 90.45it/s]
 98%|█████████▊| 5349/5433 [09:38<00:00, 116.17it/s]
 99%|█████████▊| 5362/5433 [09:38<00:00, 119.77it/s]
 99%|█████████▉| 5375/5433 [09:38<00:00, 122.56it/s]
 99%|█████████▉| 5388/5433 [09:38<00:00, 123.08it/s]
 99%|█████████▉| 5403/5433 [09:38<00:00, 130.50it/s]
100%|█████████▉| 5428/5433 [09:38<00:00, 164.57it/s]
100%|██████████| 5433/5433 [09:38<00:00,  9.39it/s] 
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-27 13:25:56.484 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-27 13:26:01.378 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-27 13:26:11.670 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-27 13:26:15.351 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-27 13:26:20.724 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-27 13:27:29.642 | INFO     | __main__:retrieve_proof:279 - 52515
2024-05-27 13:27:29.669 | INFO     | prover.proof_search:__init__:422 - Launching 5 workers with 1 GPUs.
2024-05-27 13:27:34,925	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
2024-05-27 13:27:35.907 | INFO     | prover.proof_search:search_unordered:467 - before theorem search: 
(pid=3865913) [2024-05-27 13:27:40,721] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(pid=3865913)  [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
(pid=3865913)  [WARNING]  async_io: please install the libaio-dev package with apt
(pid=3865913)  [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
(pid=3865913)  [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
(pid=3865913)  [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
(pid=3865913)  [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
(GpuProver pid=3865913) Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt`
(GpuProver pid=3865913) 2024-05-27 13:27:42.429 | INFO     | generator.model:__init__:110 - Without retrieval
(GpuProver pid=3865913) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
(GpuProver pid=3865913)   warnings.warn(
(GpuProver pid=3865913) Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
(GpuProver pid=3865913) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters']
(GpuProver pid=3865913) 2024-05-27 13:27:45.105 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_one_conjunction')
(GpuProver pid=3865911) 2024-05-27 13:27:45.190 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Complex.lean'), full_name='abs_val')
(GpuProver pid=3865912) 2024-05-27 13:27:45.192 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_seven_existential')
(GpuProver pid=3865914) 2024-05-27 13:27:45.190 | INFO     | prover.proof_search:search:73 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Basic.lean'), full_name='foo')
(GpuProver pid=3865914) 2024-05-27 13:31:20.264 | INFO     | prover.proof_search:_best_first_search:155 - Found a proof!
(GpuProver pid=3865912) Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint kaiyuy_leandojo-lean4-retriever-tacgen-byt5-small/model_lightning.ckpt` [repeated 4x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)
(GpuProver pid=3865912) 2024-05-27 13:27:42.781 | INFO     | generator.model:__init__:110 - Without retrieval [repeated 4x across cluster]
(GpuProver pid=3865912) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`. [repeated 4x across cluster]
(GpuProver pid=3865912)   warnings.warn( [repeated 4x across cluster]
(GpuProver pid=3865912) Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained. [repeated 4x across cluster]
(GpuProver pid=3865912) /home/adarsh/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters'] [repeated 4x across cluster]
(GpuProver pid=3865914) 2024-05-27 13:31:58.753 | INFO     | prover.proof_search:search:122 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Basic.lean'), full_name='foo'), status=<Status.PROVED: 'Proved'>, proof=['rfl'], actor_time=2.0201275274157524, environment_time=0.0032870620489120483, total_time=2.023676590062678, num_total_nodes=2, num_searched_nodes=1)
(GpuProver pid=3865912) 2024-05-27 13:31:24.699 | INFO     | prover.proof_search:_best_first_search:155 - Found a proof! [repeated 2x across cluster]
(GpuProver pid=3865912) 2024-05-27 13:32:07.520 | INFO     | prover.proof_search:search:122 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_seven_existential'), status=<Status.PROVED: 'Proved'>, proof=['exact h₁.trans h₂'], actor_time=3.9622304290533066, environment_time=0.02221575193107128, total_time=3.9848156915977597, num_total_nodes=5, num_searched_nodes=1)
(GpuProver pid=3865913) 2024-05-27 13:32:07.698 | INFO     | prover.proof_search:search:122 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Logic.lean'), full_name='example_one_conjunction'), status=<Status.PROVED: 'Proved'>, proof=['tauto'], actor_time=3.9157893750816584, environment_time=0.026985290460288525, total_time=3.943243909627199, num_total_nodes=4, num_searched_nodes=1)
(GpuProver pid=3865911) 2024-05-27 13:41:42.634 | INFO     | prover.proof_search:_best_first_search:147 - Search timed out.
2024-05-27 13:42:37.818 | INFO     | prover.proof_search:search_unordered:474 - after theorem search: 
(GpuProver pid=3865911)2024-05-27 13:42:38.102 | INFO     | __main__:replace_sorry_with_proof:324 - Replacing sorries with 3 proofs!
 2024-05-27 13:42:37.815 | INFO     | prover.proof_search:search:122 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='279c3bc5c6d1e1b8810c99129d7d2c43c5469b54'), file_path=PosixPath('NewVersionTest/Complex.lean'), full_name='abs_val'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=122.60956065822393, environment_time=499.44656122941524, total_time=622.1679049367085, num_total_nodes=2653, num_searched_nodes=75)
[_LeanCopilotBot 61f1439] [LeanCopilotBot] `sorry` Removed by Lean Copilot
 2 files changed, 3 insertions(+), 3 deletions(-)
To https://github.com/Adarsh321123/new-version-test.git
   6aa6159..61f1439  _LeanCopilotBot -> _LeanCopilotBot
Branch '_LeanCopilotBot' set up to track remote branch '_LeanCopilotBot' from 'origin'.
Pull request created successfully: https://github.com/Adarsh321123/new-version-test/pull/2
(pid=3865914) [2024-05-27 13:27:40,814] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect) [repeated 4x across cluster]
(pid=3865914)  [WARNING]  async_io requires the dev libaio .so object and headers but these were not found. [repeated 4x across cluster]
(pid=3865914)  [WARNING]  async_io: please install the libaio-dev package with apt [repeated 4x across cluster]
(pid=3865914)  [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found. [repeated 4x across cluster]
(pid=3865914)  [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH [repeated 4x across cluster]
(pid=3865914)  [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3 [repeated 4x across cluster]
(pid=3865914)  [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible [repeated 4x across cluster]
Script executed from: /home/adarsh/ReProver
[2024-05-28 13:15:07,796] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Found 1 repositories
Processing Adarsh321123/new-version-test
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Already up to date.
Switched to branch '_LeanCopilotBot'
Already up to date.
2024-05-28 13:15:20.710 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-28 13:15:20.711 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc1
2024-05-28 13:15:20.711 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-28 13:15:20.711 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-28 13:15:20.711 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-28 13:15:20.841 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-28 13:15:20.841 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='3508f1f7d21f7c31ec7f472d0f5af026971661b8')
2024-05-28 13:15:20.842 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-version-test-3508f1f7d21f7c31ec7f472d0f5af026971661b8/new-version-test
2024-05-28 13:15:24,217	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

  0%|          | 0/916 [00:00<?, ?it/s]
  0%|          | 1/916 [00:01<26:27,  1.74s/it]
  2%|▏         | 14/916 [00:01<01:27, 10.36it/s]
  4%|▍         | 37/916 [00:02<00:33, 26.12it/s]
  5%|▍         | 45/916 [00:02<00:35, 24.52it/s]
  6%|▌         | 55/916 [00:03<00:37, 22.98it/s]
  7%|▋         | 64/916 [00:03<00:29, 29.22it/s]
  8%|▊         | 70/916 [00:03<00:38, 21.93it/s]
  8%|▊         | 76/916 [00:03<00:33, 25.01it/s]
  9%|▉         | 81/916 [00:04<00:51, 16.27it/s]
 10%|█         | 96/916 [00:04<00:29, 27.74it/s]
 12%|█▏        | 108/916 [00:05<00:37, 21.77it/s]
 13%|█▎        | 116/916 [00:05<00:30, 26.57it/s]
 14%|█▍        | 132/916 [00:05<00:19, 40.72it/s]
 17%|█▋        | 152/916 [00:05<00:12, 61.60it/s]
 18%|█▊        | 164/916 [00:06<00:25, 29.09it/s]
 19%|█▉        | 173/916 [00:06<00:22, 33.13it/s]
 20%|█▉        | 181/916 [00:07<00:38, 19.26it/s]
 21%|██        | 189/916 [00:08<00:32, 22.52it/s]
 22%|██▏       | 198/916 [00:08<00:26, 26.78it/s]
 22%|██▏       | 204/916 [00:09<00:54, 13.09it/s]
 23%|██▎       | 211/916 [00:09<00:42, 16.57it/s]
 24%|██▍       | 224/916 [00:09<00:26, 25.68it/s]
 26%|██▌       | 239/916 [00:09<00:17, 38.45it/s]
 28%|██▊       | 257/916 [00:09<00:11, 55.68it/s]
 29%|██▉       | 269/916 [00:11<00:33, 19.08it/s]
 31%|███       | 280/916 [00:11<00:26, 24.28it/s]
 32%|███▏      | 291/916 [00:11<00:20, 30.76it/s]
 33%|███▎      | 301/916 [00:11<00:16, 37.12it/s]
 34%|███▍      | 312/916 [00:12<00:13, 46.02it/s]
 35%|███▌      | 322/916 [00:12<00:11, 51.58it/s]
 36%|███▌      | 331/916 [00:14<00:44, 13.29it/s]
 37%|███▋      | 338/916 [00:14<00:37, 15.25it/s]
 38%|███▊      | 344/916 [00:14<00:32, 17.80it/s]
 39%|███▊      | 353/916 [00:14<00:23, 23.72it/s]
 40%|████      | 368/916 [00:14<00:14, 37.16it/s]
 41%|████      | 377/916 [00:17<00:52, 10.28it/s]
 43%|████▎     | 393/916 [00:17<00:32, 16.32it/s]
 44%|████▍     | 405/916 [00:17<00:23, 21.92it/s]
 46%|████▌     | 417/916 [00:17<00:17, 29.05it/s]
 47%|████▋     | 428/916 [00:17<00:13, 36.61it/s]
 48%|████▊     | 438/916 [00:18<00:10, 43.67it/s]
 50%|█████     | 458/916 [00:18<00:06, 65.83it/s]
 51%|█████▏    | 471/916 [00:18<00:06, 72.78it/s]
 53%|█████▎    | 484/916 [00:18<00:05, 80.63it/s]
 54%|█████▍    | 496/916 [00:22<00:39, 10.73it/s]
 55%|█████▌    | 505/916 [00:22<00:31, 13.19it/s]
 56%|█████▋    | 517/916 [00:22<00:22, 18.06it/s]
 57%|█████▋    | 526/916 [00:22<00:17, 22.15it/s]
 58%|█████▊    | 535/916 [00:22<00:14, 26.34it/s]
 59%|█████▉    | 545/916 [00:22<00:11, 33.50it/s]
 61%|██████▏   | 563/916 [00:22<00:07, 49.16it/s]
 63%|██████▎   | 573/916 [00:22<00:06, 52.46it/s]
 64%|██████▍   | 585/916 [00:26<00:35,  9.33it/s]
 65%|██████▌   | 597/916 [00:26<00:24, 12.77it/s]
 67%|██████▋   | 615/916 [00:26<00:14, 20.10it/s]
 69%|██████▉   | 632/916 [00:27<00:09, 28.48it/s]
 71%|███████▏  | 654/916 [00:27<00:06, 42.69it/s]
 73%|███████▎  | 673/916 [00:27<00:04, 56.62it/s]
 75%|███████▌  | 688/916 [00:27<00:03, 65.99it/s]
 77%|███████▋  | 702/916 [00:27<00:03, 65.77it/s]
 78%|███████▊  | 714/916 [00:27<00:03, 65.87it/s]
 79%|███████▉  | 725/916 [00:28<00:03, 61.55it/s]
 80%|████████  | 734/916 [00:33<00:25,  7.24it/s]
 81%|████████  | 741/916 [00:33<00:20,  8.60it/s]
 82%|████████▏ | 750/916 [00:33<00:14, 11.29it/s]
 83%|████████▎ | 757/916 [00:33<00:11, 13.85it/s]
 84%|████████▎ | 766/916 [00:33<00:08, 16.97it/s]
 84%|████████▍ | 772/916 [00:33<00:07, 19.95it/s]
 85%|████████▌ | 780/916 [00:34<00:05, 24.66it/s]
 86%|████████▌ | 789/916 [00:34<00:03, 31.94it/s]
 88%|████████▊ | 809/916 [00:34<00:01, 54.15it/s]
 89%|████████▉ | 819/916 [00:34<00:01, 51.09it/s]
 91%|█████████ | 835/916 [00:40<00:12,  6.61it/s]
 93%|█████████▎| 851/916 [00:40<00:06,  9.94it/s]
 95%|█████████▍| 869/916 [00:40<00:03, 15.05it/s]
 97%|█████████▋| 892/916 [00:40<00:01, 23.89it/s]
 99%|█████████▉| 907/916 [00:40<00:00, 30.54it/s]
100%|██████████| 916/916 [00:40<00:00, 22.39it/s]
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-28 13:17:01.503 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-28 13:17:06.448 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-28 13:17:16.820 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-28 13:17:20.522 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-28 13:17:25.913 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-28 13:17:44.049 | INFO     | __main__:retrieve_proof:279 - 1556
2024-05-28 13:17:44.051 | INFO     | prover.proof_search:__init__:425 - Launching 5 workers with 1 GPUs.
2024-05-28 13:17:46,169	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

-------------------------------------------------------------------------------
main.py 387 <module>
main()

main.py 376 main
proofs = retrieve_proof(lean_git_repo)

main.py 292 retrieve_proof
prover = DistributedProver(

proof_search.py 427 __init__
provers = [

proof_search.py 428 <listcomp>
GpuProver.options(num_gpus=num_gpus_per_worker).remote(

actor.py 830 remote
return actor_cls._remote(args=args, kwargs=kwargs, **updated_options)

auto_init_hook.py 21 auto_init_wrapper
return fn(*args, **kwargs)

tracing_helper.py 388 _invocation_actor_class_remote_span
return method(self, args, kwargs, *_args, **_kwargs)

actor.py 1038 _remote
worker.function_actor_manager.export_actor_class(

function_manager.py 482 export_actor_class
serialized_actor_class = pickle_dumps(

serialization.py 66 pickle_dumps
return pickle.dumps(obj)

cloudpickle.py 1479 dumps
cp.dump(obj)

cloudpickle.py 1245 dump
return super().dump(obj)

cloudpickle.py 931 _file_reduce
raise pickle.PicklingError(

_pickle.PicklingError:
Cannot pickle files that are not opened for reading: w
Script executed from: /home/adarsh/ReProver
[2024-05-29 13:15:06,420] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Found 1 repositories
Processing Adarsh321123/new-version-test
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
From https://github.com/Adarsh321123/new-version-test
 * branch            main       -> FETCH_HEAD
Already up to date.
Switched to branch '_LeanCopilotBot'
Already up to date.
2024-05-29 13:15:19.051 | INFO     | __main__:retrieve_proof:237 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-29 13:15:19.052 | INFO     | __main__:retrieve_proof:239 - lean version v: v4.8.0-rc1
2024-05-29 13:15:19.052 | INFO     | __main__:retrieve_proof:240 - is supported: True
2024-05-29 13:15:19.052 | INFO     | __main__:retrieve_proof:246 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-29 13:15:19.052 | INFO     | __main__:retrieve_proof:252 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-29 13:15:19.085 | INFO     | __main__:retrieve_proof:253 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-29 13:15:19.085 | INFO     | __main__:retrieve_proof:254 - repo: LeanGitRepo(url='https://github.com/Adarsh321123/new-version-test', commit='3508f1f7d21f7c31ec7f472d0f5af026971661b8')
2024-05-29 13:15:19.086 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/Adarsh321123-new-version-test-3508f1f7d21f7c31ec7f472d0f5af026971661b8/new-version-test
2024-05-29 13:15:21,293	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

  0%|          | 0/916 [00:00<?, ?it/s]
  0%|          | 1/916 [00:01<26:48,  1.76s/it]
  3%|▎         | 23/916 [00:01<00:52, 17.05it/s]
  4%|▍         | 37/916 [00:02<00:35, 24.61it/s]
  5%|▌         | 47/916 [00:02<00:34, 25.30it/s]
  6%|▌         | 54/916 [00:02<00:29, 29.38it/s]
  7%|▋         | 61/916 [00:03<00:37, 23.11it/s]
  7%|▋         | 66/916 [00:03<00:50, 16.75it/s]
  9%|▊         | 79/916 [00:03<00:31, 26.45it/s]
  9%|▉         | 85/916 [00:04<00:46, 18.05it/s]
 11%|█         | 101/916 [00:04<00:26, 30.29it/s]
 12%|█▏        | 113/916 [00:05<00:33, 23.95it/s]
 14%|█▍        | 131/916 [00:05<00:21, 36.90it/s]
 15%|█▌        | 140/916 [00:05<00:18, 42.54it/s]
 16%|█▋        | 150/916 [00:06<00:31, 24.19it/s]
 17%|█▋        | 157/916 [00:06<00:27, 27.50it/s]
 18%|█▊        | 168/916 [00:06<00:20, 36.10it/s]
 20%|█▉        | 181/916 [00:06<00:15, 48.19it/s]
 21%|██        | 191/916 [00:07<00:33, 21.71it/s]
 22%|██▏       | 198/916 [00:08<00:29, 23.98it/s]
 22%|██▏       | 204/916 [00:08<00:25, 27.42it/s]
 23%|██▎       | 215/916 [00:09<00:48, 14.32it/s]
 25%|██▍       | 225/916 [00:09<00:35, 19.63it/s]
 26%|██▌       | 235/916 [00:09<00:26, 26.15it/s]
 27%|██▋       | 244/916 [00:09<00:20, 32.40it/s]
 28%|██▊       | 259/916 [00:10<00:13, 47.22it/s]
 29%|██▉       | 269/916 [00:11<00:38, 16.85it/s]
 30%|███       | 276/916 [00:11<00:32, 19.87it/s]
 31%|███       | 285/916 [00:11<00:24, 25.41it/s]
 33%|███▎      | 299/916 [00:12<00:17, 36.25it/s]
 34%|███▎      | 309/916 [00:12<00:13, 43.50it/s]
 35%|███▍      | 318/916 [00:12<00:11, 50.04it/s]
 36%|███▌      | 332/916 [00:12<00:08, 64.97it/s]
 37%|███▋      | 342/916 [00:14<00:40, 14.04it/s]
 39%|███▊      | 354/916 [00:14<00:28, 19.57it/s]
 40%|███▉      | 363/916 [00:14<00:23, 23.58it/s]
 41%|████      | 371/916 [00:14<00:19, 27.72it/s]
 41%|████▏     | 379/916 [00:18<01:11,  7.47it/s]
 43%|████▎     | 391/916 [00:18<00:47, 11.12it/s]
 43%|████▎     | 398/916 [00:18<00:37, 13.74it/s]
 45%|████▍     | 410/916 [00:18<00:25, 20.13it/s]
 46%|████▌     | 422/916 [00:18<00:17, 28.05it/s]
 48%|████▊     | 441/916 [00:18<00:10, 44.48it/s]
 50%|████▉     | 454/916 [00:18<00:08, 53.39it/s]
 51%|█████     | 466/916 [00:19<00:07, 59.19it/s]
 53%|█████▎    | 482/916 [00:22<00:42, 10.31it/s]
 54%|█████▎    | 491/916 [00:23<00:33, 12.77it/s]
 54%|█████▍    | 499/916 [00:23<00:27, 15.26it/s]
 56%|█████▌    | 510/916 [00:23<00:19, 20.48it/s]
 57%|█████▋    | 518/916 [00:23<00:16, 24.59it/s]
 57%|█████▋    | 526/916 [00:23<00:13, 29.72it/s]
 59%|█████▊    | 536/916 [00:23<00:10, 37.97it/s]
 59%|█████▉    | 545/916 [00:23<00:08, 45.09it/s]
 61%|██████▏   | 562/916 [00:23<00:05, 65.59it/s]
 63%|██████▎   | 576/916 [00:23<00:04, 79.52it/s]
 64%|██████▍   | 588/916 [00:24<00:03, 84.69it/s]
 66%|██████▌   | 600/916 [00:28<00:33,  9.43it/s]
 67%|██████▋   | 617/916 [00:28<00:20, 14.44it/s]
 69%|██████▉   | 631/916 [00:28<00:14, 19.89it/s]
 71%|███████   | 646/916 [00:28<00:09, 27.39it/s]
 72%|███████▏  | 664/916 [00:28<00:06, 38.68it/s]
 75%|███████▍  | 686/916 [00:28<00:04, 55.36it/s]
 77%|███████▋  | 701/916 [00:28<00:03, 56.79it/s]
 78%|███████▊  | 714/916 [00:29<00:03, 63.29it/s]
 79%|███████▉  | 726/916 [00:29<00:03, 59.29it/s]
 80%|████████  | 736/916 [00:34<00:23,  7.63it/s]
 81%|████████  | 743/916 [00:34<00:19,  8.88it/s]
 82%|████████▏ | 749/916 [00:34<00:16, 10.05it/s]
 82%|████████▏ | 755/916 [00:35<00:13, 12.10it/s]
 83%|████████▎ | 763/916 [00:35<00:09, 15.90it/s]
 84%|████████▍ | 773/916 [00:35<00:06, 21.95it/s]
 85%|████████▌ | 780/916 [00:35<00:05, 26.53it/s]
 86%|████████▌ | 787/916 [00:35<00:04, 30.83it/s]
 87%|████████▋ | 794/916 [00:35<00:03, 36.03it/s]
 88%|████████▊ | 809/916 [00:35<00:02, 52.06it/s]
 90%|████████▉ | 822/916 [00:41<00:16,  5.58it/s]
 92%|█████████▏| 843/916 [00:41<00:07, 10.00it/s]
 94%|█████████▎| 858/916 [00:41<00:04, 14.20it/s]
 96%|█████████▌| 877/916 [00:42<00:01, 21.37it/s]
 97%|█████████▋| 891/916 [00:42<00:00, 27.91it/s]
100%|█████████▉| 915/916 [00:42<00:00, 43.38it/s]
100%|██████████| 916/916 [00:42<00:00, 21.68it/s]
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-29 13:16:59.572 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-29 13:17:04.368 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-29 13:17:14.775 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-29 13:17:18.478 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-29 13:17:23.856 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-29 13:17:41.956 | INFO     | __main__:retrieve_proof:279 - 1556
2024-05-29 13:17:41.958 | INFO     | prover.proof_search:__init__:426 - Launching 5 workers with 1 GPUs.
2024-05-29 13:17:44,141	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

-------------------------------------------------------------------------------
main.py 387 <module>
main()

main.py 376 main
proofs = retrieve_proof(lean_git_repo)

main.py 292 retrieve_proof
prover = DistributedProver(

proof_search.py 428 __init__
provers = [

proof_search.py 429 <listcomp>
GpuProver.options(num_gpus=num_gpus_per_worker).remote(

actor.py 830 remote
return actor_cls._remote(args=args, kwargs=kwargs, **updated_options)

auto_init_hook.py 21 auto_init_wrapper
return fn(*args, **kwargs)

tracing_helper.py 388 _invocation_actor_class_remote_span
return method(self, args, kwargs, *_args, **_kwargs)

actor.py 1038 _remote
worker.function_actor_manager.export_actor_class(

function_manager.py 482 export_actor_class
serialized_actor_class = pickle_dumps(

serialization.py 66 pickle_dumps
return pickle.dumps(obj)

cloudpickle.py 1479 dumps
cp.dump(obj)

cloudpickle.py 1245 dump
return super().dump(obj)

cloudpickle.py 931 _file_reduce
raise pickle.PicklingError(

_pickle.PicklingError:
Cannot pickle files that are not opened for reading: w



ATTEMPT 6



Script executed from: /home/adarsh/ReProver
[2024-05-30 09:28:05,986] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
 [WARNING]  async_io requires the dev libaio .so object and headers but these were not found.
 [WARNING]  async_io: please install the libaio-dev package with apt
 [WARNING]  If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
 [WARNING]  Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
 [WARNING]  sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.3
 [WARNING]  using untested triton version (2.3.0), only 1.0.0 is known to be compatible
Cloning https://github.com/lean-ja/tactic-cheatsheet.git
Repo name: lean-ja/tactic-cheatsheet
Cloning into 'lean-ja/tactic-cheatsheet'...
Cloning https://github.com/cedar-policy/cedar-spec.git
Repo name: cedar-policy/cedar-spec
Cloning into 'cedar-policy/cedar-spec'...
Failed to clone cedar-policy/cedar-spec because of Invalid Lean 4 version: cedar-lean/lean-toolchain
Cloning https://github.com/scholzhannah/Geometry.git
Repo name: scholzhannah/Geometry
Cloning into 'scholzhannah/Geometry'...
Cloning https://github.com/madvorak/vcsp.git
Repo name: madvorak/vcsp
Cloning into 'madvorak/vcsp'...
Cloning https://github.com/dwrensha/compfiles.git
Repo name: dwrensha/compfiles
Cloning into 'dwrensha/compfiles'...
Cloning https://github.com/VojtechStep/catalean.git
Repo name: VojtechStep/catalean
Cloning into 'VojtechStep/catalean'...
Found 5 repositories
Processing lean-ja/tactic-cheatsheet
From https://github.com/lean-ja/tactic-cheatsheet
 * branch            main       -> FETCH_HEAD
Already on 'main'
Your branch is up to date with 'origin/main'.
From https://github.com/lean-ja/tactic-cheatsheet
 * branch            main       -> FETCH_HEAD
Already up to date.
Switched to a new branch '_LeanCopilotBot'
2024-05-30 09:28:48.149 | INFO     | __main__:retrieve_proof:377 - lean toolchain version: {'content': 'leanprover/lean4:v4.8.0-rc1\n'}
2024-05-30 09:28:48.150 | INFO     | __main__:retrieve_proof:379 - lean version v: v4.8.0-rc1
2024-05-30 09:28:48.150 | INFO     | __main__:retrieve_proof:380 - is supported: True
2024-05-30 09:28:48.150 | INFO     | __main__:retrieve_proof:386 - lean path /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-30 09:28:48.150 | INFO     | __main__:retrieve_proof:392 - Switched to Lean toolchain at: /home/adarsh/.elan/toolchains/leanprover--lean4---4.8.0-rc1
2024-05-30 09:28:48.183 | INFO     | __main__:retrieve_proof:393 - lean --version: Lean (version 4.8.0-rc1, x86_64-unknown-linux-gnu, commit dcccfb73cb24, Release)

2024-05-30 09:28:48.183 | INFO     | __main__:retrieve_proof:394 - repo: LeanGitRepo(url='https://github.com/lean-ja/tactic-cheatsheet', commit='59ffd7d54e24ab9437653fb167c09937b2c7fd3c')
2024-05-30 09:28:48.314 | INFO     | lean_dojo.data_extraction.trace:get_traced_repo_path:79 - Tracing LeanGitRepo(url='https://github.com/lean-ja/tactic-cheatsheet', commit='59ffd7d54e24ab9437653fb167c09937b2c7fd3c')
2024-05-30 09:28:49.681 | INFO     | __main__:main:165 - Building tactic-cheatsheet
info: mdgen: cloning https://github.com/Seasawher/mdgen to '././.lake/packages/mdgen'
info: mathlib: cloning https://github.com/leanprover-community/mathlib4.git to '././.lake/packages/mathlib'
info: std: cloning https://github.com/leanprover/std4 to '././.lake/packages/std'
info: Qq: cloning https://github.com/leanprover-community/quote4 to '././.lake/packages/Qq'
info: aesop: cloning https://github.com/leanprover-community/aesop to '././.lake/packages/aesop'
info: proofwidgets: cloning https://github.com/leanprover-community/ProofWidgets4 to '././.lake/packages/proofwidgets'
info: Cli: cloning https://github.com/leanprover/lean4-cli to '././.lake/packages/Cli'
info: importGraph: cloning https://github.com/leanprover-community/import-graph.git to '././.lake/packages/importGraph'
[?/?] Computing build jobs
[1/2058] Fetching proofwidgets cloud release
[2/2058] Building Mathlib.Mathport.Rename
[3/2058] Building Mathlib.Init.Data.Nat.Notation
[4/2058] Building Std.CodeAction.Attr
[5/2058] Building Std.CodeAction.Basic
[6/2058] Building Std.Lean.Position
[7/2058] Building Std.CodeAction.Deprecated
[8/2058] Building Std.Tactic.Alias
[9/2058] Building Std.Data.Int.Order
[10/2058] Building Mathlib.Init.Data.Int.Basic
[11/2058] Building Std.Data.List.Init.Lemmas
[12/2058] Building Std.Data.List.Basic
[13/2058] Building Mathlib.Data.String.Defs
[14/2058] Building Mathlib.Data.Array.Defs
[15/2058] Building Mathlib.Util.MemoFix
[16/2058] Building Mathlib.Lean.Expr.ReplaceRec
[17/2058] Building Mathlib.Lean.EnvExtension
[18/2058] Building Std.Tactic.OpenPrivate
[19/2058] Building Mathlib.Lean.Meta.Simp
[20/2058] Building Std.Lean.NameMapAttribute
[21/2058] Building Std.Tactic.Lint.Basic
[22/2058] Building Std.Tactic.Lint.Misc
[23/2058] Building Std.Util.LibraryNote
[24/2058] Building Std.Tactic.Lint.Simp
[25/2058] Building Std.Tactic.Lint.TypeClass
[26/2058] Building Std.Tactic.Lint.Frontend
[27/2058] Building Std.Tactic.Lint
[28/2058] Building Std.Lean.Meta.Basic
[29/2058] Building Std.Tactic.Init
[30/2058] Building Std.Logic
[31/2058] Building Mathlib.Lean.Meta
[32/2058] Building Mathlib.Lean.Elab.Tactic.Basic
[33/2058] Building Mathlib.Tactic.Relation.Trans
[34/2058] Building Mathlib.Tactic.Eqns
[35/2058] Building Std.Lean.Expr
[36/2058] Building Mathlib.Tactic.Simps.NotationClass
[37/2058] Building Std.Data.Array.Match
[38/2058] Building Std.Data.String.Basic
[39/2058] Building Std.Lean.Name
[40/2058] Building Std.Data.Nat.Gcd
[41/2058] Building Std.Data.Int.DivMod
[42/2058] Building Std.Data.Rat.Basic
[43/2058] Building Mathlib.Lean.Expr.Basic
[44/2058] Building Mathlib.Tactic.Simps.Basic
[45/2058] Building Mathlib.Tactic.ToAdditive
[46/2058] Building Mathlib.Init.ZeroOne
[47/2058] Building Mathlib.Tactic.Lemma
[48/2058] Building Mathlib.Tactic.TypeStar
[49/2058] Building Mathlib.Util.AssertExists
[50/2058] Building Mathlib.Algebra.Group.Defs
[51/2058] Building Examples.Command.GuardMsgs
[52/2058] Building Examples.Command.CheckFailure
warning: ././././Examples/Command/CheckFailure.lean:6:15-6:26: failed to synthesize instance
  HAdd Nat String ?m.32
info: ././././Examples/Command/CheckFailure.lean:6:0-6:26: 1 + "hello" : ?m.32
warning: ././././Examples/Command/CheckFailure.lean:9:19-9:22: The rfl tactic failed. Possible reasons:
- The goal is not a reflexive relation (neither `=` nor a relation with a @[refl] lemma).
- The arguments of the relation are not equal.
Try using the reflexivitiy lemma for your relation explicitly, e.g. `exact Eq.rfl`.
⊢ 1 = 2
warning: ././././Examples/Command/CheckFailure.lean:12:19-12:32: tactic 'contradiction' failed
⊢ 1 + 4 = 5
[53/2058] Building Examples.Command.Find
[54/2058] Building Aesop.Check
[55/2058] Building Aesop.Nanos
[56/2058] Building Aesop.Util.UnionFind
[57/2058] Building Std.Data.List.Init.Attach
[58/2058] Building Std.Data.Array.Init.Lemmas
[59/2058] Building Std.Data.Array.Basic
[60/2058] Building Std.Data.Array.Merge
[61/2058] Building Aesop.Util.UnorderedArraySet
[62/2058] Building Std.Tactic.SeqFocus
[63/2058] Building Std.Classes.Order
[64/2058] Building Std.Data.UInt
[65/2058] Building Std.Data.Char
[66/2058] Building Std.Control.ForInStep.Basic
[67/2058] Building Std.Control.ForInStep.Lemmas
[68/2058] Building Std.Data.List.Lemmas
[69/2058] Building Std.Data.String.Lemmas
[70/2058] Building Std.Data.String
[71/2058] Building Std.Lean.Meta.Expr
[72/2058] Building Std.Lean.PersistentHashMap
[73/2058] Building Std.Lean.Meta.DiscrTree
[74/2058] Building Std.Lean.PersistentHashSet
[75/2058] Building Aesop.Util.Basic
[76/2058] Building Aesop.Rule.Name
[77/2058] Building Aesop.Tracing
[78/2058] Building Aesop.RulePattern
[79/2058] Building Aesop.Index.Basic
[80/2058] Building Aesop.Options.Public
[81/2058] Building Aesop.Options.Internal
[82/2058] Building Aesop.Options
[83/2058] Building Aesop.Percent
[84/2058] Building Aesop.Util.Tactic
[85/2058] Building Std.Lean.MonadBacktrack
[86/2058] Building Std.Lean.Meta.SavedState
[87/2058] Building Aesop.Util.EqualUpToIds
[88/2058] Building Std.Lean.Meta.Clear
[89/2058] Building Std.Lean.Meta.Inaccessible
[90/2058] Building Std.Lean.HashSet
[91/2058] Building Std.Tactic.PermuteGoals
[92/2058] Building Aesop.Script
[93/2058] Building Aesop.RuleTac.Basic
[94/2058] Building Aesop.Rule.Basic
[95/2058] Building Std.Lean.Meta.InstantiateMVars
[96/2058] Building Aesop.Index
[97/2058] Building Aesop.Rule
[98/2058] Building Aesop.RuleSet.Member
[99/2058] Building Aesop.RuleSet.Name
[100/2058] Building Aesop.RuleSet.Filter
[101/2058] Building Aesop.RuleSet
[102/2058] Building Aesop.Frontend.Extension.Init
[103/2058] Building Aesop.Frontend.Extension
[104/2058] Building Aesop.ElabM
[105/2058] Building Aesop.Frontend.Basic
[106/2058] Building Aesop.RuleTac.ElabRuleTerm
[107/2058] Building Aesop.Builder.Basic
[108/2058] Building Aesop.Builder.Apply
[109/2058] Building Aesop.RuleTac.Cases
[110/2058] Building Aesop.Builder.Cases
[111/2058] Building Aesop.Builder.Constructors
[112/2058] Building Aesop.Builder.NormSimp
[113/2058] Building Aesop.Builder.Tactic
[114/2058] Building Aesop.Builder.Default
[115/2058] Building Aesop.Builder.Forward
[116/2058] Building Aesop.Builder.Unfold
[117/2058] Building Aesop.Builder
[118/2058] Building Aesop.Frontend.RuleExpr
[119/2058] Building Aesop.Frontend.Attribute
[120/2058] Building Aesop.RuleTac.Apply
[121/2058] Building Std.Lean.Meta.UnusedNames
[122/2058] Building Std.Lean.Meta.AssertHypotheses
[123/2058] Building Aesop.RuleTac.Forward
[124/2058] Building Aesop.RuleTac.Preprocess
[125/2058] Building Aesop.RuleTac.Tactic
[126/2058] Building Aesop.RuleTac
[127/2058] Building Aesop.Search.Expansion.Basic
[128/2058] Building Aesop.Search.Expansion.Simp
[129/2058] Building Aesop.Constants
[130/2058] Building Aesop.Tree.UnsafeQueue
[131/2058] Building Aesop.Tree.Data
[132/2058] Building Aesop.Tree.Traversal
[133/2058] Building Aesop.Tree.RunMetaM
[134/2058] Building Aesop.Tree.TreeM
[135/2058] Building Aesop.Tree.AddRapp
[136/2058] Building Aesop.Tree.State
[137/2058] Building Aesop.Tree.Check
[138/2058] Building Aesop.Tree.Tracing
[139/2058] Building Aesop.Tree.ExtractProof
[140/2058] Building Aesop.Tree.ExtractScript
[141/2058] Building Aesop.Tree.Free
[142/2058] Building Aesop.Tree
[143/2058] Building Aesop.Search.Queue.Class
[144/2058] Building Aesop.Stats.Basic
[145/2058] Building Aesop.Search.SearchM
[146/2058] Building Aesop.Search.RuleSelection
[147/2058] Building Aesop.Search.Expansion.Norm
[148/2058] Building Aesop.Search.Expansion
[149/2058] Building Aesop.Exception
[150/2058] Building Aesop.Search.ExpandSafePrefix
[151/2058] Building Std.Data.BinomialHeap.Basic
[152/2058] Building Aesop.Search.Queue
[153/2058] Building Aesop.Search.Main
[154/2058] Building Aesop.BuiltinRules.Assumption
[155/2058] Building Aesop.BuiltinRules.ApplyHyps
[156/2058] Building Aesop.BuiltinRules.DestructProducts
[157/2058] Building Aesop.BuiltinRules.Ext
[158/2058] Building Aesop.BuiltinRules.Intros
[159/2058] Building Aesop.BuiltinRules.Split
[160/2058] Building Aesop.BuiltinRules.Subst
[161/2058] Building Aesop.Stats.Extension
[162/2058] Building Aesop.Stats.Report
[163/2058] Building Aesop.Frontend.Command
[164/2058] Building Aesop.Frontend.Tactic
[165/2058] Building Aesop.Frontend
[166/2058] Building Aesop.BuiltinRules
[167/2058] Building Aesop.Main
[168/2058] Building Aesop
[169/2058] Building Std.Classes.BEq
[170/2058] Building Std.Classes.Cast
[171/2058] Building Std.Classes.RatCast
[172/2058] Building Std.Classes.SatisfiesM
[173/2058] Building Std.CodeAction.Misc
[174/2058] Building Std.CodeAction
[175/2058] Building Std.Control.ForInStep
[176/2058] Building Std.Control.Lemmas
[177/2058] Building Std.Data.MLList.Basic
[178/2058] Building Std.Control.Nondet.Basic
[179/2058] Building Std.Util.ProofWanted
[180/2058] Building Std.Data.Array.Lemmas
[181/2058] Building Std.Data.Array.Monadic
[182/2058] Building Std.Data.Array
[183/2058] Building Std.Data.AssocList
[184/2058] Building Std.Data.BinomialHeap.Lemmas
[185/2058] Building Std.Data.BinomialHeap
[186/2058] Building Std.Data.BitVec.Lemmas
[187/2058] Building Std.Data.BitVec
[188/2058] Building Std.Data.Bool
[189/2058] Building Std.Data.ByteArray
[190/2058] Building Std.Data.DList
[191/2058] Building Std.Data.Fin.Basic
[192/2058] Building Std.Data.Fin.Lemmas
[193/2058] Building Std.Data.Fin
[194/2058] Building Std.Data.Nat.Basic
[195/2058] Building Std.Data.HashMap.Basic
[196/2058] Building Std.Data.HashMap.Lemmas
[197/2058] Building Std.Data.Nat.Lemmas
[198/2058] Building Std.Data.HashMap.WF
[199/2058] Building Std.Data.HashMap
[200/2058] Building Std.Data.Int.Lemmas
[201/2058] Building Std.Data.Int
[202/2058] Building Std.Data.LazyList
[203/2058] Building Std.Data.List.Count
[204/2058] Building Std.Data.List.Pairwise
[205/2058] Building Std.Data.List.Perm
[206/2058] Building Std.Data.List
[207/2058] Building Std.Data.MLList.Heartbeats
[208/2058] Building Std.Lean.System.IO
[209/2058] Building Std.Data.MLList.IO
[210/2058] Building Std.Data.MLList
[211/2058] Building Std.Data.Nat
[212/2058] Building Std.Data.Option.Lemmas
[213/2058] Building Std.Data.Option
[214/2058] Building Std.Data.PairingHeap
[215/2058] Building Std.Data.RBMap.Basic
[216/2058] Building Std.Data.RBMap.WF
[217/2058] Building Std.Data.RBMap.Alter
[218/2058] Building Std.Data.RBMap.Lemmas
[219/2058] Building Std.Data.RBMap
[220/2058] Building Std.Data.Range.Lemmas
[221/2058] Building Std.Data.Range
[222/2058] Building Std.Data.Rat.Lemmas
[223/2058] Building Std.Data.Rat
[224/2058] Building Std.Data.Sum.Basic
[225/2058] Building Std.Data.Sum.Lemmas
[226/2058] Building Std.Data.Sum
[227/2058] Building Std.Data.UnionFind.Basic
[228/2058] Building Std.Data.UnionFind.Lemmas
[229/2058] Building Std.Data.UnionFind
[230/2058] Building Std.Lean.TagAttribute
[231/2058] Building Std.Lean.AttributeExtra
[232/2058] Building Std.Lean.Delaborator
[233/2058] Building Std.Lean.Except
[234/2058] Building Std.Lean.Float
[235/2058] Building Std.Lean.HashMap
[236/2058] Building Std.Lean.IO.Process
[237/2058] Building Std.Lean.Json
[238/2058] Building Std.Lean.Meta.Simp
[239/2058] Building Std.Lean.NameMap
[240/2058] Building Std.Lean.SMap
[241/2058] Building Std.Lean.Syntax
[242/2058] Building Std.Lean.Util.EnvSearch
[243/2058] Building Std.Lean.Util.Path
[244/2058] Building Std.Tactic.Unreachable
[245/2058] Building Std.Linter.UnreachableTactic
[246/2058] Building Std.Linter.UnnecessarySeqFocus
[247/2058] Building Std.Linter
[248/2058] Building Std.Tactic.Basic
[249/2058] Building Std.Tactic.Case
[250/2058] Building Std.Tactic.Classical
[251/2058] Building Std.Tactic.Congr
[252/2058] Building Std.Tactic.Exact
[253/2058] Building Std.Tactic.Instances
[254/2058] Building Std.Tactic.NoMatch
[255/2058] Building Std.Tactic.PrintDependents
[256/2058] Building Std.Tactic.PrintPrefix
[257/2058] Building Std.Tactic.ShowUnused
[258/2058] Building Std.Tactic.SqueezeScope
[259/2058] Building Std.Tactic.Where
[260/2058] Building Std.Test.Internal.DummyLabelAttr
[261/2058] Building Std.Util.Cache
[262/2058] Building Std.Util.CheckTactic
[263/2058] Building Std.Util.ExtendedBinder
[264/2058] Building Std.Util.Pickle
[265/2058] Building Std.WF
[266/2058] Building Std
[267/2058] Building Mathlib.Tactic.PPWithUniv
[268/2058] Building Mathlib.Tactic.ExtendDoc
[269/2058] Building Mathlib.Tactic.Basic
[270/2058] Building Mathlib.Tactic.Attr.Register
[271/2058] Building Mathlib.Init.Function
[272/2058] Building Mathlib.Logic.Nonempty
[273/2058] Building Mathlib.Init.Set
[274/2058] Building Mathlib.Mathport.Attributes
[275/2058] Building Mathlib.Tactic.ProjectionNotation
[276/2058] Building Mathlib.Init.Logic
[277/2058] Building Mathlib.Init.Algebra.Classes
[278/2058] Building Mathlib.Logic.Basic
[279/2058] Building Mathlib.Logic.Function.Basic
[280/2058] Building Mathlib.Tactic.Cases
[281/2058] Building Mathlib.Tactic.SimpRw
[282/2058] Building Mathlib.Tactic.Core
[283/2058] Building Mathlib.Tactic.SplitIfs
[284/2058] Building Mathlib.Algebra.Group.Basic
[285/2058] Building Mathlib.Tactic.Inhabit
[286/2058] Building Mathlib.Data.Prod.Basic
[287/2058] Building Mathlib.Lean.Name
[288/2058] Building Mathlib.Tactic.MkIffOfInductiveProp
[289/2058] Building Mathlib.Data.Sum.Basic
[290/2058] Building Mathlib.Logic.IsEmpty
[291/2058] Building Mathlib.Logic.Unique
[292/2058] Building Mathlib.Tactic.Spread
[293/2058] Building Mathlib.Algebra.Group.Pi.Basic
[294/2058] Building Mathlib.Util.CompileInductive
[295/2058] Building Mathlib.Data.FunLike.Basic
[296/2058] Building Mathlib.Algebra.Group.Hom.Defs
[297/2058] Building Mathlib.Logic.Nontrivial.Defs
[298/2058] Building Mathlib.Algebra.GroupWithZero.Defs
[299/2058] Building Mathlib.Init.Data.Ordering.Basic
[300/2058] Building Mathlib.Init.Order.Defs
[301/2058] Building Mathlib.Algebra.NeZero
[302/2058] Building Mathlib.Algebra.GroupWithZero.NeZero
[303/2058] Building Mathlib.Data.FunLike.Embedding
[304/2058] Building Mathlib.Data.FunLike.Equiv
[305/2058] Building Mathlib.Init.Data.Quot
[306/2058] Building Mathlib.Logic.Relator
[307/2058] Building Mathlib.Lean.Elab.Term
[308/2058] Building Mathlib.Lean.PrettyPrinter.Delaborator
[309/2058] Building Mathlib.Util.WithWeakNamespace
[310/2058] Building Mathlib.Tactic.ScopedNS
[311/2058] Building Mathlib.Mathport.Notation
[312/2058] Building Mathlib.Data.Quot
[313/2058] Building Mathlib.Tactic.Coe
[314/2058] Building Mathlib.Init.Data.Bool.Lemmas
[315/2058] Building Mathlib.Tactic.Substs
[316/2058] Building Mathlib.Tactic.Conv
[317/2058] Building Mathlib.Logic.Equiv.Defs
[318/2058] Building Mathlib.Data.Subtype
[319/2058] Building Mathlib.Logic.Nontrivial.Basic
[320/2058] Building Mathlib.Algebra.Opposites
[321/2058] Building Mathlib.Data.Nat.Cast.Defs
[322/2058] Building Mathlib.Data.Int.Cast.Defs
[323/2058] Building Mathlib.Algebra.Ring.Defs
[324/2058] Building Mathlib.Algebra.Ring.Basic
[325/2058] Building Mathlib.Init.Order.LinearOrder
[326/2058] Building Mathlib.Lean.Meta.CongrTheorems
[327/2058] Building Mathlib.Tactic.Congr!
[328/2058] Building Mathlib.Tactic.Convert
[329/2058] Building Mathlib.Order.Notation
[330/2058] Building Mathlib.Order.Basic
[331/2058] Building Mathlib.Order.Synonym
[332/2058] Building Mathlib.Algebra.Group.OrderSynonym
[333/2058] Building Mathlib.Algebra.GroupWithZero.Basic
[334/2058] Building Mathlib.Algebra.Group.Semiconj.Defs
[335/2058] Building Mathlib.Init.Data.Nat.Basic
[336/2058] Building Mathlib.Init.Data.Nat.Lemmas
[337/2058] Building Mathlib.Tactic.GCongr.ForwardAttr
[338/2058] Building Mathlib.Tactic.GCongr.Core
[339/2058] Building Mathlib.Tactic.PushNeg
[340/2058] Building Mathlib.Data.Nat.Defs
[341/2058] Building Mathlib.Algebra.Group.Commute.Defs
[342/2058] Building Mathlib.Algebra.Group.Semiconj.Basic
[343/2058] Building Mathlib.Algebra.Group.Commute.Basic
[344/2058] Building Mathlib.Data.Int.Defs
[345/2058] Building Qq.ForLean.ReduceEval
[346/2058] Building Qq.ForLean.ToExpr
[347/2058] Building Qq.Typ
[348/2058] Building Qq.Macro
[349/2058] Building Qq.Delab
[350/2058] Building Qq.MetaM
[351/2058] Building Qq.ForLean.Do
[352/2058] Building Qq.SortLocalDecls
[353/2058] Building Qq.Match
[354/2058] Building Qq.AssertInstancesCommute
[355/2058] Building Qq
[356/2058] Building ImportGraph.RequiredModules
[357/2058] Building ImportGraph.Imports
[358/2058] Building Mathlib.Tactic.ApplyCongr
[359/2058] Building Mathlib.Lean.Meta.Basic
[360/2058] Building Mathlib.Tactic.ApplyAt
[361/2058] Building Mathlib.Tactic.ApplyWith
[362/2058] Building Mathlib.Tactic.ByContra
[363/2058] Building Mathlib.Tactic.CasesM
[364/2058] Building Mathlib.Tactic.Check
[365/2058] Building Mathlib.Util.Tactic
[366/2058] Building Mathlib.Tactic.Choose
[367/2058] Building Mathlib.Tactic.Clear!
[368/2058] Building Mathlib.Tactic.ClearExcept
[369/2058] Building Mathlib.Tactic.Clear_
[370/2058] Building Mathlib.Tactic.TermCongr
[371/2058] Building Mathlib.Tactic.Congrm
[372/2058] Building Mathlib.Tactic.Constructor
[373/2058] Building Mathlib.Tactic.Contrapose
[374/2058] Building Mathlib.Tactic.DefEqTransformations
[375/2058] Building Mathlib.Tactic.ToLevel
[376/2058] Building Mathlib.Tactic.DeriveToExpr
[377/2058] Building Mathlib.Tactic.Existsi
[378/2058] Building Mathlib.Tactic.ExtractGoal
[379/2058] Building Mathlib.Tactic.ExtractLets
[380/2058] Building Mathlib.Tactic.FailIfNoProgress
[381/2058] Building Mathlib.Tactic.Find
[382/2058] Building Mathlib.Tactic.GeneralizeProofs
[383/2058] Building Mathlib.Tactic.GuardGoalNums
[384/2058] Building Mathlib.Tactic.GuardHypNums
[385/2058] Building Mathlib.Tactic.HelpCmd
[386/2058] Building Mathlib.Tactic.HigherOrder
[387/2058] Building Mathlib.Tactic.Hint
[388/2058] Building Mathlib.Tactic.InferParam
[389/2058] Building Mathlib.Tactic.IrreducibleDef
[390/2058] Building Mathlib.Tactic.Lift
[391/2058] Building Mathlib.Tactic.Lint
[392/2058] Building Mathlib.Tactic.NthRewrite
[393/2058] Building Mathlib.Tactic.Observe
[394/2058] Building Mathlib.Tactic.Propose
[395/2058] Building Mathlib.Tactic.RSuffices
[396/2058] Building Mathlib.Tactic.Recover
[397/2058] Building Mathlib.Tactic.Relation.Rfl
[398/2058] Building Mathlib.Tactic.Rename
[399/2058] Building Mathlib.Tactic.RenameBVar
[400/2058] Building Mathlib.Tactic.Says
[401/2058] Building Mathlib.Tactic.Set
[402/2058] Building Mathlib.Tactic.SimpIntro
[403/2058] Building Mathlib.Tactic.SuccessIfFailWithMsg
[404/2058] Building Mathlib.Tactic.SudoSetOption
[405/2058] Building Mathlib.Tactic.SwapVar
[406/2058] Building Mathlib.Tactic.Tauto
[407/2058] Building Mathlib.Util.WhatsNew
[408/2058] Building Mathlib.Tactic.ToExpr
[409/2058] Building Mathlib.Tactic.Trace
[410/2058] Building Mathlib.Tactic.TypeCheck
[411/2058] Building Mathlib.Tactic.UnsetOption
[412/2058] Building Mathlib.Tactic.Use
[413/2058] Building Mathlib.Tactic.Variable
[414/2058] Building ProofWidgets.Compat
[415/2058] Building ProofWidgets.Component.Basic
[416/2058] Building ProofWidgets.Component.MakeEditLink
[417/2058] Building ProofWidgets.Util
[418/2058] Building ProofWidgets.Data.Html
[419/2058] Building ProofWidgets.Cancellable
[420/2058] Building ProofWidgets.Component.OfRpcMethod
[421/2058] Building Mathlib.Tactic.Widget.SelectInsertParamsClass
[422/2058] Building Mathlib.Tactic.Widget.SelectPanelUtils
[423/2058] Building Mathlib.Tactic.Widget.Calc
[424/2058] Building Mathlib.Tactic.Widget.Congrm
[425/2058] Building Mathlib.Tactic.Widget.Conv
[426/2058] Building Mathlib.Tactic.WLOG
[427/2058] Building Mathlib.Util.CountHeartbeats
[428/2058] Building Mathlib.Tactic.Common
[429/2058] Building Mathlib.Algebra.GroupPower.Basic
[430/2058] Building Mathlib.Tactic.Attr.Core
[431/2058] Building Mathlib.Tactic.Nontriviality.Core
[432/2058] Building Mathlib.Tactic.Nontriviality
[433/2058] Building Mathlib.Algebra.Group.Units
[434/2058] Building Mathlib.Algebra.GroupWithZero.Units.Basic
[435/2058] Building Mathlib.Algebra.CharZero.Defs
[436/2058] Building Mathlib.Data.Finite.Defs
[437/2058] Building Mathlib.Algebra.Group.TypeTags
[438/2058] Building Mathlib.Logic.Function.Conjugate
[439/2058] Building Mathlib.Logic.Function.Iterate
[440/2058] Building Mathlib.Init.Data.Int.Order
[441/2058] Building Mathlib.Order.Compare
[442/2058] Building Mathlib.Order.Max
[443/2058] Building Mathlib.Logic.Relation
[444/2058] Building Mathlib.Order.RelClasses
[445/2058] Building Mathlib.Order.Monotone.Basic
[446/2058] Building Mathlib.Algebra.Group.Int
[447/2058] Building Mathlib.Data.Int.Cast.Basic
[448/2058] Building Mathlib.Algebra.Ring.Int
[449/2058] Building Mathlib.Algebra.CovariantAndContravariant
[450/2058] Building Mathlib.Data.Bool.Basic
[451/2058] Building Mathlib.Order.ULift
[452/2058] Building Mathlib.Order.Lattice
[453/2058] Building Mathlib.Order.MinMax
[454/2058] Building Mathlib.Algebra.Order.Monoid.Lemmas
[455/2058] Building Mathlib.Order.BoundedOrder
[456/2058] Building Mathlib.Algebra.Order.Monoid.Defs
[457/2058] Building Mathlib.Algebra.Order.Monoid.OrderDual
[458/2058] Building Mathlib.Tactic.Monotonicity.Attr
[459/2058] Building Mathlib.Algebra.GroupPower.CovariantClass
[460/2058] Building Mathlib.Algebra.Group.Hom.Basic
[461/2058] Building Mathlib.Data.Option.Defs
[462/2058] Building Mathlib.Data.Sigma.Basic
[463/2058] Building Mathlib.Init.Data.Sigma.Basic
[464/2058] Building Mathlib.Logic.Equiv.Basic
[465/2058] Building Mathlib.Algebra.Group.Equiv.Basic
[466/2058] Building Mathlib.Algebra.Group.Units.Hom
[467/2058] Building Mathlib.Algebra.Group.Units.Equiv
[468/2058] Building Mathlib.Algebra.Order.Sub.Defs
[469/2058] Building Mathlib.Algebra.Order.Group.Defs
[470/2058] Building Mathlib.Control.EquivFunctor
[471/2058] Building Mathlib.Init.Control.Combinators
[472/2058] Building Mathlib.Data.Option.Basic
[473/2058] Building Mathlib.Logic.Equiv.Option
[474/2058] Building Mathlib.Data.Prod.PProd
[475/2058] Building Mathlib.Logic.Embedding.Basic
[476/2058] Building Mathlib.Order.RelIso.Basic
[477/2058] Building Mathlib.Order.Disjoint
[478/2058] Building Mathlib.Data.Option.NAry
[479/2058] Building Mathlib.Order.WithBot
[480/2058] Building Mathlib.Order.Hom.Basic
[481/2058] Building Mathlib.Algebra.Order.Group.OrderIso
[482/2058] Building Mathlib.Algebra.Order.Group.Lattice
[483/2058] Building Mathlib.Algebra.Order.Group.Abs
[484/2058] Building Mathlib.Algebra.Divisibility.Basic
[485/2058] Building Mathlib.Algebra.Order.Group.Int
[486/2058] Building Mathlib.Algebra.Order.Monoid.Canonical.Defs
[487/2058] Building Mathlib.Algebra.Order.Monoid.MinMax
[488/2058] Building Mathlib.Algebra.Order.ZeroLEOne
[489/2058] Building Mathlib.Algebra.Order.Monoid.NatCast
[490/2058] Building Mathlib.Algebra.Order.Ring.Lemmas
[491/2058] Building Mathlib.Algebra.Order.Ring.Defs
[492/2058] Building Mathlib.Algebra.Order.Ring.Int
[493/2058] Building Mathlib.Data.Rat.Init
[494/2058] Building Mathlib.Data.Rat.Defs
[495/2058] Building Mathlib.Algebra.Field.Defs
[496/2058] Building Mathlib.Algebra.Group.InjSurj
[497/2058] Building Mathlib.Algebra.Group.Opposite
[498/2058] Building Mathlib.Algebra.GroupWithZero.Hom
[499/2058] Building Mathlib.Algebra.Ring.Hom.Defs
[500/2058] Building Mathlib.Algebra.Ring.Opposite
[501/2058] Building Mathlib.Algebra.Order.Ring.CharZero
[502/2058] Building Mathlib.Algebra.GroupWithZero.InjSurj
[503/2058] Building Mathlib.Tactic.FBinop
[504/2058] Building Mathlib.Data.SProd
[505/2058] Building Mathlib.Data.Set.Defs
[506/2058] Building Mathlib.Order.PropInstances
[507/2058] Building Mathlib.Order.Heyting.Basic
[508/2058] Building Mathlib.Order.BooleanAlgebra
[509/2058] Building Mathlib.Order.SymmDiff
[510/2058] Building Mathlib.Util.Delaborators
[511/2058] Building Mathlib.Data.Set.Basic
[512/2058] Building Mathlib.Algebra.Ring.Hom.Basic
[513/2058] Building Mathlib.Algebra.Group.Semiconj.Units
[514/2058] Building Mathlib.Init.Classical
[515/2058] Building Mathlib.Algebra.GroupWithZero.Semiconj
[516/2058] Building Mathlib.Algebra.Group.Commute.Units
[517/2058] Building Mathlib.Algebra.GroupWithZero.Commute
[518/2058] Building Mathlib.Algebra.Ring.Semiconj
[519/2058] Building Mathlib.Algebra.Ring.InjSurj
[520/2058] Building Mathlib.Algebra.Ring.Units
[521/2058] Building Mathlib.Data.Bracket
[522/2058] Building Mathlib.Algebra.Ring.Commute
[523/2058] Building Mathlib.Data.Nat.Cast.Commute
[524/2058] Building Mathlib.Algebra.Group.Nat
[525/2058] Building Mathlib.Algebra.Ring.Nat
[526/2058] Building Mathlib.Data.Nat.Cast.Basic
[527/2058] Building Mathlib.Data.Nat.Cast.NeZero
[528/2058] Building Mathlib.Algebra.Order.Group.Nat
[529/2058] Building Mathlib.Algebra.Group.WithOne.Defs
[530/2058] Building Mathlib.Algebra.GroupWithZero.Units.Equiv
[531/2058] Building Mathlib.Algebra.GroupWithZero.WithZero
[532/2058] Building Mathlib.Algebra.Order.Monoid.Units
[533/2058] Building Mathlib.Algebra.Order.Group.Units
[534/2058] Building Mathlib.Algebra.Order.Monoid.Basic
[535/2058] Building Mathlib.Algebra.Order.Monoid.TypeTags
[536/2058] Building Mathlib.Algebra.Order.GroupWithZero.Canonical
[537/2058] Building Mathlib.Algebra.Order.Sub.Canonical
[538/2058] Building Mathlib.Algebra.Order.Ring.Canonical
[539/2058] Building Mathlib.Algebra.Order.Ring.Nat
[540/2058] Building Mathlib.Data.Nat.Cast.Order
[541/2058] Building Mathlib.Data.Int.Cast.Lemmas
[542/2058] Building Mathlib.Algebra.Field.Opposite
[543/2058] Building Mathlib.Algebra.Invertible.Defs
[544/2058] Building Mathlib.Algebra.Group.Prod
[545/2058] Building Mathlib.GroupTheory.GroupAction.Defs
[546/2058] Building Mathlib.GroupTheory.GroupAction.Opposite
[547/2058] Building Mathlib.Algebra.GroupPower.IterateHom
[548/2058] Building Mathlib.Data.Set.Subsingleton
[549/2058] Building Mathlib.Data.Set.Image
[550/2058] Building Mathlib.Data.Set.Prod
[551/2058] Building Mathlib.Data.Set.Function
[552/2058] Building Mathlib.Logic.Equiv.Set
[553/2058] Building Mathlib.GroupTheory.Perm.Basic
[554/2058] Building Mathlib.Algebra.Group.Aut
[555/2058] Building Mathlib.GroupTheory.GroupAction.Units
[556/2058] Building Mathlib.Algebra.GroupWithZero.Units.Lemmas
[557/2058] Building Mathlib.Algebra.Ring.Equiv
[558/2058] Building Mathlib.Algebra.Invertible.GroupWithZero
[559/2058] Building Mathlib.Algebra.Invertible.Basic
[560/2058] Building Mathlib.GroupTheory.GroupAction.Group
[561/2058] Building Mathlib.Algebra.GroupRingAction.Basic
[562/2058] Building Mathlib.Algebra.Ring.Aut
[563/2058] Building Mathlib.Algebra.Ring.CompTypeclasses
[564/2058] Building Mathlib.Algebra.Order.Group.InjSurj
[565/2058] Building Mathlib.Algebra.Order.Ring.InjSurj
[566/2058] Building Mathlib.Order.Interval.Set.Basic
[567/2058] Building Mathlib.Data.Set.NAry
[568/2058] Building Mathlib.Order.Directed
[569/2058] Building Mathlib.Order.Bounds.Basic
[570/2058] Building Mathlib.Order.WellFounded
[571/2058] Building Mathlib.Logic.Pairwise
[572/2058] Building Mathlib.Data.Bool.Set
[573/2058] Building Mathlib.Data.Nat.Set
[574/2058] Building Mathlib.Control.ULift
[575/2058] Building Mathlib.Data.ULift
[576/2058] Building Mathlib.Order.Hom.Set
[577/2058] Building Mathlib.Order.SetNotation
[578/2058] Building Mathlib.Order.CompleteLattice
[579/2058] Building Mathlib.Order.CompleteBooleanAlgebra
[580/2058] Building Mathlib.Order.GaloisConnection
[581/2058] Building Mathlib.Data.Set.Lattice
[582/2058] Building Mathlib.Order.ConditionallyCompleteLattice.Basic
[583/2058] Building Mathlib.Order.LatticeIntervals
[584/2058] Building Mathlib.Order.Interval.Set.Image
[585/2058] Building Mathlib.Order.Interval.Set.UnorderedInterval
[586/2058] Building Mathlib.Order.Interval.Set.OrderEmbedding
[587/2058] Building Mathlib.Data.Set.Pairwise.Basic
[588/2058] Building Mathlib.Order.Antichain
[589/2058] Building Mathlib.Order.Interval.Set.OrdConnected
[590/2058] Building Mathlib.Order.CompleteLatticeIntervals
[591/2058] Building Mathlib.Algebra.Order.Nonneg.Ring
[592/2058] Building Mathlib.Control.Basic
[593/2058] Building Mathlib.Control.Functor
[594/2058] Building Mathlib.Data.List.Defs
[595/2058] Building Mathlib.Init.Data.List.Basic
[596/2058] Building Mathlib.Data.List.GetD
[597/2058] Building Mathlib.Data.Nat.Bits
[598/2058] Building Mathlib.Data.Nat.Bitwise
[599/2058] Building Mathlib.Data.Nat.Size
[600/2058] Building Mathlib.Data.Int.Bitwise
[601/2058] Building Mathlib.Algebra.GroupPower.Hom
[602/2058] Building Mathlib.Algebra.Divisibility.Units
[603/2058] Building Mathlib.Algebra.GroupWithZero.Divisibility
[604/2058] Building Mathlib.Algebra.Ring.Divisibility.Basic
[605/2058] Building Mathlib.Algebra.GroupPower.Ring
[606/2058] Building Mathlib.Algebra.GroupPower.Order
[607/2058] Building Mathlib.Algebra.Order.Ring.Abs
[608/2058] Building Mathlib.Data.Int.Order.Lemmas
[609/2058] Building Mathlib.Data.Int.Lemmas
[610/2058] Building Mathlib.Data.Rat.Order
[611/2058] Building Mathlib.Data.NNRat.Defs
[612/2058] Building Mathlib.Algebra.Order.Field.Defs
[613/2058] Building Mathlib.Algebra.Order.Field.Canonical.Defs
[614/2058] Building Mathlib.Algebra.Field.Basic
[615/2058] Building Mathlib.Algebra.Order.Field.InjSurj
[616/2058] Building Mathlib.Algebra.Order.Nonneg.Field
[617/2058] Building Mathlib.Data.Rat.Field
[618/2058] Building Mathlib.Algebra.Regular.Basic
[619/2058] Building Mathlib.Algebra.Ring.Regular
[620/2058] Building Mathlib.Data.Int.Dvd.Basic
[621/2058] Building Mathlib.Data.Int.Div
[622/2058] Building Mathlib.Data.PNat.Defs
[623/2058] Building Mathlib.Data.Rat.Lemmas
[624/2058] Building Mathlib.Data.Rat.Cast.Defs
[625/2058] Building Mathlib.Tactic.SetLike
[626/2058] Building Mathlib.Data.SetLike.Basic
[627/2058] Building Mathlib.Algebra.Star.Basic
[628/2058] Building Mathlib.Order.Antisymmetrization
[629/2058] Building Mathlib.Order.Cover
[630/2058] Building Mathlib.Algebra.Function.Support
[631/2058] Building Mathlib.Data.Int.Cast.Field
[632/2058] Building Mathlib.Data.Int.CharZero
[633/2058] Building Mathlib.Data.Nat.Factorial.Basic
[634/2058] Building Mathlib.Tactic.NormNum.Result
[635/2058] Building Mathlib.Util.Qq
[636/2058] Building Mathlib.Tactic.NormNum.Core
[637/2058] Building Mathlib.Tactic.HaveI
[638/2058] Building Mathlib.Algebra.Invertible.Ring
[639/2058] Building Mathlib.Algebra.Order.Invertible
[640/2058] Building Mathlib.Tactic.Positivity.Core
[641/2058] Building Mathlib.Tactic.Positivity.Basic
[642/2058] Building Mathlib.Algebra.Order.Hom.Basic
[643/2058] Building Mathlib.Algebra.Order.AbsoluteValue
[644/2058] Building Mathlib.Order.Bounds.OrderIso
[645/2058] Building Mathlib.Algebra.Order.Field.Basic
[646/2058] Building Mathlib.Algebra.Order.Group.MinMax
[647/2058] Building Mathlib.Algebra.Group.Hom.Instances
[648/2058] Building Mathlib.Algebra.Group.Pi.Lemmas
[649/2058] Building Mathlib.Algebra.GroupWithZero.Pi
[650/2058] Building Mathlib.Algebra.Ring.Pi
[651/2058] Building Mathlib.GroupTheory.GroupAction.Pi
[652/2058] Building Mathlib.GroupTheory.GroupAction.Ring
[653/2058] Building Mathlib.Init.Align
[654/2058] Building Mathlib.Tactic.GCongr
[655/2058] Building Mathlib.Tactic.NormNum.Basic
[656/2058] Building Mathlib.Data.Rat.Cast.CharZero
[657/2058] Building Mathlib.Tactic.NormNum.Inv
[658/2058] Building Mathlib.Tactic.NormNum.Pow
[659/2058] Building Mathlib.Util.AtomM
[660/2058] Building Mathlib.Tactic.Ring.Basic
[661/2058] Building Mathlib.Tactic.TryThis
[662/2058] Building Mathlib.Tactic.Ring.RingNF
[663/2058] Building Mathlib.Algebra.Order.Positive.Ring
[664/2058] Building Mathlib.Data.PNat.Basic
[665/2058] Building Mathlib.Tactic.Ring.PNat
[666/2058] Building Mathlib.Tactic.Ring
[667/2058] Building Mathlib.Algebra.Order.CauSeq.Basic
[668/2058] Building Mathlib.Algebra.Order.CauSeq.Completion
[669/2058] Building Mathlib.Data.Real.Basic
[670/2058] Building Examples.Command.Synth
info: ././././Examples/Command/Synth.lean:12:0-12:6: 1⁻¹ : ℚ
info: ././././Examples/Command/Synth.lean:15:0-15:6: 1⁻¹ : ℝ
info: ././././Examples/Command/Synth.lean:44:0-44:14: instInvNat_examples
[671/2058] Building Examples.Command.Guard
info: ././././Examples/Command/Guard.lean:23:0-23:6: ∀ (α : Type) (l : List α), [] ⊆ l : Prop
info: ././././Examples/Command/Guard.lean:51:0-51:6: decide : (p : Prop) → [h : Decidable p] → Bool
[672/2058] Building Mathlib.Data.Rat.Cast.Lemmas
[673/2058] Building Mathlib.Tactic.NormNum.OfScientific
[674/2058] Building Mathlib.Tactic.NormNum.Eq
[675/2058] Building Mathlib.Algebra.Order.Monoid.WithTop
[676/2058] Building Mathlib.Tactic.NormNum.Ineq
[677/2058] Building Mathlib.Tactic.NormNum.DivMod
[678/2058] Building Mathlib.Data.Rat.Cast.Order
[679/2058] Building Mathlib.Tactic.NormNum
[680/2058] Building Mathlib.Tactic.Abel
[681/2058] Building Mathlib.Tactic.ApplyFun
[682/2058] Building Mathlib.Tactic.ArithMult.Init
[683/2058] Building Mathlib.Tactic.ArithMult
[684/2058] Building Mathlib.Tactic.CC.Datatypes
[685/2058] Building Mathlib.Tactic.CC.Lemmas
[686/2058] Building Mathlib.Data.Num.Basic
[687/2058] Building Mathlib.Data.Tree
[688/2058] Building Mathlib.Util.SynthesizeUsing
[689/2058] Building Mathlib.Tactic.CancelDenoms.Core
[690/2058] Building Mathlib.Tactic.CancelDenoms
[691/2058] Building Mathlib.CategoryTheory.Category.Init
[692/2058] Building Mathlib.Data.Opposite
[693/2058] Building Mathlib.Combinatorics.Quiver.Basic
[694/2058] Building Mathlib.CategoryTheory.Category.Basic
[695/2058] Building Mathlib.CategoryTheory.Functor.Basic
[696/2058] Building Mathlib.Util.AddRelatedDecl
[697/2058] Building Mathlib.Tactic.CategoryTheory.Reassoc
[698/2058] Building Mathlib.CategoryTheory.NatTrans
[699/2058] Building Mathlib.CategoryTheory.Iso
[700/2058] Building Mathlib.CategoryTheory.Functor.Category
[701/2058] Building Mathlib.CategoryTheory.NatIso
[702/2058] Building Mathlib.CategoryTheory.Bicategory.Basic
[703/2058] Building Mathlib.CategoryTheory.Bicategory.Functor
[704/2058] Building Mathlib.CategoryTheory.Bicategory.Free
[705/2058] Building Mathlib.Tactic.CategoryTheory.BicategoryCoherence
[706/2058] Building Mathlib.CategoryTheory.Functor.FullyFaithful
[707/2058] Building Mathlib.CategoryTheory.FullSubcategory
[708/2058] Building Mathlib.CategoryTheory.Whiskering
[709/2058] Building Mathlib.CategoryTheory.EssentialImage
[710/2058] Building Mathlib.Tactic.CategoryTheory.Slice
[711/2058] Building Mathlib.CategoryTheory.Equivalence
[712/2058] Building Mathlib.CategoryTheory.Opposites
[713/2058] Building Mathlib.CategoryTheory.EqToHom
[714/2058] Building Mathlib.CategoryTheory.Functor.Const
[715/2058] Building Mathlib.CategoryTheory.Products.Basic
[716/2058] Building Mathlib.CategoryTheory.Monoidal.Category
[717/2058] Building Mathlib.CategoryTheory.Adjunction.Basic
[718/2058] Building Mathlib.CategoryTheory.Monoidal.Functor
[719/2058] Building Mathlib.CategoryTheory.Monoidal.Free.Basic
[720/2058] Building Mathlib.Tactic.CategoryTheory.MonoidalComp
[721/2058] Building Mathlib.Tactic.CategoryTheory.Coherence
[722/2058] Building Mathlib.CategoryTheory.Pi.Basic
[723/2058] Building Mathlib.Logic.Lemmas
[724/2058] Building Mathlib.Combinatorics.Quiver.Path
[725/2058] Building Mathlib.Combinatorics.Quiver.Push
[726/2058] Building Mathlib.Combinatorics.Quiver.Symmetric
[727/2058] Building Mathlib.CategoryTheory.Groupoid
[728/2058] Building Mathlib.CategoryTheory.EpiMono
[729/2058] Building Mathlib.CategoryTheory.Types
[730/2058] Building Mathlib.CategoryTheory.Balanced
[731/2058] Building Mathlib.CategoryTheory.Comma.Basic
[732/2058] Building Mathlib.CategoryTheory.Comma.Arrow
[733/2058] Building Mathlib.CategoryTheory.CommSq
[734/2058] Building Mathlib.CategoryTheory.LiftingProperties.Basic
[735/2058] Building Mathlib.CategoryTheory.Limits.Shapes.StrongEpi
[736/2058] Building Mathlib.CategoryTheory.LiftingProperties.Adjunction
[737/2058] Building Mathlib.CategoryTheory.Functor.EpiMono
[738/2058] Building Mathlib.CategoryTheory.DiscreteCategory
[739/2058] Building Mathlib.CategoryTheory.Functor.Hom
[740/2058] Building Mathlib.CategoryTheory.Yoneda
[741/2058] Building Mathlib.CategoryTheory.Functor.ReflectsIso
[742/2058] Building Mathlib.CategoryTheory.Limits.Cones
[743/2058] Building Mathlib.CategoryTheory.Limits.IsLimit
[744/2058] Building Mathlib.CategoryTheory.Category.ULift
[745/2058] Building Mathlib.CategoryTheory.Category.Preorder
[746/2058] Building Mathlib.CategoryTheory.ConcreteCategory.Bundled
[747/2058] Building Mathlib.CategoryTheory.Bicategory.Strict
[748/2058] Building Mathlib.CategoryTheory.Category.Cat
[749/2058] Building Mathlib.CategoryTheory.IsomorphismClasses
[750/2058] Building Mathlib.CategoryTheory.Thin
[751/2058] Building Mathlib.CategoryTheory.Skeletal
[752/2058] Building Mathlib.Logic.Small.Defs
[753/2058] Building Mathlib.Logic.UnivLE
[754/2058] Building Mathlib.Logic.Small.Basic
[755/2058] Building Mathlib.CategoryTheory.EssentiallySmall
[756/2058] Building Mathlib.CategoryTheory.Limits.HasLimits
[757/2058] Building Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks
[758/2058] Building Mathlib.CategoryTheory.PUnit
[759/2058] Building Mathlib.CategoryTheory.PEmpty
[760/2058] Building Mathlib.CategoryTheory.Limits.Shapes.Terminal
[761/2058] Building Mathlib.Logic.Small.Set
[762/2058] Building Mathlib.CategoryTheory.Comma.StructuredArrow
[763/2058] Building Mathlib.CategoryTheory.Comma.Over
[764/2058] Building Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
[765/2058] Building Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
[766/2058] Building Mathlib.CategoryTheory.Limits.Preserves.Basic
[767/2058] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Pullbacks
[768/2058] Building Mathlib.CategoryTheory.Limits.Constructions.EpiMono
[769/2058] Building Mathlib.CategoryTheory.ConcreteCategory.Basic
[770/2058] Building Mathlib.Tactic.CategoryTheory.Elementwise
[771/2058] Building Mathlib.Tactic.Change
[772/2058] Building Mathlib.Tactic.Clean
[773/2058] Building Mathlib.GroupTheory.GroupAction.Prod
[774/2058] Building Mathlib.Algebra.SMulWithZero
[775/2058] Building Mathlib.Algebra.Group.Hom.End
[776/2058] Building Mathlib.Algebra.Module.Defs
[777/2058] Building Mathlib.Algebra.Function.Indicator
[778/2058] Building Mathlib.Algebra.Module.Basic
[779/2058] Building Mathlib.Algebra.Regular.SMul
[780/2058] Building Mathlib.Algebra.Module.Pi
[781/2058] Building Mathlib.GroupTheory.GroupAction.DomAct.Basic
[782/2058] Building Mathlib.Logic.Function.CompTypeclasses
[783/2058] Building Mathlib.Algebra.Group.Hom.CompTypeclasses
[784/2058] Building Mathlib.GroupTheory.GroupAction.Hom
[785/2058] Building Mathlib.Algebra.Module.LinearMap.Basic
[786/2058] Building Mathlib.Algebra.Group.Embedding
[787/2058] Building Mathlib.Data.Fin.Basic
[788/2058] Building Mathlib.Data.Finset.Attr
[789/2058] Building Mathlib.Init.Data.List.Instances
[790/2058] Building Mathlib.Init.Data.List.Lemmas
[791/2058] Building Mathlib.Data.List.Basic
[792/2058] Building Mathlib.Data.List.Forall2
[793/2058] Building Mathlib.Data.List.Lex
[794/2058] Building Mathlib.Data.List.Infix
[795/2058] Building Mathlib.Data.List.Chain
[796/2058] Building Mathlib.Data.List.Enum
[797/2058] Building Mathlib.Init.Data.Fin.Basic
[798/2058] Building Mathlib.Data.List.Nodup
[799/2058] Building Mathlib.Data.List.Pairwise
[800/2058] Building Mathlib.Data.List.Zip
[801/2058] Building Mathlib.Data.List.Range
[802/2058] Building Mathlib.Data.List.Count
[803/2058] Building Mathlib.Data.List.Dedup
[804/2058] Building Mathlib.Data.List.InsertNth
[805/2058] Building Mathlib.Data.List.Lattice
[806/2058] Building Mathlib.Data.List.Join
[807/2058] Building Mathlib.Data.List.Permutation
[808/2058] Building Mathlib.Data.List.Perm
[809/2058] Building Mathlib.Data.Set.List
[810/2058] Building Mathlib.Init.Quot
[811/2058] Building Mathlib.Data.Multiset.Basic
[812/2058] Building Mathlib.Data.Multiset.Range
[813/2058] Building Mathlib.Data.Multiset.Nodup
[814/2058] Building Mathlib.Data.Multiset.Dedup
[815/2058] Building Mathlib.Data.Multiset.FinsetOps
[816/2058] Building Mathlib.Data.Finset.Basic
[817/2058] Building Mathlib.Data.List.ProdSigma
[818/2058] Building Mathlib.Data.List.Rotate
[819/2058] Building Mathlib.Algebra.BigOperators.List.Basic
[820/2058] Building Mathlib.Algebra.BigOperators.Multiset.Basic
[821/2058] Building Mathlib.Data.Multiset.Bind
[822/2058] Building Mathlib.Data.Finset.Union
[823/2058] Building Mathlib.Data.Finset.Image
[824/2058] Building Mathlib.Data.Fin.OrderHom
[825/2058] Building Mathlib.Data.Fintype.Basic
[826/2058] Building Mathlib.Data.Finset.Piecewise
[827/2058] Building Mathlib.Data.Finset.Card
[828/2058] Building Mathlib.Data.Pi.Lex
[829/2058] Building Mathlib.Data.Fin.Tuple.Basic
[830/2058] Building Mathlib.Data.List.OfFn
[831/2058] Building Mathlib.Data.List.Sort
[832/2058] Building Mathlib.Data.List.Duplicate
[833/2058] Building Mathlib.Data.List.NodupEquivFin
[834/2058] Building Mathlib.Data.Fintype.Card
[835/2058] Building Mathlib.Data.Multiset.Fold
[836/2058] Building Mathlib.Data.Finset.Fold
[837/2058] Building Mathlib.Data.Finset.Option
[838/2058] Building Mathlib.Data.Multiset.Pi
[839/2058] Building Mathlib.Data.Finset.Pi
[840/2058] Building Mathlib.Data.Finset.Prod
[841/2058] Building Mathlib.Data.Multiset.Lattice
[842/2058] Building Mathlib.Order.Hom.Bounded
[843/2058] Building Mathlib.Order.Hom.Lattice
[844/2058] Building Mathlib.Data.Finset.Lattice
[845/2058] Building Mathlib.Data.Nat.Choose.Basic
[846/2058] Building Mathlib.Data.List.Sublists
[847/2058] Building Mathlib.Data.Multiset.Powerset
[848/2058] Building Mathlib.Data.Finset.Powerset
[849/2058] Building Mathlib.Data.Fintype.Powerset
[850/2058] Building Mathlib.Data.Fintype.Prod
[851/2058] Building Mathlib.Data.Set.Sigma
[852/2058] Building Mathlib.Data.Finset.Sigma
[853/2058] Building Mathlib.Data.Fintype.Sigma
[854/2058] Building Mathlib.Data.Multiset.Sum
[855/2058] Building Mathlib.Data.Finset.Sum
[856/2058] Building Mathlib.Logic.Embedding.Set
[857/2058] Building Mathlib.Data.Fintype.Sum
[858/2058] Building Mathlib.Data.Fintype.Pi
[859/2058] Building Mathlib.Data.Vector
[860/2058] Building Mathlib.Control.Applicative
[861/2058] Building Mathlib.Control.Traversable.Basic
[862/2058] Building Mathlib.Data.Vector.Basic
[863/2058] Building Mathlib.Data.Setoid.Basic
[864/2058] Building Mathlib.Data.Sym.Basic
[865/2058] Building Mathlib.Data.Fintype.Vector
[866/2058] Building Mathlib.Data.Finite.Basic
[867/2058] Building Mathlib.Lean.Expr.ExtraRecognizers
[868/2058] Building Mathlib.Data.Set.Functor
[869/2058] Building Mathlib.Data.Set.Finite
[870/2058] Building Mathlib.Data.Finset.Preimage
[871/2058] Building Mathlib.Algebra.BigOperators.Basic
[872/2058] Building Mathlib.Algebra.Algebra.Defs
[873/2058] Building Mathlib.Data.Nat.Cast.Field
[874/2058] Building Mathlib.Algebra.CharZero.Lemmas
[875/2058] Building Mathlib.Algebra.Module.LinearMap.End
[876/2058] Building Mathlib.Algebra.Module.Equiv
[877/2058] Building Mathlib.Data.Set.Pointwise.Basic
[878/2058] Building Mathlib.Data.Set.Pointwise.SMul
[879/2058] Building Mathlib.Algebra.Group.Conj
[880/2058] Building Mathlib.GroupTheory.Subsemigroup.Basic
[881/2058] Building Mathlib.GroupTheory.Subsemigroup.Operations
[882/2058] Building Mathlib.GroupTheory.Submonoid.Basic
[883/2058] Building Mathlib.GroupTheory.Submonoid.Operations
[884/2058] Building Mathlib.Order.ModularLattice
[885/2058] Building Mathlib.Order.Atoms
[886/2058] Building Mathlib.GroupTheory.Subgroup.Basic
[887/2058] Building Mathlib.GroupTheory.GroupAction.Basic
[888/2058] Building Mathlib.GroupTheory.GroupAction.SubMulAction
[889/2058] Building Mathlib.Algebra.FreeMonoid.Basic
[890/2058] Building Mathlib.Algebra.Group.Commute.Hom
[891/2058] Building Mathlib.Data.Finset.NoncommProd
[892/2058] Building Mathlib.GroupTheory.Submonoid.MulOpposite
[893/2058] Building Mathlib.GroupTheory.Submonoid.Membership
[894/2058] Building Mathlib.Algebra.Module.Submodule.Basic
[895/2058] Building Mathlib.Algebra.Parity
[896/2058] Building Mathlib.Algebra.Associated
[897/2058] Building Mathlib.Algebra.GCDMonoid.Basic
[898/2058] Building Mathlib.Algebra.PUnitInstances
[899/2058] Building Mathlib.Algebra.Module.Submodule.Lattice
[900/2058] Building Mathlib.Algebra.Module.Submodule.LinearMap
[901/2058] Building Mathlib.Algebra.Module.Submodule.Map
[902/2058] Building Mathlib.Algebra.Module.Submodule.Ker
[903/2058] Building Mathlib.Order.Hom.CompleteLattice
[904/2058] Building Mathlib.Algebra.Module.Submodule.RestrictScalars
[905/2058] Building Mathlib.Algebra.Group.ULift
[906/2058] Building Mathlib.Algebra.Ring.ULift
[907/2058] Building Mathlib.Algebra.Module.ULift
[908/2058] Building Mathlib.Data.Nat.Cast.Prod
[909/2058] Building Mathlib.Data.Int.Cast.Prod
[910/2058] Building Mathlib.Data.Prod.Lex
[911/2058] Building Mathlib.Algebra.Order.Monoid.Prod
[912/2058] Building Mathlib.Algebra.Order.Group.Prod
[913/2058] Building Mathlib.Algebra.Ring.Prod
[914/2058] Building Mathlib.Algebra.GroupRingAction.Subobjects
[915/2058] Building Mathlib.Algebra.Group.Center
[916/2058] Building Mathlib.GroupTheory.Subsemigroup.Center
[917/2058] Building Mathlib.Algebra.Group.Centralizer
[918/2058] Building Mathlib.GroupTheory.Subsemigroup.Centralizer
[919/2058] Building Mathlib.GroupTheory.Submonoid.Center
[920/2058] Building Mathlib.GroupTheory.Submonoid.Centralizer
[921/2058] Building Mathlib.GroupTheory.Subsemigroup.Membership
[922/2058] Building Mathlib.Algebra.Ring.Center
[923/2058] Building Mathlib.Algebra.Ring.Centralizer
[924/2058] Building Mathlib.RingTheory.NonUnitalSubsemiring.Basic
[925/2058] Building Mathlib.RingTheory.Subsemiring.Basic
[926/2058] Building Mathlib.RingTheory.Subring.Basic
[927/2058] Building Mathlib.Algebra.Algebra.Basic
[928/2058] Building Mathlib.Data.Finsupp.Defs
[929/2058] Building Mathlib.Data.Finsupp.Indicator
[930/2058] Building Mathlib.Algebra.BigOperators.Pi
[931/2058] Building Mathlib.Data.Nat.Units
[932/2058] Building Mathlib.Data.Int.Units
[933/2058] Building Mathlib.Algebra.BigOperators.List.Lemmas
[934/2058] Building Mathlib.Algebra.BigOperators.Multiset.Lemmas
[935/2058] Building Mathlib.Algebra.BigOperators.Ring
[936/2058] Building Mathlib.Algebra.Order.BigOperators.Group.List
[937/2058] Building Mathlib.Data.List.MinMax
[938/2058] Building Mathlib.Algebra.Order.BigOperators.Group.Multiset
[939/2058] Building Mathlib.Algebra.Order.BigOperators.Group.Finset
[940/2058] Building Mathlib.Algebra.Order.BigOperators.Ring.List
[941/2058] Building Mathlib.Algebra.Order.BigOperators.Ring.Multiset
[942/2058] Building Mathlib.Algebra.Order.BigOperators.Ring.Finset
[943/2058] Building Mathlib.Data.Fintype.Option
[944/2058] Building Mathlib.Algebra.BigOperators.Option
[945/2058] Building Mathlib.Data.Fintype.BigOperators
[946/2058] Building Mathlib.Order.Interval.Finset.Defs
[947/2058] Building Mathlib.Order.Interval.Finset.Basic
[948/2058] Building Mathlib.Order.Interval.Multiset
[949/2058] Building Mathlib.Algebra.Order.Interval.Set.Monoid
[950/2058] Building Mathlib.Algebra.Order.Interval.Finset
[951/2058] Building Mathlib.Data.Nat.Interval
[952/2058] Building Mathlib.Data.Fin.Interval
[953/2058] Building Mathlib.Data.Fintype.Fin
[954/2058] Building Mathlib.Data.List.FinRange
[955/2058] Building Mathlib.Data.Fin.VecNotation
[956/2058] Building Mathlib.Logic.Equiv.Fin
[957/2058] Building Mathlib.Algebra.BigOperators.Fin
[958/2058] Building Mathlib.Data.Finsupp.Fin
[959/2058] Building Mathlib.Algebra.BigOperators.Finsupp
[960/2058] Building Mathlib.Algebra.Algebra.Hom
[961/2058] Building Mathlib.Algebra.Algebra.Equiv
[962/2058] Building Mathlib.Algebra.Algebra.NonUnitalHom
[963/2058] Building Mathlib.GroupTheory.GroupAction.BigOperators
[964/2058] Building Mathlib.Algebra.Module.BigOperators
[965/2058] Building Mathlib.Data.Rat.BigOperators
[966/2058] Building Mathlib.Data.Finsupp.Basic
[967/2058] Building Mathlib.Data.DFinsupp.Basic
[968/2058] Building Mathlib.Data.Finsupp.ToDFinsupp
[969/2058] Building Mathlib.Order.RelIso.Set
[970/2058] Building Mathlib.Data.Multiset.Sort
[971/2058] Building Mathlib.Data.Finset.Sort
[972/2058] Building Mathlib.Data.Nat.Order.Lemmas
[973/2058] Building Mathlib.Data.Nat.Pairing
[974/2058] Building Mathlib.Logic.Equiv.Nat
[975/2058] Building Mathlib.Data.Countable.Defs
[976/2058] Building Mathlib.Logic.Encodable.Basic
[977/2058] Building Mathlib.Logic.Denumerable
[978/2058] Building Mathlib.Logic.Equiv.List
[979/2058] Building Mathlib.Data.DFinsupp.Encodable
[980/2058] Building Mathlib.Data.Finsupp.Encodable
[981/2058] Building Mathlib.Algebra.Module.Hom
[982/2058] Building Mathlib.Algebra.Module.Prod
[983/2058] Building Mathlib.Algebra.Module.Submodule.Range
[984/2058] Building Mathlib.LinearAlgebra.Basic
[985/2058] Building Mathlib.LinearAlgebra.Pi
[986/2058] Building Mathlib.Algebra.Ring.Idempotents
[987/2058] Building Mathlib.Order.ConditionallyCompleteLattice.Finset
[988/2058] Building Mathlib.Data.Nat.Lattice
[989/2058] Building Mathlib.Order.OrderIsoNat
[990/2058] Building Mathlib.Order.Closure
[991/2058] Building Mathlib.Order.Interval.Set.OrderIso
[992/2058] Building Mathlib.Order.UpperLower.Basic
[993/2058] Building Mathlib.Order.SupClosed
[994/2058] Building Mathlib.Data.Finset.Pairwise
[995/2058] Building Mathlib.Order.SupIndep
[996/2058] Building Mathlib.Order.Chain
[997/2058] Building Mathlib.Order.Zorn
[998/2058] Building Mathlib.Data.Finset.Order
[999/2058] Building Mathlib.Data.Finite.Set
[1000/2058] Building Mathlib.Data.List.TFAE
[1001/2058] Building Mathlib.Tactic.TFAE
[1002/2058] Building Mathlib.Order.CompactlyGenerated.Basic
[1003/2058] Building Mathlib.Control.Monad.Basic
[1004/2058] Building Mathlib.Data.Part
[1005/2058] Building Mathlib.Order.Hom.Order
[1006/2058] Building Mathlib.Order.OmegaCompletePartialOrder
[1007/2058] Building Mathlib.LinearAlgebra.Span
[1008/2058] Building Mathlib.Data.Countable.Basic
[1009/2058] Building Mathlib.Data.Set.Countable
[1010/2058] Building Mathlib.LinearAlgebra.Finsupp
[1011/2058] Building Mathlib.Algebra.MonoidAlgebra.Basic
[1012/2058] Building Mathlib.Data.Finset.NAry
[1013/2058] Building Mathlib.Data.Set.Pointwise.Finite
[1014/2058] Building Mathlib.Data.Set.Pointwise.ListOfFn
[1015/2058] Building Mathlib.Algebra.GroupWithZero.Power
[1016/2058] Building Mathlib.Data.Nat.GCD.Basic
[1017/2058] Building Mathlib.Data.Int.GCD
[1018/2058] Building Mathlib.Data.Nat.ModEq
[1019/2058] Building Mathlib.Data.ZMod.Defs
[1020/2058] Building Mathlib.Algebra.Order.Ring.Pow
[1021/2058] Building Mathlib.Algebra.Order.Field.Power
[1022/2058] Building Mathlib.Data.Int.LeastGreatest
[1023/2058] Building Mathlib.Algebra.Order.Interval.Set.Group
[1024/2058] Building Mathlib.Data.HashMap
[1025/2058] Building Mathlib.Tactic.Linarith.Lemmas
[1026/2058] Building Mathlib.Tactic.Linarith.Datatypes
[1027/2058] Building Mathlib.Tactic.Linarith.Elimination
[1028/2058] Building Mathlib.Tactic.Linarith.Parsing
[1029/2058] Building Mathlib.Tactic.Linarith.Verification
[1030/2058] Building Mathlib.Tactic.Zify
[1031/2058] Building Mathlib.Tactic.Linarith.Preprocessing
[1032/2058] Building Mathlib.Tactic.Linarith.Frontend
[1033/2058] Building Mathlib.Tactic.Linarith
[1034/2058] Building Mathlib.Tactic.Positivity
[1035/2058] Building Mathlib.Algebra.Order.Floor
[1036/2058] Building Mathlib.Algebra.EuclideanDomain.Defs
[1037/2058] Building Mathlib.Algebra.EuclideanDomain.Instances
[1038/2058] Building Mathlib.Util.DischargerAsTactic
[1039/2058] Building Mathlib.Tactic.FieldSimp
[1040/2058] Building Mathlib.Data.Rat.Floor
[1041/2058] Building Mathlib.Algebra.Order.Archimedean
[1042/2058] Building Mathlib.Algebra.Order.Group.Instances
[1043/2058] Building Mathlib.Algebra.Order.Hom.Monoid
[1044/2058] Building Mathlib.Algebra.Order.Hom.Ring
[1045/2058] Building Mathlib.Order.Iterate
[1046/2058] Building Mathlib.Order.SuccPred.Basic
[1047/2058] Building Mathlib.Data.Nat.SuccPred
[1048/2058] Building Mathlib.Algebra.Order.Sub.WithTop
[1049/2058] Building Mathlib.Algebra.Order.Ring.WithTop
[1050/2058] Building Mathlib.Data.ENat.Basic
[1051/2058] Building Mathlib.Order.SuccPred.Limit
[1052/2058] Building Mathlib.Order.SuccPred.CompleteLinearOrder
[1053/2058] Building Mathlib.Dynamics.FixedPoints.Basic
[1054/2058] Building Mathlib.Order.FixedPoints
[1055/2058] Building Mathlib.SetTheory.Cardinal.SchroederBernstein
[1056/2058] Building Mathlib.SetTheory.Cardinal.Basic
[1057/2058] Building Mathlib.SetTheory.Cardinal.ENat
[1058/2058] Building Mathlib.SetTheory.Cardinal.ToNat
[1059/2058] Building Mathlib.Data.ENat.Lattice
[1060/2058] Building Mathlib.Data.Nat.PartENat
[1061/2058] Building Mathlib.SetTheory.Cardinal.PartENat
[1062/2058] Building Mathlib.SetTheory.Cardinal.Finite
[1063/2058] Building Mathlib.Data.Finset.Pointwise
[1064/2058] Building Mathlib.Algebra.MonoidAlgebra.Support
[1065/2058] Building Mathlib.Algebra.MonoidAlgebra.Degree
[1066/2058] Building Mathlib.Algebra.Polynomial.Basic
[1067/2058] Building Mathlib.Algebra.BigOperators.Intervals
[1068/2058] Building Mathlib.Data.Finset.Antidiagonal
[1069/2058] Building Mathlib.Data.List.NatAntidiagonal
[1070/2058] Building Mathlib.Data.Multiset.NatAntidiagonal
[1071/2058] Building Mathlib.Data.Finset.NatAntidiagonal
[1072/2058] Building Mathlib.Algebra.BigOperators.NatAntidiagonal
[1073/2058] Building Mathlib.Data.Nat.Choose.Sum
[1074/2058] Building Mathlib.Algebra.Polynomial.Coeff
[1075/2058] Building Mathlib.Algebra.Polynomial.Monomial
[1076/2058] Building Mathlib.Data.Nat.WithBot
[1077/2058] Building Mathlib.Data.Nat.Cast.WithTop
[1078/2058] Building Mathlib.Algebra.Polynomial.Degree.Definitions
[1079/2058] Building Mathlib.Tactic.FinCases
[1080/2058] Building Mathlib.Algebra.Field.IsField
[1081/2058] Building Mathlib.RingTheory.Ideal.Basic
[1082/2058] Building Mathlib.Algebra.Polynomial.Induction
[1083/2058] Building Mathlib.Algebra.Polynomial.Eval
[1084/2058] Building Mathlib.Algebra.Polynomial.Degree.Lemmas
[1085/2058] Building Mathlib.Tactic.ComputeDegree
[1086/2058] Building Mathlib.Tactic.Continuity.Init
[1087/2058] Building Mathlib.Tactic.Continuity
[1088/2058] Building Mathlib.Tactic.ProxyType
[1089/2058] Building Mathlib.Tactic.DeriveFintype
[1090/2058] Building Mathlib.Control.Traversable.Lemmas
[1091/2058] Building Mathlib.Tactic.DeriveTraversable
[1092/2058] Building Mathlib.Tactic.Eval
[1093/2058] Building Mathlib.Tactic.Explode.Datatypes
[1094/2058] Building Mathlib.Tactic.Explode.Pretty
[1095/2058] Building Mathlib.Tactic.Explode
[1096/2058] Building Mathlib.Tactic.FunProp.Decl
[1097/2058] Building Mathlib.Tactic.FunProp.ToStd
[1098/2058] Building Mathlib.Tactic.FunProp.Mor
[1099/2058] Building Mathlib.Tactic.FunProp.FunctionData
[1100/2058] Building Mathlib.Tactic.FunProp.Types
[1101/2058] Building Mathlib.Tactic.FunProp.StateList
[1102/2058] Building Mathlib.Tactic.FunProp.RefinedDiscrTree
[1103/2058] Building Mathlib.Tactic.FunProp.Theorems
[1104/2058] Building Mathlib.Tactic.FunProp.Attr
[1105/2058] Building Mathlib.Tactic.FunProp.Core
[1106/2058] Building Mathlib.Tactic.FunProp.Elab
[1107/2058] Building Mathlib.Tactic.FunProp
[1108/2058] Building Mathlib.Data.Nat.Parity
[1109/2058] Building Mathlib.Algebra.GeomSum
[1110/2058] Building Mathlib.Order.Interval.Set.Disjoint
[1111/2058] Building Mathlib.Order.Filter.Basic
[1112/2058] Building Mathlib.Order.Filter.Prod
[1113/2058] Building Mathlib.Order.Filter.Ker
[1114/2058] Building Mathlib.Order.Filter.Bases
[1115/2058] Building Mathlib.Order.Filter.AtTopBot
[1116/2058] Building Mathlib.Order.Filter.Archimedean
[1117/2058] Building Mathlib.LinearAlgebra.BilinearMap
[1118/2058] Building Mathlib.Algebra.Module.Submodule.Bilinear
[1119/2058] Building Mathlib.GroupTheory.Congruence
[1120/2058] Building Mathlib.Tactic.SuppressCompilation
[1121/2058] Building Mathlib.LinearAlgebra.TensorProduct.Basic
[1122/2058] Building Mathlib.Algebra.Algebra.Bilinear
[1123/2058] Building Mathlib.Algebra.Module.Opposites
[1124/2058] Building Mathlib.Algebra.Algebra.Opposite
[1125/2058] Building Mathlib.Algebra.GroupWithZero.NonZeroDivisors
[1126/2058] Building Mathlib.GroupTheory.Subgroup.MulOpposite
[1127/2058] Building Mathlib.Init.Data.Sigma.Lex
[1128/2058] Building Mathlib.Data.Sigma.Lex
[1129/2058] Building Mathlib.Order.WellFoundedSet
[1130/2058] Building Mathlib.GroupTheory.Submonoid.Pointwise
[1131/2058] Building Mathlib.GroupTheory.Subgroup.Center
[1132/2058] Building Mathlib.GroupTheory.Subgroup.Centralizer
[1133/2058] Building Mathlib.GroupTheory.Subgroup.ZPowers
[1134/2058] Building Mathlib.GroupTheory.GroupAction.ConjAct
[1135/2058] Building Mathlib.GroupTheory.Subgroup.Pointwise
[1136/2058] Building Mathlib.Algebra.Order.Group.Action
[1137/2058] Building Mathlib.Algebra.Module.Submodule.Pointwise
[1138/2058] Building Mathlib.Algebra.Order.Kleene
[1139/2058] Building Mathlib.Data.Set.Pointwise.BigOperators
[1140/2058] Building Mathlib.Data.Set.Semiring
[1141/2058] Building Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise
[1142/2058] Building Mathlib.Algebra.Algebra.Operations
[1143/2058] Building Mathlib.Algebra.Algebra.Subalgebra.Basic
[1144/2058] Building Mathlib.Data.Fintype.Units
[1145/2058] Building Mathlib.Algebra.Group.ConjFinite
[1146/2058] Building Mathlib.Data.Fintype.List
[1147/2058] Building Mathlib.Data.List.Cycle
[1148/2058] Building Mathlib.Data.Nat.Prime
[1149/2058] Building Mathlib.Dynamics.PeriodicPts
[1150/2058] Building Mathlib.Algebra.Group.Commutator
[1151/2058] Building Mathlib.GroupTheory.Subgroup.Finite
[1152/2058] Building Mathlib.Tactic.Group
[1153/2058] Building Mathlib.GroupTheory.Commutator
[1154/2058] Building Mathlib.Algebra.Quotient
[1155/2058] Building Mathlib.GroupTheory.Subgroup.Actions
[1156/2058] Building Mathlib.GroupTheory.Coset
[1157/2058] Building Mathlib.GroupTheory.GroupAction.Quotient
[1158/2058] Building Mathlib.GroupTheory.QuotientGroup
[1159/2058] Building Mathlib.Algebra.Function.Finite
[1160/2058] Building Mathlib.Algebra.BigOperators.Finprod
[1161/2058] Building Mathlib.Order.Filter.NAry
[1162/2058] Building Mathlib.Order.Filter.Pi
[1163/2058] Building Mathlib.Order.Filter.Cofinite
[1164/2058] Building Mathlib.Order.ZornAtoms
[1165/2058] Building Mathlib.Order.Filter.Ultrafilter
[1166/2058] Building Mathlib.Order.Filter.Pointwise
[1167/2058] Building Mathlib.Algebra.AddTorsor
[1168/2058] Building Mathlib.Order.Filter.Lift
[1169/2058] Building Mathlib.Topology.Defs.Basic
[1170/2058] Building Mathlib.Topology.Defs.Filter
[1171/2058] Building Mathlib.Topology.Basic
[1172/2058] Building Mathlib.Topology.Defs.Induced
[1173/2058] Building Mathlib.Topology.Order
[1174/2058] Building Mathlib.Topology.Maps
[1175/2058] Building Mathlib.Topology.NhdsSet
[1176/2058] Building Mathlib.Topology.Constructions
[1177/2058] Building Mathlib.Topology.ContinuousOn
[1178/2058] Building Mathlib.Topology.Bases
[1179/2058] Building Mathlib.Data.Set.Accumulate
[1180/2058] Building Mathlib.Topology.Bornology.Basic
[1181/2058] Building Mathlib.Order.Filter.SmallSets
[1182/2058] Building Mathlib.Topology.LocallyFinite
[1183/2058] Building Mathlib.Topology.Compactness.Compact
[1184/2058] Building Mathlib.Topology.Compactness.LocallyCompact
[1185/2058] Building Mathlib.Topology.Compactness.SigmaCompact
[1186/2058] Building Mathlib.Order.SuccPred.Relation
[1187/2058] Building Mathlib.Data.Set.BoolIndicator
[1188/2058] Building Mathlib.Topology.Clopen
[1189/2058] Building Mathlib.Order.Minimal
[1190/2058] Building Mathlib.Topology.Irreducible
[1191/2058] Building Mathlib.Topology.Connected.Basic
[1192/2058] Building Mathlib.Topology.Connected.TotallyDisconnected
[1193/2058] Building Mathlib.Topology.Inseparable
[1194/2058] Building Mathlib.Topology.Separation
[1195/2058] Building Mathlib.Topology.DenseEmbedding
[1196/2058] Building Mathlib.Topology.Support
[1197/2058] Building Mathlib.Topology.Connected.LocallyConnected
[1198/2058] Building Mathlib.Topology.Homeomorph
[1199/2058] Building Mathlib.Topology.Algebra.Constructions
[1200/2058] Building Mathlib.Topology.Algebra.ConstMulAction
[1201/2058] Building Mathlib.Topology.Algebra.MulAction
[1202/2058] Building Mathlib.Data.Set.UnionLift
[1203/2058] Building Mathlib.Topology.ContinuousFunction.Basic
[1204/2058] Building Mathlib.Topology.Algebra.Monoid
[1205/2058] Building Mathlib.Topology.Algebra.Group.Basic
[1206/2058] Building Mathlib.Topology.Algebra.Ring.Basic
[1207/2058] Building Mathlib.Tactic.Monotonicity.Basic
[1208/2058] Building Mathlib.Tactic.Monotonicity.Lemmas
[1209/2058] Building Mathlib.Tactic.Monotonicity
[1210/2058] Building Mathlib.Topology.UniformSpace.Basic
[1211/2058] Building Mathlib.Topology.UniformSpace.Cauchy
[1212/2058] Building Mathlib.Topology.UniformSpace.UniformConvergence
[1213/2058] Building Mathlib.Topology.UniformSpace.Separation
[1214/2058] Building Mathlib.Topology.UniformSpace.UniformEmbedding
[1215/2058] Building Mathlib.Topology.UniformSpace.CompleteSeparated
[1216/2058] Building Mathlib.Topology.UniformSpace.Pi
[1217/2058] Building Mathlib.Topology.UniformSpace.Equiv
[1218/2058] Building Mathlib.Topology.UniformSpace.UniformConvergenceTopology
[1219/2058] Building Mathlib.Topology.UniformSpace.Equicontinuity
[1220/2058] Building Mathlib.Topology.UniformSpace.Compact
[1221/2058] Building Mathlib.Topology.DiscreteSubset
[1222/2058] Building Mathlib.Topology.Algebra.UniformGroup
[1223/2058] Building Mathlib.LinearAlgebra.Quotient
[1224/2058] Building Mathlib.Algebra.Algebra.Prod
[1225/2058] Building Mathlib.Order.PartialSups
[1226/2058] Building Mathlib.LinearAlgebra.Prod
[1227/2058] Building Mathlib.LinearAlgebra.Projection
[1228/2058] Building Mathlib.Topology.Algebra.Module.Basic
[1229/2058] Building Mathlib.Algebra.Algebra.Subalgebra.Prod
[1230/2058] Building Mathlib.Algebra.Algebra.Tower
[1231/2058] Building Mathlib.Algebra.Algebra.Subalgebra.Tower
[1232/2058] Building Mathlib.Tactic.LinearCombination
[1233/2058] Building Mathlib.LinearAlgebra.LinearIndependent
[1234/2058] Building Mathlib.Algebra.Ring.OrderSynonym
[1235/2058] Building Mathlib.Algebra.Order.Module.Synonym
[1236/2058] Building Mathlib.Algebra.Order.Module.Defs
[1237/2058] Building Mathlib.Data.Finsupp.Order
[1238/2058] Building Mathlib.Data.Finsupp.Multiset
[1239/2058] Building Mathlib.Order.Bounded
[1240/2058] Building Mathlib.Data.Sum.Order
[1241/2058] Building Mathlib.Order.InitialSeg
[1242/2058] Building Mathlib.SetTheory.Ordinal.Basic
[1243/2058] Building Mathlib.SetTheory.Ordinal.Arithmetic
[1244/2058] Building Mathlib.SetTheory.Ordinal.Exponential
[1245/2058] Building Mathlib.SetTheory.Ordinal.FixedPoint
[1246/2058] Building Mathlib.SetTheory.Ordinal.Principal
[1247/2058] Building Mathlib.SetTheory.Cardinal.Ordinal
[1248/2058] Building Mathlib.SetTheory.Cardinal.Cofinality
[1249/2058] Building Mathlib.LinearAlgebra.Basis
[1250/2058] Building Mathlib.RingTheory.Adjoin.Basic
[1251/2058] Building Mathlib.Topology.Algebra.Algebra
[1252/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Defs
[1253/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Basic
[1254/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Group
[1255/2058] Building Mathlib.Logic.Encodable.Lattice
[1256/2058] Building Mathlib.Topology.Algebra.InfiniteSum.NatInt
[1257/2058] Building Mathlib.Order.Filter.Interval
[1258/2058] Building Mathlib.Order.Interval.Set.Pi
[1259/2058] Building Mathlib.Topology.Order.LeftRight
[1260/2058] Building Mathlib.Topology.Order.OrderClosed
[1261/2058] Building Mathlib.Topology.Order.Basic
[1262/2058] Building Mathlib.Topology.Order.LeftRightNhds
[1263/2058] Building Mathlib.Topology.Algebra.Order.Group
[1264/2058] Building Mathlib.Topology.Algebra.GroupWithZero
[1265/2058] Building Mathlib.Order.Filter.Extr
[1266/2058] Building Mathlib.Topology.Order.LocalExtr
[1267/2058] Building Mathlib.FieldTheory.Subfield
[1268/2058] Building Mathlib.Topology.Algebra.Field
[1269/2058] Building Mathlib.Data.Set.Pointwise.Interval
[1270/2058] Building Mathlib.Topology.Algebra.Order.Field
[1271/2058] Building Mathlib.Topology.Order.MonotoneConvergence
[1272/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Order
[1273/2058] Building Mathlib.Data.Int.Sqrt
[1274/2058] Building Mathlib.Data.Int.Parity
[1275/2058] Building Mathlib.Data.Int.Order.Units
[1276/2058] Building Mathlib.Data.Int.ModEq
[1277/2058] Building Mathlib.Data.Nat.Log
[1278/2058] Building Mathlib.Data.List.Indexes
[1279/2058] Building Mathlib.Data.List.Palindrome
[1280/2058] Building Mathlib.Tactic.IntervalCases
[1281/2058] Building Mathlib.Data.Nat.Digits
[1282/2058] Building Mathlib.RingTheory.Multiplicity
[1283/2058] Building Mathlib.Data.Nat.Multiplicity
[1284/2058] Building Mathlib.Order.Interval.Set.Infinite
[1285/2058] Building Mathlib.Data.Finite.Card
[1286/2058] Building Mathlib.GroupTheory.Finiteness
[1287/2058] Building Mathlib.GroupTheory.Index
[1288/2058] Building Mathlib.GroupTheory.OrderOfElement
[1289/2058] Building Mathlib.Algebra.CharP.Basic
[1290/2058] Building Mathlib.Data.Fintype.Lattice
[1291/2058] Building Mathlib.RingTheory.Coprime.Basic
[1292/2058] Building Mathlib.RingTheory.Coprime.Lemmas
[1293/2058] Building Mathlib.RingTheory.Ideal.Operations
[1294/2058] Building Mathlib.Data.ZMod.Basic
[1295/2058] Building Mathlib.Data.ZMod.IntUnitsPower
[1296/2058] Building Mathlib.Algebra.GroupPower.NegOnePow
[1297/2058] Building Mathlib.Algebra.Periodic
[1298/2058] Building Mathlib.Topology.UniformSpace.AbstractCompletion
[1299/2058] Building Mathlib.Topology.UniformSpace.Completion
[1300/2058] Building Mathlib.Topology.Algebra.UniformMulAction
[1301/2058] Building Mathlib.Algebra.Star.Pi
[1302/2058] Building Mathlib.Algebra.Star.Prod
[1303/2058] Building Mathlib.Topology.Algebra.Star
[1304/2058] Building Mathlib.Data.Int.Interval
[1305/2058] Building Mathlib.Data.Int.SuccPred
[1306/2058] Building Mathlib.Data.Int.ConditionallyCompleteOrder
[1307/2058] Building Mathlib.Topology.Order.IsLUB
[1308/2058] Building Mathlib.Topology.Order.DenselyOrdered
[1309/2058] Building Mathlib.Topology.Order.Monotone
[1310/2058] Building Mathlib.Topology.Order.IntermediateValue
[1311/2058] Building Mathlib.Topology.Algebra.Order.Compact
[1312/2058] Building Mathlib.Algebra.BigOperators.WithTop
[1313/2058] Building Mathlib.Algebra.Order.Field.Canonical.Basic
[1314/2058] Building Mathlib.Algebra.Order.Nonneg.Floor
[1315/2058] Building Mathlib.Algebra.Order.Pi
[1316/2058] Building Mathlib.Algebra.Order.Module.OrderedSMul
[1317/2058] Building Mathlib.Algebra.Order.Module.Pointwise
[1318/2058] Building Mathlib.Algebra.Bounds
[1319/2058] Building Mathlib.Data.Real.Archimedean
[1320/2058] Building Mathlib.Data.Real.Pointwise
[1321/2058] Building Mathlib.Order.ConditionallyCompleteLattice.Group
[1322/2058] Building Mathlib.Data.Real.NNReal
[1323/2058] Building Mathlib.Order.Interval.Set.WithBotTop
[1324/2058] Building Mathlib.Data.ENNReal.Basic
[1325/2058] Building Mathlib.Data.ENNReal.Operations
[1326/2058] Building Mathlib.Data.ENNReal.Inv
[1327/2058] Building Mathlib.Data.ENNReal.Real
[1328/2058] Building Mathlib.Topology.EMetricSpace.Basic
[1329/2058] Building Mathlib.Topology.Bornology.Constructions
[1330/2058] Building Mathlib.Topology.MetricSpace.PseudoMetric
[1331/2058] Building Mathlib.Topology.MetricSpace.ProperSpace
[1332/2058] Building Mathlib.Topology.MetricSpace.Basic
[1333/2058] Building Mathlib.Topology.Metrizable.Basic
[1334/2058] Building Mathlib.Topology.Metrizable.Uniformity
[1335/2058] Building Mathlib.Topology.Instances.Discrete
[1336/2058] Building Mathlib.Topology.MetricSpace.Cauchy
[1337/2058] Building Mathlib.Topology.MetricSpace.Bounded
[1338/2058] Building Mathlib.Topology.Instances.Int
[1339/2058] Building Mathlib.Topology.Instances.Real
[1340/2058] Building Mathlib.Topology.Order.MonotoneContinuity
[1341/2058] Building Mathlib.Algebra.Order.Support
[1342/2058] Building Mathlib.Order.LiminfLimsup
[1343/2058] Building Mathlib.Order.Filter.CountableInter
[1344/2058] Building Mathlib.Topology.Algebra.Order.LiminfLimsup
[1345/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Constructions
[1346/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Ring
[1347/2058] Building Mathlib.Topology.Instances.NNReal
[1348/2058] Building Mathlib.Topology.EMetricSpace.Lipschitz
[1349/2058] Building Mathlib.Order.Interval.Set.OrdConnectedComponent
[1350/2058] Building Mathlib.Topology.Order.T5
[1351/2058] Building Mathlib.Topology.Instances.ENNReal
[1352/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Real
[1353/2058] Building Mathlib.Analysis.SpecificLimits.Basic
[1354/2058] Building Mathlib.Order.Disjointed
[1355/2058] Building Mathlib.Tactic.Measurability.Init
[1356/2058] Building Mathlib.Tactic.Measurability
[1357/2058] Building Mathlib.MeasureTheory.MeasurableSpace.Defs
[1358/2058] Building Mathlib.MeasureTheory.PiSystem
[1359/2058] Building Mathlib.MeasureTheory.OuterMeasure.Basic
[1360/2058] Building Mathlib.MeasureTheory.Measure.MeasureSpaceDef
[1361/2058] Building Mathlib.MeasureTheory.Measure.AEDisjoint
[1362/2058] Building Mathlib.MeasureTheory.Measure.NullMeasurable
[1363/2058] Building Mathlib.Data.Finset.Update
[1364/2058] Building Mathlib.Data.Prod.TProd
[1365/2058] Building Mathlib.MeasureTheory.MeasurableSpace.Basic
[1366/2058] Building Mathlib.MeasureTheory.Measure.MeasureSpace
[1367/2058] Building Mathlib.MeasureTheory.Measure.Restrict
[1368/2058] Building Mathlib.MeasureTheory.Measure.Typeclasses
[1369/2058] Building Mathlib.MeasureTheory.Measure.Trim
[1370/2058] Building Mathlib.Data.Set.MemPartition
[1371/2058] Building Mathlib.Order.Filter.CountableSeparatingOn
[1372/2058] Building Mathlib.MeasureTheory.MeasurableSpace.CountablyGenerated
[1373/2058] Building Mathlib.MeasureTheory.Measure.AEMeasurable
[1374/2058] Building Mathlib.Dynamics.Ergodic.MeasurePreserving
[1375/2058] Building Mathlib.Analysis.Normed.Group.Seminorm
[1376/2058] Building Mathlib.GroupTheory.Archimedean
[1377/2058] Building Mathlib.Topology.Algebra.Order.Archimedean
[1378/2058] Building Mathlib.Topology.Instances.Nat
[1379/2058] Building Mathlib.Topology.Instances.Rat
[1380/2058] Building Mathlib.Order.Interval.Set.ProjIcc
[1381/2058] Building Mathlib.Topology.Bornology.Hom
[1382/2058] Building Mathlib.Topology.MetricSpace.Lipschitz
[1383/2058] Building Mathlib.Topology.MetricSpace.Algebra
[1384/2058] Building Mathlib.Topology.MetricSpace.Antilipschitz
[1385/2058] Building Mathlib.Topology.MetricSpace.Isometry
[1386/2058] Building Mathlib.Topology.MetricSpace.IsometricSMul
[1387/2058] Building Mathlib.Topology.Defs.Sequences
[1388/2058] Building Mathlib.Topology.Sequences
[1389/2058] Building Mathlib.Analysis.Normed.Group.Basic
[1390/2058] Building Mathlib.MeasureTheory.Function.AEMeasurableSequence
[1391/2058] Building Mathlib.MeasureTheory.Group.Arithmetic
[1392/2058] Building Mathlib.MeasureTheory.Order.Lattice
[1393/2058] Building Mathlib.Data.Rat.Encodable
[1394/2058] Building Mathlib.Data.Sign
[1395/2058] Building Mathlib.Data.Real.EReal
[1396/2058] Building Mathlib.Topology.Instances.EReal
[1397/2058] Building Mathlib.Topology.MetricSpace.HausdorffDistance
[1398/2058] Building Mathlib.Topology.MetricSpace.Thickening
[1399/2058] Building Mathlib.Topology.GDelta
[1400/2058] Building Mathlib.Topology.Order.Lattice
[1401/2058] Building Mathlib.Topology.Semicontinuous
[1402/2058] Building Mathlib.MeasureTheory.Constructions.BorelSpace.Basic
[1403/2058] Building Mathlib.MeasureTheory.Function.SimpleFunc
[1404/2058] Building Mathlib.MeasureTheory.Measure.MutuallySingular
[1405/2058] Building Mathlib.MeasureTheory.Measure.Dirac
[1406/2058] Building Mathlib.MeasureTheory.Measure.Count
[1407/2058] Building Mathlib.Topology.IndicatorConstPointwise
[1408/2058] Building Mathlib.MeasureTheory.Integral.Lebesgue
[1409/2058] Building Mathlib.MeasureTheory.Measure.GiryMonad
[1410/2058] Building Mathlib.MeasureTheory.Measure.OpenPos
[1411/2058] Building Mathlib.MeasureTheory.Constructions.Prod.Basic
[1412/2058] Building Mathlib.LinearAlgebra.AffineSpace.Basic
[1413/2058] Building Mathlib.LinearAlgebra.AffineSpace.AffineMap
[1414/2058] Building Mathlib.LinearAlgebra.GeneralLinearGroup
[1415/2058] Building Mathlib.LinearAlgebra.AffineSpace.AffineEquiv
[1416/2058] Building Mathlib.LinearAlgebra.AffineSpace.Midpoint
[1417/2058] Building Mathlib.Algebra.Order.Module.Algebra
[1418/2058] Building Mathlib.GroupTheory.Submonoid.Order
[1419/2058] Building Mathlib.RingTheory.Subring.Units
[1420/2058] Building Mathlib.LinearAlgebra.Ray
[1421/2058] Building Mathlib.Analysis.Convex.Segment
[1422/2058] Building Mathlib.Analysis.Convex.Star
[1423/2058] Building Mathlib.LinearAlgebra.AffineSpace.AffineSubspace
[1424/2058] Building Mathlib.Analysis.Convex.Basic
[1425/2058] Building Mathlib.Analysis.Convex.Function
[1426/2058] Building Mathlib.Analysis.Convex.Hull
[1427/2058] Building Mathlib.Algebra.Algebra.Pi
[1428/2058] Building Mathlib.Algebra.Algebra.RestrictScalars
[1429/2058] Building Mathlib.RingTheory.NonUnitalSubring.Basic
[1430/2058] Building Mathlib.Algebra.Algebra.NonUnitalSubalgebra
[1431/2058] Building Mathlib.Topology.MetricSpace.Dilation
[1432/2058] Building Mathlib.Topology.MetricSpace.DilationEquiv
[1433/2058] Building Mathlib.Analysis.Normed.Field.Basic
[1434/2058] Building Mathlib.Analysis.Normed.MulAction
[1435/2058] Building Mathlib.Analysis.NormedSpace.Basic
[1436/2058] Building Mathlib.Topology.Bornology.Absorbs
[1437/2058] Building Mathlib.Analysis.LocallyConvex.Basic
[1438/2058] Building Mathlib.Algebra.Star.SelfAdjoint
[1439/2058] Building Mathlib.Algebra.Star.Order
[1440/2058] Building Mathlib.Data.Real.Sqrt
[1441/2058] Building Mathlib.Analysis.Seminorm
[1442/2058] Building Mathlib.GroupTheory.GroupAction.Pointwise
[1443/2058] Building Mathlib.Analysis.LocallyConvex.BalancedCoreHull
[1444/2058] Building Mathlib.Analysis.LocallyConvex.Bounded
[1445/2058] Building Mathlib.Topology.Algebra.FilterBasis
[1446/2058] Building Mathlib.Topology.Algebra.UniformConvergence
[1447/2058] Building Mathlib.Topology.Algebra.Equicontinuity
[1448/2058] Building Mathlib.Topology.MetricSpace.Equicontinuity
[1449/2058] Building Mathlib.LinearAlgebra.AffineSpace.Combination
[1450/2058] Building Mathlib.Data.Finsupp.Fintype
[1451/2058] Building Mathlib.Algebra.DirectSum.Basic
[1452/2058] Building Mathlib.LinearAlgebra.DFinsupp
[1453/2058] Building Mathlib.Algebra.DirectSum.Module
[1454/2058] Building Mathlib.Algebra.DirectSum.Finsupp
[1455/2058] Building Mathlib.LinearAlgebra.TensorProduct.Tower
[1456/2058] Building Mathlib.LinearAlgebra.DirectSum.TensorProduct
[1457/2058] Building Mathlib.LinearAlgebra.DirectSum.Finsupp
[1458/2058] Building Mathlib.Algebra.BigOperators.RingEquiv
[1459/2058] Building Mathlib.Algebra.Star.BigOperators
[1460/2058] Building Mathlib.Algebra.Star.Module
[1461/2058] Building Mathlib.Data.Matrix.Basic
[1462/2058] Building Mathlib.Data.Matrix.Block
[1463/2058] Building Mathlib.Data.Matrix.RowCol
[1464/2058] Building Mathlib.LinearAlgebra.Matrix.Trace
[1465/2058] Building Mathlib.Data.Matrix.Basis
[1466/2058] Building Mathlib.LinearAlgebra.StdBasis
[1467/2058] Building Mathlib.LinearAlgebra.FinsuppVectorSpace
[1468/2058] Building Mathlib.LinearAlgebra.TensorProduct.Basis
[1469/2058] Building Mathlib.LinearAlgebra.FreeModule.Basic
[1470/2058] Building Mathlib.LinearAlgebra.LinearPMap
[1471/2058] Building Mathlib.LinearAlgebra.Basis.VectorSpace
[1472/2058] Building Mathlib.LinearAlgebra.AffineSpace.Independent
[1473/2058] Building Mathlib.LinearAlgebra.AffineSpace.Basis
[1474/2058] Building Mathlib.Analysis.Convex.Combination
[1475/2058] Building Mathlib.Analysis.Convex.Strict
[1476/2058] Building Mathlib.Topology.Order.ProjIcc
[1477/2058] Building Mathlib.Topology.CompactOpen
[1478/2058] Building Mathlib.Algebra.Order.Interval.Set.Instances
[1479/2058] Building Mathlib.Topology.UnitInterval
[1480/2058] Building Mathlib.Topology.Connected.PathConnected
[1481/2058] Building Mathlib.Topology.Algebra.Affine
[1482/2058] Building Mathlib.Analysis.Convex.Topology
[1483/2058] Building Mathlib.Topology.Algebra.Module.LocallyConvex
[1484/2058] Building Mathlib.Analysis.LocallyConvex.WithSeminorms
[1485/2058] Building Mathlib.Topology.Algebra.Module.StrongTopology
[1486/2058] Building Mathlib.Analysis.NormedSpace.LinearIsometry
[1487/2058] Building Mathlib.Analysis.NormedSpace.ContinuousLinearMap
[1488/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Basic
[1489/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear
[1490/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.NNNorm
[1491/2058] Building Mathlib.Analysis.NormedSpace.Span
[1492/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.NormedSpace
[1493/2058] Building Mathlib.LinearAlgebra.Isomorphisms
[1494/2058] Building Mathlib.Algebra.Group.Equiv.TypeTags
[1495/2058] Building Mathlib.Algebra.Algebra.Subalgebra.Operations
[1496/2058] Building Mathlib.Algebra.Ring.Fin
[1497/2058] Building Mathlib.RingTheory.Congruence
[1498/2058] Building Mathlib.RingTheory.Ideal.Quotient
[1499/2058] Building Mathlib.RingTheory.Ideal.QuotientOperations
[1500/2058] Building Mathlib.Algebra.EuclideanDomain.Basic
[1501/2058] Building Mathlib.Data.List.Prime
[1502/2058] Building Mathlib.Data.Nat.Factors
[1503/2058] Building Mathlib.RingTheory.Ideal.Colon
[1504/2058] Building Mathlib.Algebra.BigOperators.Associated
[1505/2058] Building Mathlib.Order.Filter.Subsingleton
[1506/2058] Building Mathlib.Order.Filter.EventuallyConst
[1507/2058] Building Mathlib.RingTheory.Nilpotent.Defs
[1508/2058] Building Mathlib.RingTheory.Finiteness
[1509/2058] Building Mathlib.Data.Matrix.Notation
[1510/2058] Building Mathlib.RingTheory.AlgebraTower
[1511/2058] Building Mathlib.LinearAlgebra.Matrix.ToLin
[1512/2058] Building Mathlib.RingTheory.Nilpotent.Lemmas
[1513/2058] Building Mathlib.RingTheory.Noetherian
[1514/2058] Building Mathlib.RingTheory.UniqueFactorizationDomain
[1515/2058] Building Mathlib.RingTheory.PrincipalIdealDomain
[1516/2058] Building Mathlib.RingTheory.Int.Basic
[1517/2058] Building Mathlib.Data.ZMod.Quotient
[1518/2058] Building Mathlib.Data.Nat.GCD.BigOperators
[1519/2058] Building Mathlib.GroupTheory.NoncommPiCoprod
[1520/2058] Building Mathlib.Algebra.GCDMonoid.Multiset
[1521/2058] Building Mathlib.Algebra.GCDMonoid.Finset
[1522/2058] Building Mathlib.Algebra.GCDMonoid.Nat
[1523/2058] Building Mathlib.Data.Nat.PrimeFin
[1524/2058] Building Mathlib.NumberTheory.Divisors
[1525/2058] Building Mathlib.Data.Nat.MaxPowDiv
[1526/2058] Building Mathlib.NumberTheory.Padics.PadicVal
[1527/2058] Building Mathlib.Data.Nat.Factorization.Basic
[1528/2058] Building Mathlib.Tactic.Peel
[1529/2058] Building Mathlib.GroupTheory.Exponent
[1530/2058] Building Mathlib.Combinatorics.Enumerative.Composition
[1531/2058] Building Mathlib.Combinatorics.Enumerative.Partition
[1532/2058] Building Mathlib.Data.Fintype.Perm
[1533/2058] Building Mathlib.GroupTheory.Perm.Support
[1534/2058] Building Mathlib.GroupTheory.Perm.List
[1535/2058] Building Mathlib.Data.Finset.Fin
[1536/2058] Building Mathlib.GroupTheory.Perm.Sign
[1537/2058] Building Mathlib.Logic.Equiv.Fintype
[1538/2058] Building Mathlib.GroupTheory.Perm.Finite
[1539/2058] Building Mathlib.GroupTheory.Perm.Cycle.Basic
[1540/2058] Building Mathlib.GroupTheory.Perm.Cycle.Factors
[1541/2058] Building Mathlib.GroupTheory.Perm.Closure
[1542/2058] Building Mathlib.Tactic.NormNum.GCD
[1543/2058] Building Mathlib.GroupTheory.Perm.Cycle.Type
[1544/2058] Building Mathlib.Init.Data.Prod
[1545/2058] Building Mathlib.GroupTheory.MonoidLocalization
[1546/2058] Building Mathlib.RingTheory.Localization.Basic
[1547/2058] Building Mathlib.Algebra.Field.Equiv
[1548/2058] Building Mathlib.RingTheory.Localization.FractionRing
[1549/2058] Building Mathlib.Algebra.Group.UniqueProds
[1550/2058] Building Mathlib.Algebra.MonoidAlgebra.NoZeroDivisors
[1551/2058] Building Mathlib.Algebra.FreeAlgebra
[1552/2058] Building Mathlib.Algebra.CharP.Algebra
[1553/2058] Building Mathlib.Algebra.CharP.ExpChar
[1554/2058] Building Mathlib.Algebra.CharP.Two
[1555/2058] Building Mathlib.Data.Nat.Count
[1556/2058] Building Mathlib.Data.Nat.Periodic
[1557/2058] Building Mathlib.Data.Nat.Totient
[1558/2058] Building Mathlib.GroupTheory.Subgroup.Simple
[1559/2058] Building Mathlib.GroupTheory.SpecificGroups.Cyclic
[1560/2058] Building Mathlib.GroupTheory.PGroup
[1561/2058] Building Mathlib.GroupTheory.Torsion
[1562/2058] Building Mathlib.RingTheory.Coprime.Ideal
[1563/2058] Building Mathlib.Algebra.Module.Torsion
[1564/2058] Building Mathlib.LinearAlgebra.FreeModule.Finite.Basic
[1565/2058] Building Mathlib.LinearAlgebra.Dimension.Basic
[1566/2058] Building Mathlib.LinearAlgebra.Dimension.Finrank
[1567/2058] Building Mathlib.LinearAlgebra.InvariantBasisNumber
[1568/2058] Building Mathlib.LinearAlgebra.Dimension.StrongRankCondition
[1569/2058] Building Mathlib.LinearAlgebra.Dimension.Finite
[1570/2058] Building Mathlib.Data.W.Basic
[1571/2058] Building Mathlib.Data.W.Cardinal
[1572/2058] Building Mathlib.SetTheory.Cardinal.Subfield
[1573/2058] Building Mathlib.LinearAlgebra.Dimension.Free
[1574/2058] Building Mathlib.LinearAlgebra.Dimension.Constructions
[1575/2058] Building Mathlib.LinearAlgebra.Dimension.RankNullity
[1576/2058] Building Mathlib.LinearAlgebra.Dimension.DivisionRing
[1577/2058] Building Mathlib.LinearAlgebra.Dimension.LinearMap
[1578/2058] Building Mathlib.Algebra.Regular.Pow
[1579/2058] Building Mathlib.Data.Multiset.Antidiagonal
[1580/2058] Building Mathlib.Data.Finsupp.Antidiagonal
[1581/2058] Building Mathlib.Algebra.MvPolynomial.Basic
[1582/2058] Building Mathlib.Algebra.MvPolynomial.Rename
[1583/2058] Building Mathlib.Algebra.MvPolynomial.Degrees
[1584/2058] Building Mathlib.Algebra.MvPolynomial.Variables
[1585/2058] Building Mathlib.Algebra.MvPolynomial.CommRing
[1586/2058] Building Mathlib.Algebra.Polynomial.AlgebraMap
[1587/2058] Building Mathlib.Algebra.MvPolynomial.Equiv
[1588/2058] Building Mathlib.Algebra.Polynomial.CancelLeads
[1589/2058] Building Mathlib.Algebra.Polynomial.EraseLead
[1590/2058] Building Mathlib.Algebra.Polynomial.Derivative
[1591/2058] Building Mathlib.Algebra.Polynomial.Degree.TrailingDegree
[1592/2058] Building Mathlib.Algebra.Polynomial.Reverse
[1593/2058] Building Mathlib.Algebra.Polynomial.Monic
[1594/2058] Building Mathlib.Algebra.Polynomial.BigOperators
[1595/2058] Building Mathlib.Algebra.MonoidAlgebra.Division
[1596/2058] Building Mathlib.Algebra.Polynomial.Inductions
[1597/2058] Building Mathlib.Algebra.Polynomial.Div
[1598/2058] Building Mathlib.Algebra.Polynomial.RingDivision
[1599/2058] Building Mathlib.RingTheory.EuclideanDomain
[1600/2058] Building Mathlib.Algebra.Polynomial.FieldDivision
[1601/2058] Building Mathlib.RingTheory.Polynomial.Content
[1602/2058] Building Mathlib.RingTheory.Polynomial.Basic
[1603/2058] Building Mathlib.RingTheory.Ideal.IsPrimary
[1604/2058] Building Mathlib.RingTheory.Polynomial.Quotient
[1605/2058] Building Mathlib.RingTheory.JacobsonIdeal
[1606/2058] Building Mathlib.Logic.Equiv.TransferInstance
[1607/2058] Building Mathlib.RingTheory.Ideal.LocalRing
[1608/2058] Building Mathlib.Algebra.Polynomial.Expand
[1609/2058] Building Mathlib.Algebra.Polynomial.Laurent
[1610/2058] Building Mathlib.Data.PEquiv
[1611/2058] Building Mathlib.Data.Matrix.PEquiv
[1612/2058] Building Mathlib.GroupTheory.Perm.Option
[1613/2058] Building Mathlib.GroupTheory.Perm.Fin
[1614/2058] Building Mathlib.Data.Fintype.Sort
[1615/2058] Building Mathlib.LinearAlgebra.Multilinear.Basic
[1616/2058] Building Mathlib.LinearAlgebra.Multilinear.Basis
[1617/2058] Building Mathlib.LinearAlgebra.Alternating.Basic
[1618/2058] Building Mathlib.LinearAlgebra.Matrix.Determinant
[1619/2058] Building Mathlib.LinearAlgebra.Matrix.MvPolynomial
[1620/2058] Building Mathlib.LinearAlgebra.Matrix.Polynomial
[1621/2058] Building Mathlib.LinearAlgebra.Matrix.Adjugate
[1622/2058] Building Mathlib.Data.Matrix.DMatrix
[1623/2058] Building Mathlib.FieldTheory.Finiteness
[1624/2058] Building Mathlib.LinearAlgebra.FiniteDimensional
[1625/2058] Building Mathlib.RingTheory.TensorProduct.Basic
[1626/2058] Building Mathlib.RingTheory.MatrixAlgebra
[1627/2058] Building Mathlib.RingTheory.PolynomialAlgebra
[1628/2058] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Basic
[1629/2058] Building Mathlib.LinearAlgebra.Matrix.Reindex
[1630/2058] Building Mathlib.Algebra.Polynomial.Identities
[1631/2058] Building Mathlib.RingTheory.Polynomial.Tower
[1632/2058] Building Mathlib.RingTheory.Nilpotent.Basic
[1633/2058] Building Mathlib.RingTheory.Polynomial.Nilpotent
[1634/2058] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Coeff
[1635/2058] Building Mathlib.LinearAlgebra.Matrix.Charpoly.LinearMap
[1636/2058] Building Mathlib.RingTheory.Adjoin.FG
[1637/2058] Building Mathlib.Algebra.Polynomial.Module.Basic
[1638/2058] Building Mathlib.RingTheory.Adjoin.Tower
[1639/2058] Building Mathlib.RingTheory.FiniteType
[1640/2058] Building Mathlib.RingTheory.Polynomial.ScaleRoots
[1641/2058] Building Mathlib.RingTheory.IntegralClosure
[1642/2058] Building Mathlib.FieldTheory.Minpoly.Basic
[1643/2058] Building Mathlib.RingTheory.Polynomial.IntegralNormalization
[1644/2058] Building Mathlib.RingTheory.Algebraic
[1645/2058] Building Mathlib.FieldTheory.Minpoly.Field
[1646/2058] Building Mathlib.LinearAlgebra.Charpoly.Basic
[1647/2058] Building Mathlib.LinearAlgebra.FreeModule.StrongRankCondition
[1648/2058] Building Mathlib.LinearAlgebra.FreeModule.Finite.Matrix
[1649/2058] Building Mathlib.Control.Bifunctor
[1650/2058] Building Mathlib.Logic.Equiv.Functor
[1651/2058] Building Mathlib.Order.JordanHolder
[1652/2058] Building Mathlib.Order.CompactlyGenerated.Intervals
[1653/2058] Building Mathlib.RingTheory.SimpleModule
[1654/2058] Building Mathlib.Topology.Algebra.Module.Simple
[1655/2058] Building Mathlib.Data.Matrix.Invertible
[1656/2058] Building Mathlib.LinearAlgebra.Matrix.NonsingularInverse
[1657/2058] Building Mathlib.LinearAlgebra.Matrix.Basis
[1658/2058] Building Mathlib.LinearAlgebra.Determinant
[1659/2058] Building Mathlib.Topology.Algebra.Module.Determinant
[1660/2058] Building Mathlib.Topology.Algebra.Module.FiniteDimension
[1661/2058] Building Mathlib.MeasureTheory.Constructions.BorelSpace.ContinuousLinearMap
[1662/2058] Building Mathlib.Analysis.Normed.Group.InfiniteSum
[1663/2058] Building Mathlib.Logic.Equiv.PartialEquiv
[1664/2058] Building Mathlib.Order.Copy
[1665/2058] Building Mathlib.Topology.Sets.Opens
[1666/2058] Building Mathlib.Topology.PartialHomeomorph
[1667/2058] Building Mathlib.Analysis.Asymptotics.Asymptotics
[1668/2058] Building Mathlib.Analysis.Asymptotics.Theta
[1669/2058] Building Mathlib.Algebra.Order.Group.TypeTags
[1670/2058] Building Mathlib.Analysis.Normed.Order.Basic
[1671/2058] Building Mathlib.Analysis.Asymptotics.AsymptoticEquivalent
[1672/2058] Building Mathlib.Analysis.Calculus.TangentCone
[1673/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Asymptotics
[1674/2058] Building Mathlib.Analysis.Calculus.FDeriv.Basic
[1675/2058] Building Mathlib.Topology.Algebra.Module.Multilinear.Basic
[1676/2058] Building Mathlib.Topology.Algebra.Module.Multilinear.Bounded
[1677/2058] Building Mathlib.Topology.Algebra.Module.Multilinear.Topology
[1678/2058] Building Mathlib.Analysis.NormedSpace.Multilinear.Basic
[1679/2058] Building Mathlib.Topology.Algebra.Ring.Ideal
[1680/2058] Building Mathlib.Algebra.BigOperators.Module
[1681/2058] Building Mathlib.Analysis.SpecificLimits.Normed
[1682/2058] Building Mathlib.Analysis.NormedSpace.Units
[1683/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Completeness
[1684/2058] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Mul
[1685/2058] Building Mathlib.Analysis.NormedSpace.BoundedLinearMaps
[1686/2058] Building Mathlib.Analysis.Calculus.FDeriv.Linear
[1687/2058] Building Mathlib.Analysis.Calculus.FDeriv.Comp
[1688/2058] Building Mathlib.Analysis.Calculus.FDeriv.Equiv
[1689/2058] Building Mathlib.Analysis.NormedSpace.Multilinear.Curry
[1690/2058] Building Mathlib.Analysis.Calculus.FormalMultilinearSeries
[1691/2058] Building Mathlib.Analysis.Calculus.ContDiff.Defs
[1692/2058] Building Mathlib.Analysis.Calculus.FDeriv.Add
[1693/2058] Building Mathlib.Analysis.Calculus.FDeriv.Prod
[1694/2058] Building Mathlib.Analysis.Calculus.FDeriv.Bilinear
[1695/2058] Building Mathlib.Analysis.Calculus.FDeriv.Mul
[1696/2058] Building Mathlib.Analysis.Calculus.Deriv.Basic
[1697/2058] Building Mathlib.Analysis.Calculus.FDeriv.RestrictScalars
[1698/2058] Building Mathlib.Analysis.Calculus.Deriv.Comp
[1699/2058] Building Mathlib.Analysis.Calculus.Deriv.Inverse
[1700/2058] Building Mathlib.Analysis.Calculus.ContDiff.Basic
[1701/2058] Building Mathlib.Algebra.CharP.Invertible
[1702/2058] Building Mathlib.Algebra.GroupWithZero.Bitwise
[1703/2058] Building Mathlib.Data.Complex.Basic
[1704/2058] Building Mathlib.Data.Rat.Denumerable
[1705/2058] Building Mathlib.SetTheory.Cardinal.Continuum
[1706/2058] Building Mathlib.Data.Real.Cardinality
[1707/2058] Building Mathlib.Data.Complex.Cardinality
[1708/2058] Building Mathlib.Data.Complex.Module
[1709/2058] Building Mathlib.Data.Complex.Abs
[1710/2058] Building Mathlib.Data.Complex.Order
[1711/2058] Building Mathlib.Algebra.Order.CauSeq.BigOperators
[1712/2058] Building Mathlib.Data.Complex.BigOperators
[1713/2058] Building Mathlib.Data.Complex.Exponential
[1714/2058] Building Mathlib.Analysis.Normed.Group.Hom
[1715/2058] Building Mathlib.Algebra.Star.Pointwise
[1716/2058] Building Mathlib.Algebra.Star.Center
[1717/2058] Building Mathlib.Algebra.Star.StarAlgHom
[1718/2058] Building Mathlib.Algebra.Star.Subalgebra
[1719/2058] Building Mathlib.Algebra.Star.Unitary
[1720/2058] Building Mathlib.Topology.Algebra.Module.Star
[1721/2058] Building Mathlib.Analysis.NormedSpace.Star.Basic
[1722/2058] Building Mathlib.Analysis.RCLike.Basic
[1723/2058] Building Mathlib.Topology.Algebra.InfiniteSum.Module
[1724/2058] Building Mathlib.Topology.Instances.RealVectorSpace
[1725/2058] Building Mathlib.Analysis.Complex.Basic
[1726/2058] Building Mathlib.Analysis.SpecialFunctions.Exp
[1727/2058] Building Mathlib.Analysis.NormedSpace.Real
[1728/2058] Building Mathlib.Analysis.SpecialFunctions.Log.Basic
[1729/2058] Building Mathlib.Tactic.FunProp.Measurable
[1730/2058] Building Mathlib.Tactic.FunProp.AEMeasurable
[1731/2058] Building Mathlib.Analysis.Calculus.Deriv.Mul
[1732/2058] Building Mathlib.Analysis.Calculus.Deriv.Add
[1733/2058] Building Mathlib.Analysis.Calculus.Deriv.Shift
[1734/2058] Building Mathlib.Analysis.Calculus.IteratedDeriv.Defs
[1735/2058] Building Mathlib.Analysis.Calculus.IteratedDeriv.Lemmas
[1736/2058] Building Mathlib.Analysis.Calculus.Deriv.Linear
[1737/2058] Building Mathlib.Analysis.Normed.Group.BallSphere
[1738/2058] Building Mathlib.Analysis.Normed.Field.UnitBall
[1739/2058] Building Mathlib.Analysis.Complex.Circle
[1740/2058] Building Mathlib.LinearAlgebra.Matrix.Transvection
[1741/2058] Building Mathlib.Algebra.CharP.Reduced
[1742/2058] Building Mathlib.RingTheory.IntegralDomain
[1743/2058] Building Mathlib.RingTheory.RootsOfUnity.Basic
[1744/2058] Building Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup
[1745/2058] Building Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup
[1746/2058] Building Mathlib.Analysis.Complex.Isometry
[1747/2058] Building Mathlib.Analysis.NormedSpace.ConformalLinearMap
[1748/2058] Building Mathlib.Analysis.Normed.Group.Lemmas
[1749/2058] Building Mathlib.Analysis.Normed.Group.AddTorsor
[1750/2058] Building Mathlib.Analysis.NormedSpace.AddTorsor
[1751/2058] Building Mathlib.LinearAlgebra.AffineSpace.Restrict
[1752/2058] Building Mathlib.Analysis.NormedSpace.AffineIsometry
[1753/2058] Building Mathlib.Analysis.NormedSpace.RieszLemma
[1754/2058] Building Mathlib.Analysis.Normed.Group.Pointwise
[1755/2058] Building Mathlib.Analysis.NormedSpace.Pointwise
[1756/2058] Building Mathlib.Topology.Instances.Matrix
[1757/2058] Building Mathlib.Analysis.NormedSpace.FiniteDimension
[1758/2058] Building Mathlib.Analysis.Complex.Conformal
[1759/2058] Building Mathlib.Analysis.Calculus.Conformal.NormedSpace
[1760/2058] Building Mathlib.Analysis.Complex.RealDeriv
[1761/2058] Building Mathlib.Analysis.Calculus.Deriv.AffineMap
[1762/2058] Building Mathlib.LinearAlgebra.AffineSpace.Slope
[1763/2058] Building Mathlib.Analysis.Calculus.Deriv.Slope
[1764/2058] Building Mathlib.Analysis.Calculus.LocalExtr.Basic
[1765/2058] Building Mathlib.Topology.ExtendFrom
[1766/2058] Building Mathlib.Topology.Order.ExtendFrom
[1767/2058] Building Mathlib.Topology.Algebra.Order.Rolle
[1768/2058] Building Mathlib.Analysis.Calculus.LocalExtr.Rolle
[1769/2058] Building Mathlib.Init.Core
[1770/2058] Building Mathlib.LinearAlgebra.AffineSpace.FiniteDimensional
[1771/2058] Building Mathlib.Analysis.Convex.Between
[1772/2058] Building Mathlib.Analysis.Convex.Jensen
[1773/2058] Building Mathlib.Analysis.Convex.Normed
[1774/2058] Building Mathlib.Analysis.Calculus.MeanValue
[1775/2058] Building Mathlib.Analysis.Calculus.ContDiff.RCLike
[1776/2058] Building Mathlib.Analysis.SpecialFunctions.ExpDeriv
[1777/2058] Building Mathlib.Analysis.Calculus.Deriv.Pow
[1778/2058] Building Mathlib.Analysis.SpecialFunctions.Log.Deriv
[1779/2058] Building Mathlib.Analysis.Calculus.FDeriv.Pi
[1780/2058] Building Mathlib.Analysis.Calculus.Deriv.Inv
[1781/2058] Building Mathlib.Tactic.FunProp.Differentiable
[1782/2058] Building Mathlib.Tactic.FunProp.ContDiff
[1783/2058] Building Mathlib.Tactic.Generalize
[1784/2058] Building Mathlib.Tactic.Have
[1785/2058] Building Mathlib.Tactic.LiftLets
[1786/2058] Building Mathlib.Tactic.ModCases
[1787/2058] Building Mathlib.Tactic.MoveAdd
[1788/2058] Building Mathlib.Tactic.NoncommRing
[1789/2058] Building Mathlib.Tactic.NormNum.BigOperators
[1790/2058] Building Mathlib.Tactic.NormNum.IsCoprime
[1791/2058] Building Mathlib.Data.Fintype.Parity
[1792/2058] Building Mathlib.Data.Int.Range
[1793/2058] Building Mathlib.NumberTheory.LegendreSymbol.MulCharacter
[1794/2058] Building Mathlib.NumberTheory.LegendreSymbol.ZModChar
[1795/2058] Building Mathlib.Algebra.Polynomial.Lifts
[1796/2058] Building Mathlib.Algebra.Polynomial.Splits
[1797/2058] Building Mathlib.Algebra.Squarefree.Basic
[1798/2058] Building Mathlib.RingTheory.PowerBasis
[1799/2058] Building Mathlib.FieldTheory.Separable
[1800/2058] Building Mathlib.FieldTheory.Finite.Basic
[1801/2058] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.Basic
[1802/2058] Building Mathlib.NumberTheory.LegendreSymbol.Basic
[1803/2058] Building Mathlib.Data.PNat.Prime
[1804/2058] Building Mathlib.Algebra.IsPrimePow
[1805/2058] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
[1806/2058] Building Mathlib.Analysis.Normed.Group.Quotient
[1807/2058] Building Mathlib.Algebra.ModEq
[1808/2058] Building Mathlib.Order.Circular
[1809/2058] Building Mathlib.Algebra.Order.ToIntervalMod
[1810/2058] Building Mathlib.Algebra.Ring.AddAut
[1811/2058] Building Mathlib.GroupTheory.Divisible
[1812/2058] Building Mathlib.Topology.SeparatedMap
[1813/2058] Building Mathlib.Topology.IsLocalHomeomorph
[1814/2058] Building Mathlib.Topology.Instances.AddCircle
[1815/2058] Building Mathlib.Analysis.Normed.Group.AddCircle
[1816/2058] Building Mathlib.Algebra.CharZero.Quotient
[1817/2058] Building Mathlib.Topology.Instances.Sign
[1818/2058] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle
[1819/2058] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse
[1820/2058] Building Mathlib.Analysis.SpecialFunctions.Complex.Arg
[1821/2058] Building Mathlib.Analysis.SpecialFunctions.Complex.Log
[1822/2058] Building Mathlib.RingTheory.RootsOfUnity.Complex
[1823/2058] Building Mathlib.RingTheory.Polynomial.Pochhammer
[1824/2058] Building Mathlib.RingTheory.Binomial
[1825/2058] Building Mathlib.RingTheory.HahnSeries.Basic
[1826/2058] Building Mathlib.RingTheory.HahnSeries.Addition
[1827/2058] Building Mathlib.Data.Set.MulAntidiagonal
[1828/2058] Building Mathlib.Data.Finset.MulAntidiagonal
[1829/2058] Building Mathlib.RingTheory.HahnSeries.Multiplication
[1830/2058] Building Mathlib.Data.Finset.PiAntidiagonal
[1831/2058] Building Mathlib.RingTheory.MvPowerSeries.Basic
[1832/2058] Building Mathlib.RingTheory.PowerSeries.Basic
[1833/2058] Building Mathlib.Data.Finsupp.PWO
[1834/2058] Building Mathlib.RingTheory.HahnSeries.PowerSeries
[1835/2058] Building Mathlib.Algebra.Order.Group.WithTop
[1836/2058] Building Mathlib.RingTheory.Valuation.Basic
[1837/2058] Building Mathlib.RingTheory.HahnSeries.Summable
[1838/2058] Building Mathlib.RingTheory.LaurentSeries
[1839/2058] Building Mathlib.FieldTheory.RatFunc
[1840/2058] Building Mathlib.Data.Nat.Factorization.PrimePow
[1841/2058] Building Mathlib.Data.Nat.Squarefree
[1842/2058] Building Mathlib.NumberTheory.ArithmeticFunction
[1843/2058] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Basic
[1844/2058] Building Mathlib.RingTheory.MvPolynomial.Tower
[1845/2058] Building Mathlib.RingTheory.FinitePresentation
[1846/2058] Building Mathlib.RingTheory.QuotientNoetherian
[1847/2058] Building Mathlib.RingTheory.AdjoinRoot
[1848/2058] Building Mathlib.FieldTheory.Tower
[1849/2058] Building Mathlib.FieldTheory.IntermediateField
[1850/2058] Building Mathlib.RingTheory.Adjoin.Field
[1851/2058] Building Mathlib.FieldTheory.SplittingField.IsSplittingField
[1852/2058] Building Mathlib.FieldTheory.SplittingField.Construction
[1853/2058] Building Mathlib.RingTheory.Localization.Integer
[1854/2058] Building Mathlib.RingTheory.Localization.Integral
[1855/2058] Building Mathlib.RingTheory.IntegrallyClosed
[1856/2058] Building Mathlib.RingTheory.Polynomial.GaussLemma
[1857/2058] Building Mathlib.FieldTheory.Minpoly.IsIntegrallyClosed
[1858/2058] Building Mathlib.RingTheory.Prime
[1859/2058] Building Mathlib.RingTheory.EisensteinCriterion
[1860/2058] Building Mathlib.RingTheory.Polynomial.Eisenstein.Basic
[1861/2058] Building Mathlib.Algebra.GCDMonoid.IntegrallyClosed
[1862/2058] Building Mathlib.RingTheory.RootsOfUnity.Minpoly
[1863/2058] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Roots
[1864/2058] Building Mathlib.LinearAlgebra.FreeModule.PID
[1865/2058] Building Mathlib.LinearAlgebra.BilinearForm.Basic
[1866/2058] Building Mathlib.LinearAlgebra.BilinearForm.Hom
[1867/2058] Building Mathlib.LinearAlgebra.SesquilinearForm
[1868/2058] Building Mathlib.LinearAlgebra.Dual
[1869/2058] Building Mathlib.LinearAlgebra.BilinearForm.Properties
[1870/2058] Building Mathlib.LinearAlgebra.BilinearForm.DualLattice
[1871/2058] Building Mathlib.RingTheory.Localization.Ideal
[1872/2058] Building Mathlib.RingTheory.Localization.AtPrime
[1873/2058] Building Mathlib.RingTheory.Ideal.Over
[1874/2058] Building Mathlib.RingTheory.Localization.NumDen
[1875/2058] Building Mathlib.RingTheory.Polynomial.RationalRoot
[1876/2058] Building Mathlib.RingTheory.DedekindDomain.Basic
[1877/2058] Building Mathlib.Algebra.Module.LocalizedModule
[1878/2058] Building Mathlib.RingTheory.Localization.Module
[1879/2058] Building Mathlib.LinearAlgebra.Matrix.Nondegenerate
[1880/2058] Building Mathlib.LinearAlgebra.Matrix.ToLinearEquiv
[1881/2058] Building Mathlib.LinearAlgebra.Basis.Bilinear
[1882/2058] Building Mathlib.LinearAlgebra.Matrix.SesquilinearForm
[1883/2058] Building Mathlib.LinearAlgebra.Matrix.BilinearForm
[1884/2058] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Minpoly
[1885/2058] Building Mathlib.LinearAlgebra.Matrix.Block
[1886/2058] Building Mathlib.LinearAlgebra.Vandermonde
[1887/2058] Building Mathlib.LinearAlgebra.Contraction
[1888/2058] Building Mathlib.LinearAlgebra.Trace
[1889/2058] Building Mathlib.GroupTheory.Abelianization
[1890/2058] Building Mathlib.GroupTheory.FreeGroup.Basic
[1891/2058] Building Mathlib.GroupTheory.FreeAbelianGroup
[1892/2058] Building Mathlib.RingTheory.FreeRing
[1893/2058] Building Mathlib.RingTheory.FreeCommRing
[1894/2058] Building Mathlib.Algebra.DirectLimit
[1895/2058] Building Mathlib.Algebra.Algebra.Subalgebra.Directed
[1896/2058] Building Mathlib.FieldTheory.Adjoin
[1897/2058] Building Mathlib.FieldTheory.Extension
[1898/2058] Building Mathlib.GroupTheory.Perm.ViaEmbedding
[1899/2058] Building Mathlib.GroupTheory.Solvable
[1900/2058] Building Mathlib.FieldTheory.Normal
[1901/2058] Building Mathlib.FieldTheory.Perfect
[1902/2058] Building Mathlib.FieldTheory.IsAlgClosed.Basic
[1903/2058] Building Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure
[1904/2058] Building Mathlib.FieldTheory.PrimitiveElement
[1905/2058] Building Mathlib.Algebra.GroupRingAction.Invariant
[1906/2058] Building Mathlib.Algebra.Polynomial.GroupRingAction
[1907/2058] Building Mathlib.FieldTheory.Fixed
[1908/2058] Building Mathlib.FieldTheory.NormalClosure
[1909/2058] Building Mathlib.GroupTheory.GroupAction.FixedPoints
[1910/2058] Building Mathlib.GroupTheory.GroupAction.FixingSubgroup
[1911/2058] Building Mathlib.FieldTheory.Galois
[1912/2058] Building Mathlib.FieldTheory.Minpoly.MinpolyDiv
[1913/2058] Building Mathlib.RingTheory.Trace
[1914/2058] Building Mathlib.RingTheory.DedekindDomain.IntegralClosure
[1915/2058] Building Mathlib.NumberTheory.NumberField.Basic
[1916/2058] Building Mathlib.NumberTheory.Cyclotomic.Basic
[1917/2058] Building Mathlib.RingTheory.Adjoin.PowerBasis
[1918/2058] Building Mathlib.RingTheory.MvPolynomial.Symmetric
[1919/2058] Building Mathlib.RingTheory.Polynomial.Vieta
[1920/2058] Building Mathlib.Topology.Algebra.Polynomial
[1921/2058] Building Mathlib.Analysis.NormedSpace.Ray
[1922/2058] Building Mathlib.Analysis.Convex.StrictConvexSpace
[1923/2058] Building Mathlib.Analysis.Convex.Uniform
[1924/2058] Building Mathlib.Topology.Algebra.GroupCompletion
[1925/2058] Building Mathlib.Topology.MetricSpace.Completion
[1926/2058] Building Mathlib.Analysis.Normed.Group.Completion
[1927/2058] Building Mathlib.Topology.Algebra.UniformRing
[1928/2058] Building Mathlib.Analysis.NormedSpace.Completion
[1929/2058] Building Mathlib.Analysis.InnerProductSpace.Basic
[1930/2058] Building Mathlib.Analysis.Complex.Arg
[1931/2058] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Eval
[1932/2058] Building Mathlib.RingTheory.Norm
[1933/2058] Building Mathlib.Data.ZMod.Algebra
[1934/2058] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Expand
[1935/2058] Building Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots
[1936/2058] Building Mathlib.FieldTheory.Finite.GaloisField
[1937/2058] Building Mathlib.FieldTheory.Finite.Trace
[1938/2058] Building Mathlib.Algebra.Group.AddChar
[1939/2058] Building Mathlib.Data.ZMod.Units
[1940/2058] Building Mathlib.NumberTheory.LegendreSymbol.AddCharacter
[1941/2058] Building Mathlib.Algebra.CharP.CharAndCard
[1942/2058] Building Mathlib.NumberTheory.LegendreSymbol.GaussSum
[1943/2058] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.GaussSum
[1944/2058] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity
[1945/2058] Building Mathlib.NumberTheory.LegendreSymbol.JacobiSymbol
[1946/2058] Building Mathlib.Tactic.NormNum.LegendreSymbol
[1947/2058] Building Mathlib.Data.Nat.Fib.Basic
[1948/2058] Building Mathlib.Tactic.NormNum.NatFib
[1949/2058] Building Mathlib.Tactic.NormNum.NatSqrt
[1950/2058] Building Mathlib.Tactic.NormNum.Prime
[1951/2058] Building Mathlib.Tactic.Polyrith
[1952/2058] Building Mathlib.Tactic.Positivity.Finset
[1953/2058] Building Mathlib.Tactic.ProdAssoc
[1954/2058] Building Mathlib.Tactic.Qify
[1955/2058] Building Mathlib.Tactic.Recall
[1956/2058] Building Mathlib.Tactic.ReduceModChar.Ext
[1957/2058] Building Mathlib.Tactic.ReduceModChar
[1958/2058] Building Mathlib.Tactic.Replace
[1959/2058] Building Mathlib.Data.List.EditDistance.Defs
[1960/2058] Building Mathlib.Data.List.EditDistance.Bounds
[1961/2058] Building Mathlib.Lean.Thunk
[1962/2058] Building Mathlib.Order.Estimator
[1963/2058] Building Mathlib.Data.List.EditDistance.Estimator
[1964/2058] Building Mathlib.Data.MLList.BestFirst
[1965/2058] Building Mathlib.Tactic.RewriteSearch
[1966/2058] Building Mathlib.Tactic.Rify
[1967/2058] Building Mathlib.Tactic.Sat.FromLRAT
[1968/2058] Building Mathlib.Control.Monad.Writer
[1969/2058] Building Mathlib.Init.Control.Lawful
[1970/2058] Building Mathlib.Control.Monad.Cont
[1971/2058] Building Mathlib.Control.ULiftable
[1972/2058] Building Mathlib.Control.Random
[1973/2058] Building Mathlib.Testing.SlimCheck.Gen
[1974/2058] Building Mathlib.Testing.SlimCheck.Sampleable
[1975/2058] Building Mathlib.Testing.SlimCheck.Testable
[1976/2058] Building Mathlib.Tactic.SlimCheck
[1977/2058] Building ProofWidgets.Component.PenroseDiagram
[1978/2058] Building ProofWidgets.Presentation.Expr
[1979/2058] Building Mathlib.Tactic.Widget.CommDiag
[1980/2058] Building Mathlib.Tactic.Widget.Gcongr
[1981/2058] Building Mathlib.Tactic
[1982/2058] Building Examples.Command.Eval
info: ././././Examples/Command/Eval.lean:13:0-13:5: "4.8.0-rc1"
[1983/2058] Building Examples.Command.Help
info: ././././Examples/Command/Help.lean:18:0-18:12: syntax "#check"... [Mathlib.Tactic.«tactic#check__»]
  The `#check t` tactic elaborates the term `t` and then pretty prints it with its type as `e : ty`.
  
  If `t` is an identifier, then it pretty prints a type declaration form
  for the global constant `t` instead.
  Use `#check (t)` to pretty print it as an elaborated expression.
  
  Like the `#check` command, the `#check` tactic allows stuck typeclass instance problems.
  These become metavariables in the output.

syntax "#find"... [Mathlib.Tactic.Find.«tactic#find_»]

syntax "("... [Lean.Parser.Tactic.paren]
  `(tacs)` executes a list of tactics in sequence, without requiring that
  the goal be closed at the end like `· tacs`. Like `by` itself, the tactics
  can be either separated by newlines or `;`.

syntax "_"... [Std.Tactic.tactic_]
  `_` in tactic position acts like the `done` tactic: it fails and gives the list
  of goals if there are any. It is useful as a placeholder after starting a tactic block
  such as `by _` to make it syntactically correct and show the current goal.

syntax "abel"... [Mathlib.Tactic.Abel.abel_term]
  Unsupported legacy syntax from mathlib3, which allowed passing additional terms to `abel`.

syntax "abel"... [Mathlib.Tactic.Abel.abel]
  Tactic for evaluating expressions in abelian groups.
  
  * `abel!` will use a more aggressive reducibility setting to determine equality of atoms.
  * `abel1` fails if the target is not an equality.
  
  For example:
  ```
  example [AddCommMonoid α] (a b : α) : a + (b + a) = a + a + b := by abel
  example [AddCommGroup α] (a : α) : (3 : ℤ) • a = a + (2 : ℤ) • a := by abel
  ```

syntax "abel!"... [Mathlib.Tactic.Abel.abel!_term]
  Unsupported legacy syntax from mathlib3, which allowed passing additional terms to `abel!`.

syntax "abel!"... [Mathlib.Tactic.Abel.tacticAbel!]
  Tactic for evaluating expressions in abelian groups.
  
  * `abel!` will use a more aggressive reducibility setting to determine equality of atoms.
  * `abel1` fails if the target is not an equality.
  
  For example:
  ```
  example [AddCommMonoid α] (a b : α) : a + (b + a) = a + a + b := by abel
  example [AddCommGroup α] (a : α) : (3 : ℤ) • a = a + (2 : ℤ) • a := by abel
  ```

syntax "abel1"... [Mathlib.Tactic.Abel.abel1]
  Tactic for solving equations in the language of
  *additive*, commutative monoids and groups.
  This version of `abel` fails if the target is not an equality
  that is provable by the axioms of commutative monoids/groups.
  
  `abel1!` will use a more aggressive reducibility setting to identify atoms.
  This can prove goals that `abel` cannot, but is more expensive.

syntax "abel1!"... [Mathlib.Tactic.Abel.abel1!]
  Tactic for solving equations in the language of
  *additive*, commutative monoids and groups.
  This version of `abel` fails if the target is not an equality
  that is provable by the axioms of commutative monoids/groups.
  
  `abel1!` will use a more aggressive reducibility setting to identify atoms.
  This can prove goals that `abel` cannot, but is more expensive.

syntax "abel_nf"... [Mathlib.Tactic.Abel.abelNF]
  Simplification tactic for expressions in the language of abelian groups,
  which rewrites all group expressions into a normal form.
  * `abel_nf!` will use a more aggressive reducibility setting to identify atoms.
  * `abel_nf (config := cfg)` allows for additional configuration:
    * `red`: the reducibility setting (overridden by `!`)
    * `recursive`: if true, `abel_nf` will also recurse into atoms
  * `abel_nf` works as both a tactic and a conv tactic.
    In tactic mode, `abel_nf at h` can be used to rewrite in a hypothesis.

syntax "abel_nf!"... [Mathlib.Tactic.Abel.tacticAbel_nf!__]
  Simplification tactic for expressions in the language of abelian groups,
  which rewrites all group expressions into a normal form.
  * `abel_nf!` will use a more aggressive reducibility setting to identify atoms.
  * `abel_nf (config := cfg)` allows for additional configuration:
    * `red`: the reducibility setting (overridden by `!`)
    * `recursive`: if true, `abel_nf` will also recurse into atoms
  * `abel_nf` works as both a tactic and a conv tactic.
    In tactic mode, `abel_nf at h` can be used to rewrite in a hypothesis.

syntax "absurd"... [Std.Tactic.tacticAbsurd_]
  Given a proof `h` of `p`, `absurd h` changes the goal to `⊢ ¬ p`.
  If `p` is a negation `¬q` then the goal is changed to `⊢ q` instead.

syntax "ac_change"... [Mathlib.Tactic.acChange]
  `ac_change g using n` is `convert_to g using n` followed by `ac_rfl`. It is useful for
  rearranging/reassociating e.g. sums:
  ```lean
  example (a b c d e f g N : ℕ) : (a + b) + (c + d) + (e + f) + g ≤ N := by
    ac_change a + d + e + f + c + g + b ≤ _
    -- ⊢ a + d + e + f + c + g + b ≤ N
  ```

syntax "ac_rfl"... [Lean.Parser.Tactic.acRfl]
  `ac_rfl` proves equalities up to application of an associative and commutative operator.
  ```
  instance : Associative (α := Nat) (.+.) := ⟨Nat.add_assoc⟩
  instance : Commutative (α := Nat) (.+.) := ⟨Nat.add_comm⟩
  
  example (a b c d : Nat) : a + b + c + d = d + (b + c) + a := by ac_rfl
  ```

syntax "admit"... [Lean.Parser.Tactic.tacticAdmit]
  `admit` is a shorthand for `exact sorry`.

syntax "aesop"... [Aesop.Frontend.Parser.aesopTactic]
  `aesop <clause>*` tries to solve the current goal by applying a set of rules
  registered with the `@[aesop]` attribute. See [its
  README](https://github.com/JLimperg/aesop#readme) for a tutorial and a
  reference.
  
  The variant `aesop?` prints the proof it found as a `Try this` suggestion.
  
  Clauses can be used to customise the behaviour of an Aesop call. Available
  clauses are:
  
  - `(add <phase> <priority> <builder> <rule>)` adds a rule. `<phase>` is
    `unsafe`, `safe` or `norm`. `<priority>` is a percentage for unsafe rules and
    an integer for safe and norm rules. `<rule>` is the name of a declaration or
    local hypothesis. `<builder>` is the rule builder used to turn `<rule>` into
    an Aesop rule. Example: `(add unsafe 50% apply Or.inl)`.
  - `(erase <rule>)` disables a globally registered Aesop rule. Example: `(erase
    Aesop.BuiltinRules.assumption)`.
  - `(rule_sets := [<ruleset>,*])` enables or disables named sets of rules for
    this Aesop call. Example: `(rule_sets := [-builtin, MyRuleSet])`.
  - `(config { <opt> := <value> })` adjusts Aesop's search options. See
    `Aesop.Options`.
  - `(simp_config { <opt> := <value> })` adjusts options for Aesop's built-in
    `simp` rule. The given options are directly passed to `simp`. For example,
    `(simp_config := { zeta := false })` makes Aesop use
    `simp (config := { zeta := false })`.

syntax "aesop?"... [Aesop.Frontend.Parser.aesopTactic?]
  `aesop <clause>*` tries to solve the current goal by applying a set of rules
  registered with the `@[aesop]` attribute. See [its
  README](https://github.com/JLimperg/aesop#readme) for a tutorial and a
  reference.
  
  The variant `aesop?` prints the proof it found as a `Try this` suggestion.
  
  Clauses can be used to customise the behaviour of an Aesop call. Available
  clauses are:
  
  - `(add <phase> <priority> <builder> <rule>)` adds a rule. `<phase>` is
    `unsafe`, `safe` or `norm`. `<priority>` is a percentage for unsafe rules and
    an integer for safe and norm rules. `<rule>` is the name of a declaration or
    local hypothesis. `<builder>` is the rule builder used to turn `<rule>` into
    an Aesop rule. Example: `(add unsafe 50% apply Or.inl)`.
  - `(erase <rule>)` disables a globally registered Aesop rule. Example: `(erase
    Aesop.BuiltinRules.assumption)`.
  - `(rule_sets := [<ruleset>,*])` enables or disables named sets of rules for
    this Aesop call. Example: `(rule_sets := [-builtin, MyRuleSet])`.
  - `(config { <opt> := <value> })` adjusts Aesop's search options. See
    `Aesop.Options`.
  - `(simp_config { <opt> := <value> })` adjusts options for Aesop's built-in
    `simp` rule. The given options are directly passed to `simp`. For example,
    `(simp_config := { zeta := false })` makes Aesop use
    `simp (config := { zeta := false })`.

syntax "aesop_cases"... [Aesop.tacticAesop_cases_]

syntax "aesop_cat"... [CategoryTheory.aesop_cat]
  A thin wrapper for `aesop` which adds the `CategoryTheory` rule set and
  allows `aesop` to look through semireducible definitions when calling `intros`.
  It also turns on `zetaDelta` in the `simp` config, allowing `aesop_cat` to unfold any `let`s.
  This tactic fails when it is unable to solve the goal, making it suitable for
  use in auto-params.

syntax "aesop_cat?"... [CategoryTheory.aesop_cat?]
  We also use `aesop_cat?` to pass along a `Try this` suggestion when using `aesop_cat`

syntax "aesop_cat_nonterminal"... [CategoryTheory.aesop_cat_nonterminal]
  A variant of `aesop_cat` which does not fail when it is unable to solve the
  goal. Use this only for exploration! Nonterminal `aesop` is even worse than
  nonterminal `simp`.

syntax "aesop_destruct_products"... [Aesop.BuiltinRules.tacticAesop_destruct_products]

syntax "aesop_split_hyps"... [Aesop.BuiltinRules.tacticAesop_split_hyps]

syntax "aesop_subst"... [Aesop.BuiltinRules.«tacticAesop_subst[_,,]»]

syntax "aesop_subst"... [Aesop.BuiltinRules.tacticAesop_subst_]

syntax "aesop_unfold"... [Aesop.«tacticAesop_unfold[_,,]»]

syntax "all_goals"... [Lean.Parser.Tactic.allGoals]
  `all_goals tac` runs `tac` on each goal, concatenating the resulting goals, if any.

syntax "and_intros"... [Lean.Parser.Tactic.tacticAnd_intros]
  `and_intros` applies `And.intro` until it does not make progress.

syntax "any_goals"... [Lean.Parser.Tactic.anyGoals]
  `any_goals tac` applies the tactic `tac` to every goal, and succeeds if at
  least one application succeeds.

syntax "apply"... [Mathlib.Tactic.tacticApply_At_]
  `apply t at i` will use forward reasoning with `t` at the hypothesis `i`.
  Explicitly, if `t : α₁ → ⋯ → αᵢ → ⋯ → αₙ` and `i` has type `αᵢ`, then this tactic will add
  metavariables/goals for any terms of `αⱼ` for `j = 1, …, i-1`,
  then replace the type of `i` with `αᵢ₊₁ → ⋯ → αₙ` by applying those metavariables and the
  original `i`.

syntax "apply"... [Lean.Parser.Tactic.apply]
  `apply e` tries to match the current goal against the conclusion of `e`'s type.
  If it succeeds, then the tactic returns as many subgoals as the number of premises that
  have not been fixed by type inference or type class resolution.
  Non-dependent premises are added before dependent ones.
  
  The `apply` tactic uses higher-order pattern matching, type class resolution,
  and first-order unification with dependent types.

syntax "apply"... [Mathlib.Tactic.applyWith]
  `apply (config := cfg) e` is like `apply e` but allows you to provide a configuration
  `cfg : ApplyConfig` to pass to the underlying apply operation.

syntax "apply?"... [Lean.Parser.Tactic.apply?]
  Searches environment for definitions or theorems that can refine the goal using `apply`
  with conditions resolved when possible with `solve_by_elim`.
  
  The optional `using` clause provides identifiers in the local context that must be
  used when closing the goal.

syntax "apply_assumption"... [Lean.Parser.Tactic.applyAssumption]
  `apply_assumption` looks for an assumption of the form `... → ∀ _, ... → head`
  where `head` matches the current goal.
  
  You can specify additional rules to apply using `apply_assumption [...]`.
  By default `apply_assumption` will also try `rfl`, `trivial`, `congrFun`, and `congrArg`.
  If you don't want these, or don't want to use all hypotheses, use `apply_assumption only [...]`.
  You can use `apply_assumption [-h]` to omit a local hypothesis.
  You can use `apply_assumption using [a₁, ...]` to use all lemmas which have been labelled
  with the attributes `aᵢ` (these attributes must be created using `register_label_attr`).
  
  `apply_assumption` will use consequences of local hypotheses obtained via `symm`.
  
  If `apply_assumption` fails, it will call `exfalso` and try again.
  Thus if there is an assumption of the form `P → ¬ Q`, the new tactic state
  will have two goals, `P` and `Q`.
  
  You can pass a further configuration via the syntax `apply_rules (config := {...}) lemmas`.
  The options supported are the same as for `solve_by_elim` (and include all the options for `apply`).

syntax "apply_ext_theorem"... [Lean.Elab.Tactic.Ext.applyExtTheorem]
  Apply a single extensionality theorem to the current goal.

syntax "apply_fun"... [Mathlib.Tactic.applyFun]
  Apply a function to an equality or inequality in either a local hypothesis or the goal.
  
  * If we have `h : a = b`, then `apply_fun f at h` will replace this with `h : f a = f b`.
  * If we have `h : a ≤ b`, then `apply_fun f at h` will replace this with `h : f a ≤ f b`,
    and create a subsidiary goal `Monotone f`.
    `apply_fun` will automatically attempt to discharge this subsidiary goal using `mono`,
    or an explicit solution can be provided with `apply_fun f at h using P`, where `P : Monotone f`.
  * If we have `h : a < b`, then `apply_fun f at h` will replace this with `h : f a < f b`,
    and create a subsidiary goal `StrictMono f` and behaves as in the previous case.
  * If we have `h : a ≠ b`, then `apply_fun f at h` will replace this with `h : f a ≠ f b`,
    and create a subsidiary goal `Injective f` and behaves as in the previous two cases.
  * If the goal is `a ≠ b`, `apply_fun f` will replace this with `f a ≠ f b`.
  * If the goal is `a = b`, `apply_fun f` will replace this with `f a = f b`,
    and create a subsidiary goal `injective f`.
    `apply_fun` will automatically attempt to discharge this subsidiary goal using local hypotheses,
    or if `f` is actually an `Equiv`,
    or an explicit solution can be provided with `apply_fun f using P`, where `P : Injective f`.
  * If the goal is `a ≤ b` (or similarly for `a < b`), and `f` is actually an `OrderIso`,
    `apply_fun f` will replace the goal with `f a ≤ f b`.
    If `f` is anything else (e.g. just a function, or an `Equiv`), `apply_fun` will fail.
  
  
  Typical usage is:
  ```lean
  open Function
  
  example (X Y Z : Type) (f : X → Y) (g : Y → Z) (H : Injective <| g ∘ f) :
      Injective f := by
    intros x x' h
    apply_fun g at h
    exact H h
  ```
  
  The function `f` is handled similarly to how it would be handled by `refine` in that `f` can contain
  placeholders. Named placeholders (like `?a` or `?_`) will produce new goals.

syntax "apply_mod_cast"... [Lean.Parser.Tactic.tacticApply_mod_cast_]
  Normalize casts in the goal and the given expression, then `apply` the expression to the goal.

syntax "apply_rfl"... [Lean.Parser.Tactic.applyRfl]
  This tactic applies to a goal whose target has the form `x ~ x`,
  where `~` is a reflexive relation other than `=`,
  that is, a relation which has a reflexive lemma tagged with the attribute @[refl].

syntax "apply_rules"... [Lean.Parser.Tactic.applyRules]
  `apply_rules [l₁, l₂, ...]` tries to solve the main goal by iteratively
  applying the list of lemmas `[l₁, l₂, ...]` or by applying a local hypothesis.
  If `apply` generates new goals, `apply_rules` iteratively tries to solve those goals.
  You can use `apply_rules [-h]` to omit a local hypothesis.
  
  `apply_rules` will also use `rfl`, `trivial`, `congrFun` and `congrArg`.
  These can be disabled, as can local hypotheses, by using `apply_rules only [...]`.
  
  You can use `apply_rules using [a₁, ...]` to use all lemmas which have been labelled
  with the attributes `aᵢ` (these attributes must be created using `register_label_attr`).
  
  You can pass a further configuration via the syntax `apply_rules (config := {...})`.
  The options supported are the same as for `solve_by_elim` (and include all the options for `apply`).
  
  `apply_rules` will try calling `symm` on hypotheses and `exfalso` on the goal as needed.
  This can be disabled with `apply_rules (config := {symm := false, exfalso := false})`.
  
  You can bound the iteration depth using the syntax `apply_rules (config := {maxDepth := n})`.
  
  Unlike `solve_by_elim`, `apply_rules` does not perform backtracking, and greedily applies
  a lemma from the list until it gets stuck.

syntax "arith_mult"... [ArithmeticFunction.arith_mult]
  `arith_mult` solves goals of the form `IsMultiplicative f` for `f : ArithmeticFunction R`
  by applying lemmas tagged with the user attribute `arith_mult`.

syntax "arith_mult?"... [ArithmeticFunction.arith_mult?]
  `arith_mult` solves goals of the form `IsMultiplicative f` for `f : ArithmeticFunction R`
  by applying lemmas tagged with the user attribute `arith_mult`, and prints out the generated
  proof term.

syntax "array_get_dec"... [Array.tacticArray_get_dec]
  This tactic, added to the `decreasing_trivial` toolbox, proves that
  `sizeOf arr[i] < sizeOf arr`, which is useful for well founded recursions
  over a nested inductive like `inductive T | mk : Array T → T`.

syntax "array_mem_dec"... [Array.tacticArray_mem_dec]
  This tactic, added to the `decreasing_trivial` toolbox, proves that `sizeOf a < sizeOf arr`
  provided that `a ∈ arr` which is useful for well founded recursions over a nested inductive like
  `inductive T | mk : Array T → T`.

syntax "assumption"... [Lean.Parser.Tactic.assumption]
  `assumption` tries to solve the main goal using a hypothesis of compatible type, or else fails.
  Note also the `‹t›` term notation, which is a shorthand for `show t by assumption`.

syntax "assumption'"... [Mathlib.Tactic.tacticAssumption']
  Try calling `assumption` on all goals; succeeds if it closes at least one goal.

syntax "assumption_mod_cast"... [Lean.Parser.Tactic.tacticAssumption_mod_cast]
  `assumption_mod_cast` is a variant of `assumption` that solves the goal
  using a hypothesis. Unlike `assumption`, it first pre-processes the goal and
  each hypothesis to move casts as far outwards as possible, so it can be used
  in more situations.
  
  Concretely, it runs `norm_cast` on the goal. For each local hypothesis `h`, it also
  normalizes `h` with `norm_cast` and tries to use that to close the goal.

syntax "aux_group₁"... [Mathlib.Tactic.Group.aux_group₁]
  Auxiliary tactic for the `group` tactic. Calls the simplifier only.

syntax "aux_group₂"... [Mathlib.Tactic.Group.aux_group₂]
  Auxiliary tactic for the `group` tactic. Calls `ring_nf` to normalize exponents.

syntax "bddDefault"... [tacticBddDefault]
  Sets are automatically bounded or cobounded in complete lattices. To use the same statements
  in complete and conditionally complete lattices but let automation fill automatically the
  boundedness proofs in complete lattices, we use the tactic `bddDefault` in the statements,
  in the form `(hA : BddAbove A := by bddDefault)`.

syntax "beta_reduce"... [Mathlib.Tactic.betaReduceStx]
  `beta_reduce at loc` completely beta reduces the given location.
  This also exists as a `conv`-mode tactic.
  
  This means that whenever there is an applied lambda expression such as
  `(fun x => f x) y` then the argument is substituted into the lambda expression
  yielding an expression such as `f y`.

syntax "bicategory_coherence"... [Mathlib.Tactic.BicategoryCoherence.tacticBicategory_coherence]
  Coherence tactic for bicategories.
  Use `pure_coherence` instead, which is a frontend to this one.

syntax "bitwise_assoc_tac"... [Nat.tacticBitwise_assoc_tac]
  Proving associativity of bitwise operations in general essentially boils down to a huge case
  distinction, so it is shorter to use this tactic instead of proving it in the general case.

syntax "borelize"... [Mathlib.Tactic.Borelize.tacticBorelize___]
  The behaviour of `borelize α` depends on the existing assumptions on `α`.
  
  - if `α` is a topological space with instances `[MeasurableSpace α] [BorelSpace α]`, then
    `borelize α` replaces the former instance by `borel α`;
  - otherwise, `borelize α` adds instances `borel α : MeasurableSpace α` and `⟨rfl⟩ : BorelSpace α`.
  
  Finally, `borelize α β γ` runs `borelize α; borelize β; borelize γ`.

syntax "bv_omega"... [Lean.Parser.Tactic.tacticBv_omega]
  `bv_omega` is `omega` with an additional preprocessor that turns statements about `BitVec` into statements about `Nat`.
  Currently the preprocessor is implemented as `try simp only [bv_toNat] at *`.
  `bv_toNat` is a `@[simp]` attribute that you can (cautiously) add to more theorems.

syntax "by_cases"... [«tacticBy_cases_:_»]
  `by_cases (h :)? p` splits the main goal into two cases, assuming `h : p` in the first branch, and `h : ¬ p` in the second branch.

syntax "by_contra"... [Std.Tactic.byContra]
  `by_contra h` proves `⊢ p` by contradiction,
  introducing a hypothesis `h : ¬p` and proving `False`.
  * If `p` is a negation `¬q`, `h : q` will be introduced instead of `¬¬q`.
  * If `p` is decidable, it uses `Decidable.byContradiction` instead of `Classical.byContradiction`.
  * If `h` is omitted, the introduced variable `_: ¬p` will be anonymous.

syntax "by_contra!"... [byContra!]
  If the target of the main goal is a proposition `p`,
  `by_contra!` reduces the goal to proving `False` using the additional hypothesis `this : ¬ p`.
  `by_contra! h` can be used to name the hypothesis `h : ¬ p`.
  The hypothesis `¬ p` will be negation normalized using `push_neg`.
  For instance, `¬ a < b` will be changed to `b ≤ a`.
  `by_contra! h : q` will normalize negations in `¬ p`, normalize negations in `q`,
  and then check that the two normalized forms are equal.
  The resulting hypothesis is the pre-normalized form, `q`.
  If the name `h` is not explicitly provided, then `this` will be used as name.
  This tactic uses classical reasoning.
  It is a variant on the tactic `by_contra`.
  Examples:
  ```lean
  example : 1 < 2 := by
    by_contra! h
    -- h : 2 ≤ 1 ⊢ False
  
  example : 1 < 2 := by
    by_contra! h : ¬ 1 < 2
    -- h : ¬ 1 < 2 ⊢ False
  ```

syntax "calc"... [calcTactic]
  Step-wise reasoning over transitive relations.
  ```
  calc
    a = b := pab
    b = c := pbc
    ...
    y = z := pyz
  ```
  proves `a = z` from the given step-wise proofs. `=` can be replaced with any
  relation implementing the typeclass `Trans`. Instead of repeating the right-
  hand sides, subsequent left-hand sides can be replaced with `_`.
  ```
  calc
    a = b := pab
    _ = c := pbc
    ...
    _ = z := pyz
  ```
  It is also possible to write the *first* relation as `<lhs>\n  _ = <rhs> :=
  <proof>`. This is useful for aligning relation symbols, especially on longer:
  identifiers:
  ```
  calc abc
    _ = bce := pabce
    _ = cef := pbcef
    ...
    _ = xyz := pwxyz
  ```
  
  `calc` works as a term, as a tactic or as a `conv` tactic.
  
  See [Theorem Proving in Lean 4][tpil4] for more information.
  
  [tpil4]: https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs

syntax "cancel_denoms"... [tacticCancel_denoms_]

syntax "cancel_denoms"... [cancelDenoms]
  `cancel_denoms` attempts to remove numerals from the denominators of fractions.
  It works on propositions that are field-valued inequalities.
  
  ```lean
  variable [LinearOrderedField α] (a b c : α)
  
  example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by
    cancel_denoms at h
    exact h
  
  example (h : a > 0) : a / 5 > 0 := by
    cancel_denoms
    exact h
  ```

syntax "case"... [Std.Tactic.casePatt]
  * `case _ : t => tac` finds the first goal that unifies with `t` and then solves it
  using `tac` or else fails. Like `show`, it changes the type of the goal to `t`.
  The `_` can optionally be a case tag, in which case it only looks at goals
  whose tag would be considered by `case` (goals with an exact tag match,
  followed by goals with the tag as a suffix, followed by goals with the tag as a prefix).
  
  * `case _ n₁ ... nₘ : t => tac` additionally names the `m` most recent hypotheses with
  inaccessible names to the given names. The names are renamed before matching against `t`.
  The `_` can optionally be a case tag.
  
  * `case _ : t := e` is short for `case _ : t => exact e`.
  
  * `case _ : t₁ | _ : t₂ | ... => tac`
  is equivalent to `(case _ : t₁ => tac); (case _ : t₂ => tac); ...`
  but with all matching done on the original list of goals --
  each goal is consumed as they are matched, so patterns may repeat or overlap.
  
  * `case _ : t` will make the matched goal be the first goal.
  `case _ : t₁ | _ : t₂ | ...` makes the matched goals be the first goals in the given order.
  
  * `case _ : t := _` and `case _ : t := ?m` are the same as `case _ : t` but in the `?m` case the
  goal tag is changed to `m`.
  In particular, the goal becomes metavariable `?m`.

syntax "case"... [Lean.Parser.Tactic.case]
  * `case tag => tac` focuses on the goal with case name `tag` and solves it using `tac`,
    or else fails.
  * `case tag x₁ ... xₙ => tac` additionally renames the `n` most recent hypotheses
    with inaccessible names to the given names.
  * `case tag₁ | tag₂ => tac` is equivalent to `(case tag₁ => tac); (case tag₂ => tac)`.

syntax "case'"... [Lean.Parser.Tactic.case']
  `case'` is similar to the `case tag => tac` tactic, but does not ensure the goal
  has been solved after applying `tac`, nor admits the goal if `tac` failed.
  Recall that `case` closes the goal using `sorry` when `tac` fails, and
  the tactic execution is not interrupted.

syntax "case'"... [Std.Tactic.casePatt']
  `case' _ : t => tac` is similar to the `case _ : t => tac` tactic,
  but it does not ensure the goal has been solved after applying `tac`,
  nor does it admit the goal if `tac` failed.
  Recall that `case` closes the goal using `sorry` when `tac` fails,
  and the tactic execution is not interrupted.

syntax "cases"... [Lean.Parser.Tactic.cases]
  Assuming `x` is a variable in the local context with an inductive type,
  `cases x` splits the main goal, producing one goal for each constructor of the
  inductive type, in which the target is replaced by a general instance of that constructor.
  If the type of an element in the local context depends on `x`,
  that element is reverted and reintroduced afterward,
  so that the case split affects that hypothesis as well.
  `cases` detects unreachable cases and closes them automatically.
  
  For example, given `n : Nat` and a goal with a hypothesis `h : P n` and target `Q n`,
  `cases n` produces one goal with hypothesis `h : P 0` and target `Q 0`,
  and one goal with hypothesis `h : P (Nat.succ a)` and target `Q (Nat.succ a)`.
  Here the name `a` is chosen automatically and is not accessible.
  You can use `with` to provide the variables names for each constructor.
  - `cases e`, where `e` is an expression instead of a variable, generalizes `e` in the goal,
    and then cases on the resulting variable.
  - Given `as : List α`, `cases as with | nil => tac₁ | cons a as' => tac₂`,
    uses tactic `tac₁` for the `nil` case, and `tac₂` for the `cons` case,
    and `a` and `as'` are used as names for the new variables introduced.
  - `cases h : e`, where `e` is a variable or an expression,
    performs cases on `e` as above, but also adds a hypothesis `h : e = ...` to each hypothesis,
    where `...` is the constructor instance for that particular case.

syntax "cases'"... [Mathlib.Tactic.cases']

syntax "cases_type"... [Mathlib.Tactic.casesType]
  * `cases_type I` applies the `cases` tactic to a hypothesis `h : (I ...)`
  * `cases_type I_1 ... I_n` applies the `cases` tactic to a hypothesis
    `h : (I_1 ...)` or ... or `h : (I_n ...)`
  * `cases_type* I` is shorthand for `· repeat cases_type I`
  * `cases_type! I` only applies `cases` if the number of resulting subgoals is <= 1.
  
  Example: The following tactic destructs all conjunctions and disjunctions in the current goal.
  ```
  cases_type* Or And
  ```

syntax "cases_type!"... [Mathlib.Tactic.casesType!]
  * `cases_type I` applies the `cases` tactic to a hypothesis `h : (I ...)`
  * `cases_type I_1 ... I_n` applies the `cases` tactic to a hypothesis
    `h : (I_1 ...)` or ... or `h : (I_n ...)`
  * `cases_type* I` is shorthand for `· repeat cases_type I`
  * `cases_type! I` only applies `cases` if the number of resulting subgoals is <= 1.
  
  Example: The following tactic destructs all conjunctions and disjunctions in the current goal.
  ```
  cases_type* Or And
  ```

syntax "casesm"... [Mathlib.Tactic.casesM]
  * `casesm p` applies the `cases` tactic to a hypothesis `h : type`
    if `type` matches the pattern `p`.
  * `casesm p_1, ..., p_n` applies the `cases` tactic to a hypothesis `h : type`
    if `type` matches one of the given patterns.
  * `casesm* p` is a more efficient and compact version of `· repeat casesm p`.
    It is more efficient because the pattern is compiled once.
  
  Example: The following tactic destructs all conjunctions and disjunctions in the current context.
  ```
  casesm* _ ∨ _, _ ∧ _
  ```

syntax "change"... [Lean.Parser.Tactic.change]
  * `change tgt'` will change the goal from `tgt` to `tgt'`,
    assuming these are definitionally equal.
  * `change t' at h` will change hypothesis `h : t` to have type `t'`, assuming
    assuming `t` and `t'` are definitionally equal.

syntax "change"... [Lean.Parser.Tactic.changeWith]
  * `change a with b` will change occurrences of `a` to `b` in the goal,
    assuming `a` and `b` are are definitionally equal.
  * `change a with b at h` similarly changes `a` to `b` in the type of hypothesis `h`.

syntax "change?"... [change?]
  `change? term` unifies `term` with the current goal, then suggests explicit `change` syntax
  that uses the resulting unified term.
  
  If `term` is not present, `change?` suggests the current goal itself. This is useful after tactics
  which transform the goal while maintaining definitional equality, such as `dsimp`; those preceding
  tactic calls can then be deleted.
  ```lean
  example : (fun x : Nat => x) 0 = 1 := by
    change? 0 = _  -- `Try this: change 0 = 1`
  ```

syntax "checkpoint"... [Lean.Parser.Tactic.checkpoint]
  `checkpoint tac` acts the same as `tac`, but it caches the input and output of `tac`,
  and if the file is re-elaborated and the input matches, the tactic is not re-run and
  its effects are reapplied to the state. This is useful for improving responsiveness
  when working on a long tactic proof, by wrapping expensive tactics with `checkpoint`.
  
  See the `save` tactic, which may be more convenient to use.
  
  (TODO: do this automatically and transparently so that users don't have to use
  this combinator explicitly.)

syntax "choose"... [Mathlib.Tactic.Choose.choose]
  * `choose a b h h' using hyp` takes a hypothesis `hyp` of the form
    `∀ (x : X) (y : Y), ∃ (a : A) (b : B), P x y a b ∧ Q x y a b`
    for some `P Q : X → Y → A → B → Prop` and outputs
    into context a function `a : X → Y → A`, `b : X → Y → B` and two assumptions:
    `h : ∀ (x : X) (y : Y), P x y (a x y) (b x y)` and
    `h' : ∀ (x : X) (y : Y), Q x y (a x y) (b x y)`. It also works with dependent versions.
  
  * `choose! a b h h' using hyp` does the same, except that it will remove dependency of
    the functions on propositional arguments if possible. For example if `Y` is a proposition
    and `A` and `B` are nonempty in the above example then we will instead get
    `a : X → A`, `b : X → B`, and the assumptions
    `h : ∀ (x : X) (y : Y), P x y (a x) (b x)` and
    `h' : ∀ (x : X) (y : Y), Q x y (a x) (b x)`.
  
  The `using hyp` part can be omitted,
  which will effectively cause `choose` to start with an `intro hyp`.
  
  Examples:
  
  ```
  example (h : ∀ n m : ℕ, ∃ i j, m = n + i ∨ m + j = n) : True := by
    choose i j h using h
    guard_hyp i : ℕ → ℕ → ℕ
    guard_hyp j : ℕ → ℕ → ℕ
    guard_hyp h : ∀ (n m : ℕ), m = n + i n m ∨ m + j n m = n
    trivial
  ```
  
  ```
  example (h : ∀ i : ℕ, i < 7 → ∃ j, i < j ∧ j < i+i) : True := by
    choose! f h h' using h
    guard_hyp f : ℕ → ℕ
    guard_hyp h : ∀ (i : ℕ), i < 7 → i < f i
    guard_hyp h' : ∀ (i : ℕ), i < 7 → f i < i + i
    trivial
  ```

syntax "choose!"... [Mathlib.Tactic.Choose.tacticChoose!___Using_]
  * `choose a b h h' using hyp` takes a hypothesis `hyp` of the form
    `∀ (x : X) (y : Y), ∃ (a : A) (b : B), P x y a b ∧ Q x y a b`
    for some `P Q : X → Y → A → B → Prop` and outputs
    into context a function `a : X → Y → A`, `b : X → Y → B` and two assumptions:
    `h : ∀ (x : X) (y : Y), P x y (a x y) (b x y)` and
    `h' : ∀ (x : X) (y : Y), Q x y (a x y) (b x y)`. It also works with dependent versions.
  
  * `choose! a b h h' using hyp` does the same, except that it will remove dependency of
    the functions on propositional arguments if possible. For example if `Y` is a proposition
    and `A` and `B` are nonempty in the above example then we will instead get
    `a : X → A`, `b : X → B`, and the assumptions
    `h : ∀ (x : X) (y : Y), P x y (a x) (b x)` and
    `h' : ∀ (x : X) (y : Y), Q x y (a x) (b x)`.
  
  The `using hyp` part can be omitted,
  which will effectively cause `choose` to start with an `intro hyp`.
  
  Examples:
  
  ```
  example (h : ∀ n m : ℕ, ∃ i j, m = n + i ∨ m + j = n) : True := by
    choose i j h using h
    guard_hyp i : ℕ → ℕ → ℕ
    guard_hyp j : ℕ → ℕ → ℕ
    guard_hyp h : ∀ (n m : ℕ), m = n + i n m ∨ m + j n m = n
    trivial
  ```
  
  ```
  example (h : ∀ i : ℕ, i < 7 → ∃ j, i < j ∧ j < i+i) : True := by
    choose! f h h' using h
    guard_hyp f : ℕ → ℕ
    guard_hyp h : ∀ (i : ℕ), i < 7 → i < f i
    guard_hyp h' : ∀ (i : ℕ), i < 7 → f i < i + i
    trivial
  ```

syntax "classical"... [Std.Tactic.tacticClassical_]
  `classical tacs` runs `tacs` in a scope where `Classical.propDecidable` is a low priority
  local instance.
  
  Note that (unlike lean 3) `classical` is a scoping tactic - it adds the instance only within the
  scope of the tactic.

syntax "classical!"... [Std.Tactic.tacticClassical!]
  `classical!` has been removed; use `classical` instead

syntax "clean"... [Mathlib.Tactic.tacticClean_]
  (Deprecated) `clean t` is a macro for `exact clean% t`.

syntax "clear"... [Lean.Elab.Tactic.clearExcept]
  Clears all hypotheses it can besides those provided

syntax "clear"... [Lean.Parser.Tactic.clear]
  `clear x...` removes the given hypotheses, or fails if there are remaining
  references to a hypothesis.

syntax "clear!"... [Mathlib.Tactic.clear!]
  A variant of `clear` which clears not only the given hypotheses but also any other hypotheses
  depending on them

syntax "clear_"... [Mathlib.Tactic.clear_]
  Clear all hypotheses starting with `_`, like `_match` and `_let_match`.

syntax "clear_aux_decl"... [Mathlib.Tactic.clearAuxDecl]
  This tactic clears all auxiliary declarations from the context.

syntax "clear_value"... [Mathlib.Tactic.clearValue]
  `clear_value n₁ n₂ ...` clears the bodies of the local definitions `n₁, n₂ ...`, changing them
  into regular hypotheses. A hypothesis `n : α := t` is changed to `n : α`.
  
  The order of `n₁ n₂ ...` does not matter, and values will be cleared in reverse order of
  where they appear in the context.

syntax "coherence"... [Mathlib.Tactic.Coherence.coherence]
  Use the coherence theorem for monoidal categories to solve equations in a monoidal equation,
  where the two sides only differ by replacing strings of monoidal structural morphisms
  (that is, associators, unitors, and identities)
  with different strings of structural morphisms with the same source and target.
  
  That is, `coherence` can handle goals of the form
  `a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`
  where `a = a'`, `b = b'`, and `c = c'` can be proved using `pure_coherence`.
  
  (If you have very large equations on which `coherence` is unexpectedly failing,
  you may need to increase the typeclass search depth,
  using e.g. `set_option synthInstance.maxSize 500`.)

syntax "compareOfLessAndEq_rfl"... [tacticCompareOfLessAndEq_rfl]
  This attempts to prove that a given instance of `compare` is equal to `compareOfLessAndEq` by
  introducing the arguments and trying the following approaches in order:
  
  1. seeing if `rfl` works
  2. seeing if the `compare` at hand is nonetheless essentially `compareOfLessAndEq`, but, because of
  implicit arguments, requires us to unfold the defs and split the `if`s in the definition of
  `compareOfLessAndEq`
  3. seeing if we can split by cases on the arguments, then see if the defs work themselves out
    (useful when `compare` is defined via a `match` statement, as it is for `Bool`)

syntax "compute_degree"... [Mathlib.Tactic.ComputeDegree.computeDegree]
  `compute_degree` is a tactic to solve goals of the form
  *  `natDegree f = d`,
  *  `degree f = d`,
  *  `natDegree f ≤ d`,
  *  `degree f ≤ d`,
  *  `coeff f d = r`, if `d` is the degree of `f`.
  
  The tactic may leave goals of the form `d' = d` `d' ≤ d`, or `r ≠ 0`, where `d'` in `ℕ` or
  `WithBot ℕ` is the tactic's guess of the degree, and `r` is the coefficient's guess of the
  leading coefficient of `f`.
  
  `compute_degree` applies `norm_num` to the left-hand side of all side goals, trying to clos them.
  
  The variant `compute_degree!` first applies `compute_degree`.
  Then it uses `norm_num` on all the whole remaining goals and tries `assumption`.

syntax "compute_degree!"... [Mathlib.Tactic.ComputeDegree.tacticCompute_degree!]
  `compute_degree` is a tactic to solve goals of the form
  *  `natDegree f = d`,
  *  `degree f = d`,
  *  `natDegree f ≤ d`,
  *  `degree f ≤ d`,
  *  `coeff f d = r`, if `d` is the degree of `f`.
  
  The tactic may leave goals of the form `d' = d` `d' ≤ d`, or `r ≠ 0`, where `d'` in `ℕ` or
  `WithBot ℕ` is the tactic's guess of the degree, and `r` is the coefficient's guess of the
  leading coefficient of `f`.
  
  `compute_degree` applies `norm_num` to the left-hand side of all side goals, trying to clos them.
  
  The variant `compute_degree!` first applies `compute_degree`.
  Then it uses `norm_num` on all the whole remaining goals and tries `assumption`.

syntax "congr"... [Std.Tactic.congrConfigWith]
  Apply congruence (recursively) to goals of the form `⊢ f as = f bs` and `⊢ HEq (f as) (f bs)`.
  * `congr n` controls the depth of the recursive applications.
    This is useful when `congr` is too aggressive in breaking down the goal.
    For example, given `⊢ f (g (x + y)) = f (g (y + x))`,
    `congr` produces the goals `⊢ x = y` and `⊢ y = x`,
    while `congr 2` produces the intended `⊢ x + y = y + x`.
  * If, at any point, a subgoal matches a hypothesis then the subgoal will be closed.
  * You can use `congr with p (: n)?` to call `ext p (: n)?` to all subgoals generated by `congr`.
    For example, if the goal is `⊢ f '' s = g '' s` then `congr with x` generates the goal
    `x : α ⊢ f x = g x`.

syntax "congr"... [Std.Tactic.congrConfig]
  Apply congruence (recursively) to goals of the form `⊢ f as = f bs` and `⊢ HEq (f as) (f bs)`.
  The optional parameter is the depth of the recursive applications.
  This is useful when `congr` is too aggressive in breaking down the goal.
  For example, given `⊢ f (g (x + y)) = f (g (y + x))`,
  `congr` produces the goals `⊢ x = y` and `⊢ y = x`,
  while `congr 2` produces the intended `⊢ x + y = y + x`.

syntax "congr"... [Lean.Parser.Tactic.congr]
  Apply congruence (recursively) to goals of the form `⊢ f as = f bs` and `⊢ HEq (f as) (f bs)`.
  The optional parameter is the depth of the recursive applications.
  This is useful when `congr` is too aggressive in breaking down the goal.
  For example, given `⊢ f (g (x + y)) = f (g (y + x))`,
  `congr` produces the goals `⊢ x = y` and `⊢ y = x`,
  while `congr 2` produces the intended `⊢ x + y = y + x`.

syntax "congr!"... [Congr!.congr!]
  Equates pieces of the left-hand side of a goal to corresponding pieces of the right-hand side by
  recursively applying congruence lemmas. For example, with `⊢ f as = g bs` we could get
  two goals `⊢ f = g` and `⊢ as = bs`.
  
  Syntax:
  ```
  congr!
  congr! n
  congr! with x y z
  congr! n with x y z
  ```
  Here, `n` is a natural number and `x`, `y`, `z` are `rintro` patterns (like `h`, `rfl`, `⟨x, y⟩`,
  `_`, `-`, `(h | h)`, etc.).
  
  The `congr!` tactic is similar to `congr` but is more insistent in trying to equate left-hand sides
  to right-hand sides of goals. Here is a list of things it can try:
  
  - If `R` in `⊢ R x y` is a reflexive relation, it will convert the goal to `⊢ x = y` if possible.
    The list of reflexive relations is maintained using the `@[refl]` attribute.
    As a special case, `⊢ p ↔ q` is converted to `⊢ p = q` during congruence processing and then
    returned to `⊢ p ↔ q` form at the end.
  
  - If there is a user congruence lemma associated to the goal (for instance, a `@[congr]`-tagged
    lemma applying to `⊢ List.map f xs = List.map g ys`), then it will use that.
  
  - It uses a congruence lemma generator at least as capable as the one used by `congr` and `simp`.
    If there is a subexpression that can be rewritten by `simp`, then `congr!` should be able
    to generate an equality for it.
  
  - It can do congruences of pi types using lemmas like `implies_congr` and `pi_congr`.
  
  - Before applying congruences, it will run the `intros` tactic automatically.
    The introduced variables can be given names using a `with` clause.
    This helps when congruence lemmas provide additional assumptions in hypotheses.
  
  - When there is an equality between functions, so long as at least one is obviously a lambda, we
    apply `funext` or `Function.hfunext`, which allows for congruence of lambda bodies.
  
  - It can try to close goals using a few strategies, including checking
    definitional equality, trying to apply `Subsingleton.elim` or `proof_irrel_heq`, and using the
    `assumption` tactic.
  
  The optional parameter is the depth of the recursive applications.
  This is useful when `congr!` is too aggressive in breaking down the goal.
  For example, given `⊢ f (g (x + y)) = f (g (y + x))`,
  `congr!` produces the goals `⊢ x = y` and `⊢ y = x`,
  while `congr! 2` produces the intended `⊢ x + y = y + x`.
  
  The `congr!` tactic also takes a configuration option, for example
  ```lean
  congr! (config := {transparency := .default}) 2
  ```
  This overrides the default, which is to apply congruence lemmas at reducible transparency.
  
  The `congr!` tactic is aggressive with equating two sides of everything. There is a predefined
  configuration that uses a different strategy:
  Try
  ```lean
  congr! (config := .unfoldSameFun)
  ```
  This only allows congruences between functions applications of definitionally equal functions,
  and it applies congruence lemmas at default transparency (rather than just reducible).
  This is somewhat like `congr`.
  
  See `Congr!.Config` for all options.

syntax "congrm"... [Mathlib.Tactic.congrM]
  `congrm e` is a tactic for proving goals of the form `lhs = rhs`, `lhs ↔ rhs`, `HEq lhs rhs`,
  or `R lhs rhs` when `R` is a reflexive relation.
  The expression `e` is a pattern containing placeholders `?_`,
  and this pattern is matched against `lhs` and `rhs` simultaneously.
  These placeholders generate new goals that state that corresponding subexpressions
  in `lhs` and `rhs` are equal.
  If the placeholders have names, such as `?m`, then the new goals are given tags with those names.
  
  Examples:
  ```lean
  example {a b c d : ℕ} :
      Nat.pred a.succ * (d + (c + a.pred)) = Nat.pred b.succ * (b + (c + d.pred)) := by
    congrm Nat.pred (Nat.succ ?h1) * (?h2 + ?h3)
    /-  Goals left:
    case h1 ⊢ a = b
    case h2 ⊢ d = b
    case h3 ⊢ c + a.pred = c + d.pred
    -/
    sorry
    sorry
    sorry
  
  example {a b : ℕ} (h : a = b) : (fun y : ℕ => ∀ z, a + a = z) = (fun x => ∀ z, b + a = z) := by
    congrm fun x => ∀ w, ?_ + a = w
    -- ⊢ a = b
    exact h
  ```
  
  The `congrm` command is a convenient frontend to `congr(...)` congruence quotations.
  If the goal is an equality, `congrm e` is equivalent to `refine congr(e')` where `e'` is
  built from `e` by replacing each placeholder `?m` by `$(?m)`.
  The pattern `e` is allowed to contain `$(...)` expressions to immediately substitute
  equality proofs into the congruence, just like for congruence quotations.

syntax "congrm?"... [tacticCongrm?]
  Display a widget panel allowing to generate a `congrm` call with holes specified by selecting
  subexpressions in the goal.

syntax "constructor"... [Lean.Parser.Tactic.constructor]
  If the main goal's target type is an inductive type, `constructor` solves it with
  the first matching constructor, or else fails.

syntax "constructorm"... [Mathlib.Tactic.constructorM]
  * `constructorm p_1, ..., p_n` applies the `constructor` tactic to the main goal
    if `type` matches one of the given patterns.
  * `constructorm* p` is a more efficient and compact version of `· repeat constructorm p`.
    It is more efficient because the pattern is compiled once.
  
  Example: The following tactic proves any theorem like `True ∧ (True ∨ True)` consisting of
  and/or/true:
  ```
  constructorm* _ ∨ _, _ ∧ _, True
  ```

syntax "continuity"... [tacticContinuity]
  The tactic `continuity` solves goals of the form `Continuous f` by applying lemmas tagged with the
  `continuity` user attribute.

syntax "continuity?"... [tacticContinuity?]
  The tactic `continuity` solves goals of the form `Continuous f` by applying lemmas tagged with the
  `continuity` user attribute.

syntax "contradiction"... [Lean.Parser.Tactic.contradiction]
  `contradiction` closes the main goal if its hypotheses are "trivially contradictory".
  - Inductive type/family with no applicable constructors
  ```lean
  example (h : False) : p := by contradiction
  ```
  - Injectivity of constructors
  ```lean
  example (h : none = some true) : p := by contradiction  --
  ```
  - Decidable false proposition
  ```lean
  example (h : 2 + 2 = 3) : p := by contradiction
  ```
  - Contradictory hypotheses
  ```lean
  example (h : p) (h' : ¬ p) : q := by contradiction
  ```
  - Other simple contradictions such as
  ```lean
  example (x : Nat) (h : x ≠ x) : p := by contradiction
  ```

syntax "contrapose"... [Mathlib.Tactic.Contrapose.contrapose]
  Transforms the goal into its contrapositive.
  * `contrapose`     turns a goal `P → Q` into `¬ Q → ¬ P`
  * `contrapose h`   first reverts the local assumption `h`, and then uses `contrapose` and `intro h`
  * `contrapose h with new_h` uses the name `new_h` for the introduced hypothesis

syntax "contrapose!"... [Mathlib.Tactic.Contrapose.contrapose!]
  Transforms the goal into its contrapositive and uses pushes negations inside `P` and `Q`.
  Usage matches `contrapose`

syntax "conv"... [Lean.Parser.Tactic.Conv.conv]
  `conv => ...` allows the user to perform targeted rewriting on a goal or hypothesis,
  by focusing on particular subexpressions.
  
  See <https://lean-lang.org/theorem_proving_in_lean4/conv.html> for more details.
  
  Basic forms:
  * `conv => cs` will rewrite the goal with conv tactics `cs`.
  * `conv at h => cs` will rewrite hypothesis `h`.
  * `conv in pat => cs` will rewrite the first subexpression matching `pat` (see `pattern`).

syntax "conv'"... [Lean.Parser.Tactic.Conv.convTactic]
  Executes the given conv block without converting regular goal into a `conv` goal.

syntax "conv?"... [tacticConv?]
  Display a widget panel allowing to generate a `conv` call zooming to the subexpression selected
  in the goal.

syntax "conv_lhs"... [Mathlib.Tactic.Conv.convLHS]

syntax "conv_rhs"... [Mathlib.Tactic.Conv.convRHS]

syntax "convert"... [Mathlib.Tactic.convert]
  The `exact e` and `refine e` tactics require a term `e` whose type is
  definitionally equal to the goal. `convert e` is similar to `refine e`,
  but the type of `e` is not required to exactly match the
  goal. Instead, new goals are created for differences between the type
  of `e` and the goal using the same strategies as the `congr!` tactic.
  For example, in the proof state
  
  ```lean
  n : ℕ,
  e : Prime (2 * n + 1)
  ⊢ Prime (n + n + 1)
  ```
  
  the tactic `convert e using 2` will change the goal to
  
  ```lean
  ⊢ n + n = 2 * n
  ```
  
  In this example, the new goal can be solved using `ring`.
  
  The `using 2` indicates it should iterate the congruence algorithm up to two times,
  where `convert e` would use an unrestricted number of iterations and lead to two
  impossible goals: `⊢ HAdd.hAdd = HMul.hMul` and `⊢ n = 2`.
  
  A variant configuration is `convert (config := .unfoldSameFun) e`, which only equates function
  applications for the same function (while doing so at the higher `default` transparency).
  This gives the same goal of `⊢ n + n = 2 * n` without needing `using 2`.
  
  The `convert` tactic applies congruence lemmas eagerly before reducing,
  therefore it can fail in cases where `exact` succeeds:
  ```lean
  def p (n : ℕ) := True
  example (h : p 0) : p 1 := by exact h -- succeeds
  example (h : p 0) : p 1 := by convert h -- fails, with leftover goal `1 = 0`
  ```
  Limiting the depth of recursion can help with this. For example, `convert h using 1` will work
  in this case.
  
  The syntax `convert ← e` will reverse the direction of the new goals
  (producing `⊢ 2 * n = n + n` in this example).
  
  Internally, `convert e` works by creating a new goal asserting that
  the goal equals the type of `e`, then simplifying it using
  `congr!`. The syntax `convert e using n` can be used to control the
  depth of matching (like `congr! n`). In the example, `convert e using 1`
  would produce a new goal `⊢ n + n + 1 = 2 * n + 1`.
  
  Refer to the `congr!` tactic to understand the congruence operations. One of its many
  features is that if `x y : t` and an instance `Subsingleton t` is in scope,
  then any goals of the form `x = y` are solved automatically.
  
  Like `congr!`, `convert` takes an optional `with` clause of `rintro` patterns,
  for example `convert e using n with x y z`.
  
  The `convert` tactic also takes a configuration option, for example
  ```lean
  convert (config := {transparency := .default}) h
  ```
  These are passed to `congr!`. See `Congr!.Config` for options.

syntax "convert_to"... [Mathlib.Tactic.convertTo]
  `convert_to g using n` attempts to change the current goal to `g`, but unlike `change`,
  it will generate equality proof obligations using `congr! n` to resolve discrepancies.
  `convert_to g` defaults to using `congr! 1`.
  `convert_to` is similar to `convert`, but `convert_to` takes a type (the desired subgoal) while
  `convert` takes a proof term.
  That is, `convert_to g using n` is equivalent to `convert (?_ : g) using n`.
  
  The syntax for `convert_to` is the same as for `convert`, and it has variations such as
  `convert_to ← g` and `convert_to (config := {transparency := .default}) g`.

syntax "dbg_trace"... [Lean.Parser.Tactic.dbgTrace]
  `dbg_trace "foo"` prints `foo` when elaborated.
  Useful for debugging tactic control flow:
  ```
  example : False ∨ True := by
    first
    | apply Or.inl; trivial; dbg_trace "left"
    | apply Or.inr; trivial; dbg_trace "right"
  ```

syntax "decreasing_tactic"... [tacticDecreasing_tactic]
  `decreasing_tactic` is called by default on well-founded recursions in order
  to synthesize a proof that recursive calls decrease along the selected
  well founded relation. It can be locally overridden by using `decreasing_by tac`
  on the recursive definition, and it can also be globally extended by adding
  more definitions for `decreasing_tactic` (or `decreasing_trivial`,
  which this tactic calls).

syntax "decreasing_trivial"... [tacticDecreasing_trivial]
  Extensible helper tactic for `decreasing_tactic`. This handles the "base case"
  reasoning after applying lexicographic order lemmas.
  It can be extended by adding more macro definitions, e.g.
  ```
  macro_rules | `(tactic| decreasing_trivial) => `(tactic| linarith)
  ```

syntax "decreasing_trivial_pre_omega"... [tacticDecreasing_trivial_pre_omega]
  Variant of `decreasing_trivial` that does not use `omega`, intended to be used in core modules
  before `omega` is available.

syntax "decreasing_with"... [tacticDecreasing_with_]
  Constructs a proof of decreasing along a well founded relation, by applying
  lexicographic order lemmas and using `ts` to solve the base case. If it fails,
  it prints a message to help the user diagnose an ill-founded recursive definition.

syntax "delta"... [Lean.Parser.Tactic.delta]
  `delta id1 id2 ...` delta-expands the definitions `id1`, `id2`, ....
  This is a low-level tactic, it will expose how recursive definitions have been
  compiled by Lean.

syntax "discrete_cases"... [CategoryTheory.Discrete.tacticDiscrete_cases]
  A simple tactic to run `cases` on any `Discrete α` hypotheses.

syntax "done"... [Lean.Parser.Tactic.done]
  `done` succeeds iff there are no remaining goals.

syntax "dsimp"... [Lean.Parser.Tactic.dsimp]
  The `dsimp` tactic is the definitional simplifier. It is similar to `simp` but only
  applies theorems that hold by reflexivity. Thus, the result is guaranteed to be
  definitionally equal to the input.

syntax "dsimp!"... [Lean.Parser.Tactic.dsimpAutoUnfold]
  `dsimp!` is shorthand for `dsimp` with `autoUnfold := true`.
  This will rewrite with all equation lemmas, which can be used to
  partially evaluate many definitions.

syntax "dsimp?"... [Lean.Parser.Tactic.dsimpTrace]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "dsimp?!"... [Lean.Parser.Tactic.tacticDsimp?!_]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "eapply"... [Std.Tactic.tacticEapply_]
  `eapply e` is like `apply e` but it does not add subgoals for variables that appear
  in the types of other goals. Note that this can lead to a failure where there are
  no goals remaining but there are still metavariables in the term:
  ```
  example (h : ∀ x : Nat, x = x → True) : True := by
    eapply h
    rfl
    -- no goals
  -- (kernel) declaration has metavariables '_example'
  ```

syntax "econstructor"... [tacticEconstructor]
  `econstructor` is like `constructor`
  (it calls `apply` using the first matching constructor of an inductive datatype)
  except only non-dependent premises are added as new goals.

syntax "elementwise"... [Tactic.Elementwise.tacticElementwise___]

syntax "elementwise!"... [Tactic.Elementwise.tacticElementwise!___]

syntax "eq_refl"... [Lean.Parser.Tactic.eqRefl]
  `eq_refl` is equivalent to `exact rfl`, but has a few optimizations.

syntax "erw"... [Lean.Parser.Tactic.tacticErw__]
  `erw [rules]` is a shorthand for `rw (config := { transparency := .default }) [rules]`.
  This does rewriting up to unfolding of regular definitions (by comparison to regular `rw`
  which only unfolds `@[reducible]` definitions).

syntax "eta_expand"... [Mathlib.Tactic.etaExpandStx]
  `eta_expand at loc` eta expands all sub-expressions at the given location.
  It also beta reduces any applications of eta expanded terms, so it puts it
  into an eta-expanded "normal form."
  This also exists as a `conv`-mode tactic.
  
  For example, if `f` takes two arguments, then `f` becomes `fun x y => f x y`
  and `f x` becomes `fun y => f x y`.
  
  This can be useful to turn, for example, a raw `HAdd.hAdd` into `fun x y => x + y`.

syntax "eta_reduce"... [Mathlib.Tactic.etaReduceStx]
  `eta_reduce at loc` eta reduces all sub-expressions at the given location.
  This also exists as a `conv`-mode tactic.
  
  For example, `fun x y => f x y` becomes `f` after eta reduction.

syntax "eta_struct"... [Mathlib.Tactic.etaStructStx]
  `eta_struct at loc` transforms structure constructor applications such as `S.mk x.1 ... x.n`
  (pretty printed as, for example, `{a := x.a, b := x.b, ...}`) into `x`.
  This also exists as a `conv`-mode tactic.
  
  The transformation is known as eta reduction for structures, and it yields definitionally
  equal expressions.
  
  For example, given `x : α × β`, then `(x.1, x.2)` becomes `x` after this transformation.

syntax "exact"... [Lean.Parser.Tactic.exact]
  `exact e` closes the main goal if its target type matches that of `e`.

syntax "exact?"... [Lean.Parser.Tactic.exact?]
  Searches environment for definitions or theorems that can solve the goal using `exact`
  with conditions resolved by `solve_by_elim`.
  
  The optional `using` clause provides identifiers in the local context that must be
  used by `exact?` when closing the goal.  This is most useful if there are multiple
  ways to resolve the goal, and one wants to guide which lemma is used.

syntax "exact_mod_cast"... [Lean.Parser.Tactic.tacticExact_mod_cast_]
  Normalize casts in the goal and the given expression, then close the goal with `exact`.

syntax "exacts"... [Std.Tactic.exacts]
  Like `exact`, but takes a list of terms and checks that all goals are discharged after the tactic.

syntax "exfalso"... [Lean.Parser.Tactic.tacticExfalso]
  `exfalso` converts a goal `⊢ tgt` into `⊢ False` by applying `False.elim`.

syntax "exists"... [Lean.Parser.Tactic.«tacticExists_,,»]
  `exists e₁, e₂, ...` is shorthand for `refine ⟨e₁, e₂, ...⟩; try trivial`.
  It is useful for existential goals.

syntax "existsi"... [Mathlib.Tactic.«tacticExistsi_,,»]
  `existsi e₁, e₂, ⋯` applies the tactic `refine ⟨e₁, e₂, ⋯, ?_⟩`. It's purpose is to instantiate
  existential quantifiers.
  
  Examples:
  
  ```lean
  example : ∃ x : Nat, x = x := by
    existsi 42
    rfl
  
  example : ∃ x : Nat, ∃ y : Nat, x = y := by
    existsi 42, 42
    rfl
  ```

syntax "ext"... [Lean.Elab.Tactic.Ext.ext]
  Applies extensionality lemmas that are registered with the `@[ext]` attribute.
  * `ext pat*` applies extensionality theorems as much as possible,
    using the patterns `pat*` to introduce the variables in extensionality theorems using `rintro`.
    For example, the patterns are used to name the variables introduced by lemmas such as `funext`.
  * Without patterns,`ext` applies extensionality lemmas as much
    as possible but introduces anonymous hypotheses whenever needed.
  * `ext pat* : n` applies ext theorems only up to depth `n`.
  
  The `ext1 pat*` tactic is like `ext pat*` except that it only applies a single extensionality theorem.
  
  Unused patterns will generate warning.
  Patterns that don't match the variables will typically result in the introduction of anonymous hypotheses.

syntax "ext1"... [Lean.Elab.Tactic.Ext.tacticExt1___]
  `ext1 pat*` is like `ext pat*` except that it only applies a single extensionality theorem rather
  than recursively applying as many extensionality theorems as possible.
  
  The `pat*` patterns are processed using the `rintro` tactic.
  If no patterns are supplied, then variables are introduced anonymously using the `intros` tactic.

syntax "extract_goal"... [Mathlib.Tactic.ExtractGoal.extractGoal]
  - `extract_goal` formats the current goal as a stand-alone theorem or definition after
    cleaning up the local context of irrelevant variables.
    A variable is *relevant* if (1) it occurs in the target type, (2) there is a relevant variable
    that depends on it, or (3) the type of the variable is a proposition that depends on a
    relevant variable.
  
    If the target is `False`, then for convenience `extract_goal` includes all variables.
  - `extract_goal *` formats the current goal without cleaning up the local context.
  - `extract_goal a b c ...` formats the current goal after removing everything that the given
    variables `a`, `b`, `c`, ... do not depend on.
  - `extract_goal ... using name` uses the name `name` for the theorem or definition rather than
    the autogenerated name.
  
  The tactic tries to produce an output that can be copy-pasted and just work,
  but its success depends on whether the expressions are amenable
  to being unambiguously pretty printed.
  
  The tactic responds to pretty printing options.
  For example, `set_option pp.all true in extract_goal` gives the `pp.all` form.

syntax "extract_lets"... [Mathlib.extractLets]
  The `extract_lets at h` tactic takes a local hypothesis of the form `h : let x := v; b`
  and introduces a new local definition `x := v` while changing `h` to be `h : b`.  It can be thought
  of as being a `cases` tactic for `let` expressions. It can also be thought of as being like
  `intros at h` for `let` expressions.
  
  For example, if `h : let x := 1; x = x`, then `extract_lets x at h` introduces `x : Nat := 1` and
  changes `h` to `h : x = x`.
  
  Just like `intros`, the `extract_lets` tactic either takes a list of names, in which case
  that specifies the number of `let` bindings that must be extracted, or it takes no names, in which
  case all the `let` bindings are extracted.
  
  The tactic `extract_lets` (without `at`) or `extract_lets at h ⊢` acts as a weaker
  form of `intros` on the goal that only introduces obvious `let`s.

syntax "fail"... [Lean.Parser.Tactic.fail]
  `fail msg` is a tactic that always fails, and produces an error using the given message.

syntax "fail_if_no_progress"... [Mathlib.Tactic.failIfNoProgress]
  `fail_if_no_progress tacs` evaluates `tacs`, and fails if no progress is made on the main goal
  or the local context at reducible transparency.

syntax "fail_if_success"... [Lean.Parser.Tactic.failIfSuccess]
  `fail_if_success t` fails if the tactic `t` succeeds.

syntax "false_or_by_contra"... [Lean.Parser.Tactic.falseOrByContra]
  Changes the goal to `False`, retaining as much information as possible:
  
  * If the goal is `False`, do nothing.
  * If the goal is an implication or a function type, introduce the argument and restart.
    (In particular, if the goal is `x ≠ y`, introduce `x = y`.)
  * Otherwise, for a propositional goal `P`, replace it with `¬ ¬ P`
    (attempting to find a `Decidable` instance, but otherwise falling back to working classically)
    and introduce `¬ P`.
  * For a non-propositional goal use `False.elim`.

syntax "fapply"... [Std.Tactic.tacticFapply_]
  `fapply e` is like `apply e` but it adds goals in the order they appear,
  rather than putting the dependent goals first.

syntax "fconstructor"... [tacticFconstructor]
  `fconstructor` is like `constructor`
  (it calls `apply` using the first matching constructor of an inductive datatype)
  except that it does not reorder goals.

syntax "field_simp"... [Mathlib.Tactic.FieldSimp.fieldSimp]
  The goal of `field_simp` is to reduce an expression in a field to an expression of the form `n / d`
  where neither `n` nor `d` contains any division symbol, just using the simplifier (with a carefully
  crafted simpset named `field_simps`) to reduce the number of division symbols whenever possible by
  iterating the following steps:
  
  - write an inverse as a division
  - in any product, move the division to the right
  - if there are several divisions in a product, group them together at the end and write them as a
    single division
  - reduce a sum to a common denominator
  
  If the goal is an equality, this simpset will also clear the denominators, so that the proof
  can normally be concluded by an application of `ring`.
  
  `field_simp [hx, hy]` is a short form for
  `simp (disch := field_simp_discharge) [-one_div, -one_divp, -mul_eq_zero, hx, hy, field_simps]`
  
  Note that this naive algorithm will not try to detect common factors in denominators to reduce the
  complexity of the resulting expression. Instead, it relies on the ability of `ring` to handle
  complicated expressions in the next step.
  
  As always with the simplifier, reduction steps will only be applied if the preconditions of the
  lemmas can be checked. This means that proofs that denominators are nonzero should be included. The
  fact that a product is nonzero when all factors are, and that a power of a nonzero number is
  nonzero, are included in the simpset, but more complicated assertions (especially dealing with sums)
  should be given explicitly. If your expression is not completely reduced by the simplifier
  invocation, check the denominators of the resulting expression and provide proofs that they are
  nonzero to enable further progress.
  
  To check that denominators are nonzero, `field_simp` will look for facts in the context, and
  will try to apply `norm_num` to close numerical goals.
  
  The invocation of `field_simp` removes the lemma `one_div` from the simpset, as this lemma
  works against the algorithm explained above. It also removes
  `mul_eq_zero : x * y = 0 ↔ x = 0 ∨ y = 0`, as `norm_num` can not work on disjunctions to
  close goals of the form `24 ≠ 0`, and replaces it with `mul_ne_zero : x ≠ 0 → y ≠ 0 → x * y ≠ 0`
  creating two goals instead of a disjunction.
  
  For example,
  ```lean
  example (a b c d x y : ℂ) (hx : x ≠ 0) (hy : y ≠ 0) :
      a + b / x + c / x^2 + d / x^3 = a + x⁻¹ * (y * b / y + (d / x + c) / x) := by
    field_simp
    ring
  ```
  
  Moreover, the `field_simp` tactic can also take care of inverses of units in
  a general (commutative) monoid/ring and partial division `/ₚ`, see `Algebra.Group.Units`
  for the definition. Analogue to the case above, the lemma `one_divp` is removed from the simpset
  as this works against the algorithm. If you have objects with an `IsUnit x` instance like
  `(x : R) (hx : IsUnit x)`, you should lift them with
  `lift x to Rˣ using id hx; rw [IsUnit.unit_of_val_units] clear hx`
  before using `field_simp`.
  
  See also the `cancel_denoms` tactic, which tries to do a similar simplification for expressions
  that have numerals in denominators.
  The tactics are not related: `cancel_denoms` will only handle numeric denominators, and will try to
  entirely remove (numeric) division from the expression by multiplying by a factor.

syntax "field_simp_discharge"... [Mathlib.Tactic.FieldSimp.tacticField_simp_discharge]
  Discharge strategy for the `field_simp` tactic.

syntax "filter_upwards"... [Mathlib.Tactic.filterUpwards]
  `filter_upwards [h₁, ⋯, hₙ]` replaces a goal of the form `s ∈ f` and terms
  `h₁ : t₁ ∈ f, ⋯, hₙ : tₙ ∈ f` with `∀ x, x ∈ t₁ → ⋯ → x ∈ tₙ → x ∈ s`.
  The list is an optional parameter, `[]` being its default value.
  
  `filter_upwards [h₁, ⋯, hₙ] with a₁ a₂ ⋯ aₖ` is a short form for
  `{ filter_upwards [h₁, ⋯, hₙ], intros a₁ a₂ ⋯ aₖ }`.
  
  `filter_upwards [h₁, ⋯, hₙ] using e` is a short form for
  `{ filter_upwards [h1, ⋯, hn], exact e }`.
  
  Combining both shortcuts is done by writing `filter_upwards [h₁, ⋯, hₙ] with a₁ a₂ ⋯ aₖ using e`.
  Note that in this case, the `aᵢ` terms can be used in `e`.

syntax "fin_cases"... [Lean.Elab.Tactic.finCases]
  `fin_cases h` performs case analysis on a hypothesis of the form
  `h : A`, where `[Fintype A]` is available, or
  `h : a ∈ A`, where `A : Finset X`, `A : Multiset X` or `A : List X`.
  
  As an example, in
  ```
  example (f : ℕ → Prop) (p : Fin 3) (h0 : f 0) (h1 : f 1) (h2 : f 2) : f p.val := by
    fin_cases p; simp
    all_goals assumption
  ```
  after `fin_cases p; simp`, there are three goals, `f 0`, `f 1`, and `f 2`.

syntax "find"... [Mathlib.Tactic.Find.tacticFind]

syntax "first"... [Lean.Parser.Tactic.first]
  `first | tac | ...` runs each `tac` until one succeeds, or else fails.

syntax "focus"... [Lean.Parser.Tactic.focus]
  `focus tac` focuses on the main goal, suppressing all other goals, and runs `tac` on it.
  Usually `· tac`, which enforces that the goal is closed by `tac`, should be preferred.

syntax "frac_tac"... [RatFunc.tacticFrac_tac]
  Solve equations for `RatFunc K` by working in `FractionRing K[X]`.

syntax "fun_prop"... [Mathlib.Meta.FunProp.funPropTacStx]
  Tactic to prove function properties

syntax "funext"... [tacticFunext___]
  Apply function extensionality and introduce new hypotheses.
  The tactic `funext` will keep applying the `funext` lemma until the goal target is not reducible to
  ```
    |-  ((fun x => ...) = (fun x => ...))
  ```
  The variant `funext h₁ ... hₙ` applies `funext` `n` times, and uses the given identifiers to name the new hypotheses.
  Patterns can be used like in the `intro` tactic. Example, given a goal
  ```
    |-  ((fun x : Nat × Bool => ...) = (fun x => ...))
  ```
  `funext (a, b)` applies `funext` once and performs pattern matching on the newly introduced pair.

syntax "gcongr"... [Mathlib.Tactic.GCongr.tacticGcongr__With__]
  The `gcongr` tactic applies "generalized congruence" rules, reducing a relational goal
  between a LHS and RHS matching the same pattern to relational subgoals between the differing
  inputs to the pattern.  For example,
  ```
  example {a b x c d : ℝ} (h1 : a + 1 ≤ b + 1) (h2 : c + 2 ≤ d + 2) :
      x ^ 2 * a + c ≤ x ^ 2 * b + d := by
    gcongr
    · linarith
    · linarith
  ```
  This example has the goal of proving the relation `≤` between a LHS and RHS both of the pattern
  ```
  x ^ 2 * ?_ + ?_
  ```
  (with inputs `a`, `c` on the left and `b`, `d` on the right); after the use of
  `gcongr`, we have the simpler goals `a ≤ b` and `c ≤ d`.
  
  A pattern can be provided explicitly; this is useful if a non-maximal match is desired:
  ```
  example {a b c d x : ℝ} (h : a + c + 1 ≤ b + d + 1) :
      x ^ 2 * (a + c) + 5 ≤ x ^ 2 * (b + d) + 5 := by
    gcongr x ^ 2 * ?_ + 5
    linarith
  ```
  
  The "generalized congruence" rules used are the library lemmas which have been tagged with the
  attribute `@[gcongr]`.  For example, the first example constructs the proof term
  ```
  add_le_add (mul_le_mul_of_nonneg_left _ (pow_bit0_nonneg x 1)) _
  ```
  using the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.
  
  The tactic attempts to discharge side goals to these "generalized congruence" lemmas (such as the
  side goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic
  `gcongr_discharger`, which wraps `positivity` but can also be extended. Side goals not discharged
  in this way are left for the user.

syntax "gcongr?"... [tacticGcongr?]
  Display a widget panel allowing to generate a `gcongr` call with holes specified by selecting
  subexpressions in the goal.

syntax "gcongr_discharger"... [Mathlib.Tactic.GCongr.tacticGcongr_discharger]

syntax "generalize"... [Lean.Parser.Tactic.generalize]
  * `generalize ([h :] e = x),+` replaces all occurrences `e`s in the main goal
    with a fresh hypothesis `x`s. If `h` is given, `h : e = x` is introduced as well.
  * `generalize e = x at h₁ ... hₙ` also generalizes occurrences of `e`
    inside `h₁`, ..., `hₙ`.
  * `generalize e = x at *` will generalize occurrences of `e` everywhere.

syntax "generalize'"... [«tacticGeneralize'_:_=_»]
  Backwards compatibility shim for `generalize`.

syntax "generalize_proofs"... [Mathlib.Tactic.generalizeProofsElab]
  `generalize_proofs ids* [at locs]?` generalizes proofs in the current goal,
  turning them into new local hypotheses.
  
  - `generalize_proofs` generalizes proofs in the target.
  - `generalize_proofs at h₁ h₂` generalized proofs in hypotheses `h₁` and `h₂`.
  - `generalize_proofs at *` generalizes proofs in the entire local context.
  - `generalize_proofs pf₁ pf₂ pf₃` uses names `pf₁`, `pf₂`, and `pf₃` for the generalized proofs.
    These can be `_` to not name proofs.
  
  If a proof is already present in the local context, it will use that rather than create a new
  local hypothesis.
  
  When doing `generalize_proofs at h`, if `h` is a let binding, its value is cleared,
  and furthermore if `h` duplicates a preceding local hypothesis then it is eliminated.
  
  The tactic is able to abstract proofs from under binders, creating universally quantified
  proofs in the local context.
  To disable this, use `generalize_proofs (config := { abstract := false })`.
  The tactic is also set to recursively abstract proofs from the types of the generalized proofs.
  This can be controlled with the `maxDepth` configuration option,
  with `generalize_proofs (config := { maxDepth := 0 })` turning this feature off.
  
  For example:
  ```lean
  example : List.nthLe [1, 2] 1 (by simp) = 2 := by
    -- ⊢ [1, 2].nthLe 1 ⋯ = 2
    generalize_proofs h
    -- h : 1 < [1, 2].length
    -- ⊢ [1, 2].nthLe 1 h = 2
  ```

syntax "get_elem_tactic"... [tacticGet_elem_tactic]
  `get_elem_tactic` is the tactic automatically called by the notation `arr[i]`
  to prove any side conditions that arise when constructing the term
  (e.g. the index is in bounds of the array). It just delegates to
  `get_elem_tactic_trivial` and gives a diagnostic error message otherwise;
  users are encouraged to extend `get_elem_tactic_trivial` instead of this tactic.

syntax "get_elem_tactic_trivial"... [tacticGet_elem_tactic_trivial]
  `get_elem_tactic_trivial` is an extensible tactic automatically called
  by the notation `arr[i]` to prove any side conditions that arise when
  constructing the term (e.g. the index is in bounds of the array).
  The default behavior is to just try `trivial` (which handles the case
  where `i < arr.size` is in the context) and `simp_arith` and `omega`
  (for doing linear arithmetic in the index).

syntax "group"... [Mathlib.Tactic.Group.group]
  Tactic for normalizing expressions in multiplicative groups, without assuming
  commutativity, using only the group axioms without any information about which group
  is manipulated.
  
  (For additive commutative groups, use the `abel` tactic instead.)
  
  Example:
  ```lean
  example {G : Type} [Group G] (a b c d : G) (h : c = (a*b^2)*((b*b)⁻¹*a⁻¹)*d) : a*c*d⁻¹ = a := by
    group at h -- normalizes `h` which becomes `h : c = d`
    rw [h]     -- the goal is now `a*d*d⁻¹ = a`
    group      -- which then normalized and closed
  ```

syntax "guard_expr"... [Lean.Parser.Tactic.guardExpr]
  Tactic to check equality of two expressions.
  * `guard_expr e = e'` checks that `e` and `e'` are defeq at reducible transparency.
  * `guard_expr e =~ e'` checks that `e` and `e'` are defeq at default transparency.
  * `guard_expr e =ₛ e'` checks that `e` and `e'` are syntactically equal.
  * `guard_expr e =ₐ e'` checks that `e` and `e'` are alpha-equivalent.
  
  Both `e` and `e'` are elaborated then have their metavariables instantiated before the equality
  check. Their types are unified (using `isDefEqGuarded`) before synthetic metavariables are
  processed, which helps with default instance handling.

syntax "guard_goal_nums"... [guardGoalNums]
  `guard_goal_nums n` succeeds if there are exactly `n` goals and fails otherwise.

syntax "guard_hyp"... [Lean.Parser.Tactic.guardHyp]
  Tactic to check that a named hypothesis has a given type and/or value.
  
  * `guard_hyp h : t` checks the type up to reducible defeq,
  * `guard_hyp h :~ t` checks the type up to default defeq,
  * `guard_hyp h :ₛ t` checks the type up to syntactic equality,
  * `guard_hyp h :ₐ t` checks the type up to alpha equality.
  * `guard_hyp h := v` checks value up to reducible defeq,
  * `guard_hyp h :=~ v` checks value up to default defeq,
  * `guard_hyp h :=ₛ v` checks value up to syntactic equality,
  * `guard_hyp h :=ₐ v` checks the value up to alpha equality.
  
  The value `v` is elaborated using the type of `h` as the expected type.

syntax "guard_hyp_nums"... [guardHypNums]
  `guard_hyp_nums n` succeeds if there are exactly `n` hypotheses and fails otherwise.
  
  Note that, depending on what options are set, some hypotheses in the local context might
  not be printed in the goal view. This tactic computes the total number of hypotheses,
  not the number of visible hypotheses.

syntax "guard_target"... [Lean.Parser.Tactic.guardTarget]
  Tactic to check that the target agrees with a given expression.
  * `guard_target = e` checks that the target is defeq at reducible transparency to `e`.
  * `guard_target =~ e` checks that the target is defeq at default transparency to `e`.
  * `guard_target =ₛ e` checks that the target is syntactically equal to `e`.
  * `guard_target =ₐ e` checks that the target is alpha-equivalent to `e`.
  
  The term `e` is elaborated with the type of the goal as the expected type, which is mostly
  useful within `conv` mode.

syntax "have"... [Lean.Parser.Tactic.tacticHave_]
  The `have` tactic is for adding hypotheses to the local context of the main goal.
  * `have h : t := e` adds the hypothesis `h : t` if `e` is a term of type `t`.
  * `have h := e` uses the type of `e` for `t`.
  * `have : t := e` and `have := e` use `this` for the name of the hypothesis.
  * `have pat := e` for a pattern `pat` is equivalent to `match e with | pat => _`,
    where `_` stands for the tactics that follow this one.
    It is convenient for types that have only one applicable constructor.
    For example, given `h : p ∧ q ∧ r`, `have ⟨h₁, h₂, h₃⟩ := h` produces the
    hypotheses `h₁ : p`, `h₂ : q`, and `h₃ : r`.

syntax "have"... [Mathlib.Tactic.tacticHave_]

syntax "have!?"... [Mathlib.Tactic.Propose.«tacticHave!?:_Using__»]
  * `have? using a, b, c` tries to find a lemma
  which makes use of each of the local hypotheses `a, b, c`,
  and reports any results via trace messages.
  * `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).
  * `have?! using a, b, c` will also call `have` to add results to the local goal state.
  
  Note that `have?` (unlike `apply?`) does not inspect the goal at all,
  only the types of the lemmas in the `using` clause.
  
  `have?` should not be left in proofs; it is a search tool, like `apply?`.
  
  Suggestions are printed as `have := f a b c`.

syntax "have'"... [Lean.Parser.Tactic.tacticHave'_]
  Similar to `have`, but using `refine'`

syntax "have'"... [Lean.Parser.Tactic.«tacticHave'_:=_»]
  Similar to `have`, but using `refine'`

syntax "have?"... [Mathlib.Tactic.Propose.propose']
  * `have? using a, b, c` tries to find a lemma
  which makes use of each of the local hypotheses `a, b, c`,
  and reports any results via trace messages.
  * `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).
  * `have?! using a, b, c` will also call `have` to add results to the local goal state.
  
  Note that `have?` (unlike `apply?`) does not inspect the goal at all,
  only the types of the lemmas in the `using` clause.
  
  `have?` should not be left in proofs; it is a search tool, like `apply?`.
  
  Suggestions are printed as `have := f a b c`.

syntax "have?!"... [Mathlib.Tactic.Propose.«tacticHave?!:_Using__»]
  * `have? using a, b, c` tries to find a lemma
  which makes use of each of the local hypotheses `a, b, c`,
  and reports any results via trace messages.
  * `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).
  * `have?! using a, b, c` will also call `have` to add results to the local goal state.
  
  Note that `have?` (unlike `apply?`) does not inspect the goal at all,
  only the types of the lemmas in the `using` clause.
  
  `have?` should not be left in proofs; it is a search tool, like `apply?`.
  
  Suggestions are printed as `have := f a b c`.

syntax "haveI"... [Lean.Parser.Tactic.tacticHaveI_]
  `haveI` behaves like `have`, but inlines the value instead of producing a `let_fun` term.

syntax "hint"... [Mathlib.Tactic.Hint.hintStx]
  The `hint` tactic tries every tactic registered using `register_hint tac`,
  and reports any that succeed.

syntax "induction"... [Lean.Parser.Tactic.induction]
  Assuming `x` is a variable in the local context with an inductive type,
  `induction x` applies induction on `x` to the main goal,
  producing one goal for each constructor of the inductive type,
  in which the target is replaced by a general instance of that constructor
  and an inductive hypothesis is added for each recursive argument to the constructor.
  If the type of an element in the local context depends on `x`,
  that element is reverted and reintroduced afterward,
  so that the inductive hypothesis incorporates that hypothesis as well.
  
  For example, given `n : Nat` and a goal with a hypothesis `h : P n` and target `Q n`,
  `induction n` produces one goal with hypothesis `h : P 0` and target `Q 0`,
  and one goal with hypotheses `h : P (Nat.succ a)` and `ih₁ : P a → Q a` and target `Q (Nat.succ a)`.
  Here the names `a` and `ih₁` are chosen automatically and are not accessible.
  You can use `with` to provide the variables names for each constructor.
  - `induction e`, where `e` is an expression instead of a variable,
    generalizes `e` in the goal, and then performs induction on the resulting variable.
  - `induction e using r` allows the user to specify the principle of induction that should be used.
    Here `r` should be a term whose result type must be of the form `C t`,
    where `C` is a bound variable and `t` is a (possibly empty) sequence of bound variables
  - `induction e generalizing z₁ ... zₙ`, where `z₁ ... zₙ` are variables in the local context,
    generalizes over `z₁ ... zₙ` before applying the induction but then introduces them in each goal.
    In other words, the net effect is that each inductive hypothesis is generalized.
  - Given `x : Nat`, `induction x with | zero => tac₁ | succ x' ih => tac₂`
    uses tactic `tac₁` for the `zero` case, and `tac₂` for the `succ` case.

syntax "induction'"... [Mathlib.Tactic.induction']

syntax "infer_instance"... [Lean.Parser.Tactic.tacticInfer_instance]
  `infer_instance` is an abbreviation for `exact inferInstance`.
  It synthesizes a value of any target type by typeclass inference.

syntax "infer_param"... [Mathlib.Tactic.inferOptParam]
  Close a goal of the form `optParam α a` or `autoParam α stx` by using `a`.

syntax "inhabit"... [Lean.Elab.Tactic.inhabit]
  `inhabit α` tries to derive a `Nonempty α` instance and
  then uses it to make an `Inhabited α` instance.
  If the target is a `Prop`, this is done constructively. Otherwise, it uses `Classical.choice`.

syntax "injection"... [Lean.Parser.Tactic.injection]
  The `injection` tactic is based on the fact that constructors of inductive data
  types are injections.
  That means that if `c` is a constructor of an inductive datatype, and if `(c t₁)`
  and `(c t₂)` are two terms that are equal then  `t₁` and `t₂` are equal too.
  If `q` is a proof of a statement of conclusion `t₁ = t₂`, then injection applies
  injectivity to derive the equality of all arguments of `t₁` and `t₂` placed in
  the same positions. For example, from `(a::b) = (c::d)` we derive `a=c` and `b=d`.
  To use this tactic `t₁` and `t₂` should be constructor applications of the same constructor.
  Given `h : a::b = c::d`, the tactic `injection h` adds two new hypothesis with types
  `a = c` and `b = d` to the main goal.
  The tactic `injection h with h₁ h₂` uses the names `h₁` and `h₂` to name the new hypotheses.

syntax "injections"... [Lean.Parser.Tactic.injections]
  `injections` applies `injection` to all hypotheses recursively
  (since `injection` can produce new hypotheses). Useful for destructing nested
  constructor equalities like `(a::b::c) = (d::e::f)`.

syntax "interval_cases"... [Mathlib.Tactic.intervalCases]
  `interval_cases n` searches for upper and lower bounds on a variable `n`,
  and if bounds are found,
  splits into separate cases for each possible value of `n`.
  
  As an example, in
  ```
  example (n : ℕ) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by
    interval_cases n
    all_goals simp
  ```
  after `interval_cases n`, the goals are `3 = 3 ∨ 3 = 4` and `4 = 3 ∨ 4 = 4`.
  
  You can also explicitly specify a lower and upper bound to use,
  as `interval_cases using hl, hu`.
  The hypotheses should be in the form `hl : a ≤ n` and `hu : n < b`,
  in which case `interval_cases` calls `fin_cases` on the resulting fact `n ∈ Set.Ico a b`.
  
  You can specify a name `h` for the new hypothesis,
  as `interval_cases h : n` or `interval_cases h : n using hl, hu`.

syntax "intro"... [Lean.Parser.Tactic.intro]
  Introduces one or more hypotheses, optionally naming and/or pattern-matching them.
  For each hypothesis to be introduced, the remaining main goal's target type must
  be a `let` or function type.
  
  * `intro` by itself introduces one anonymous hypothesis, which can be accessed
    by e.g. `assumption`.
  * `intro x y` introduces two hypotheses and names them. Individual hypotheses
    can be anonymized via `_`, or matched against a pattern:
    ```lean
    -- ... ⊢ α × β → ...
    intro (a, b)
    -- ..., a : α, b : β ⊢ ...
    ```
  * Alternatively, `intro` can be combined with pattern matching much like `fun`:
    ```lean
    intro
    | n + 1, 0 => tac
    | ...
    ```

syntax "intro"... [Std.Tactic.introDot]
  The syntax `intro.` is deprecated in favor of `nofun`.

syntax "intros"... [Lean.Parser.Tactic.intros]
  Introduces zero or more hypotheses, optionally naming them.
  
  - `intros` is equivalent to repeatedly applying `intro`
    until the goal is not an obvious candidate for `intro`, which is to say
    that so long as the goal is a `let` or a pi type (e.g. an implication, function, or universal quantifier),
    the `intros` tactic will introduce an anonymous hypothesis.
    This tactic does not unfold definitions.
  
  - `intros x y ...` is equivalent to `intro x y ...`,
    introducing hypotheses for each supplied argument and unfolding definitions as necessary.
    Each argument can be either an identifier or a `_`.
    An identifier indicates a name to use for the corresponding introduced hypothesis,
    and a `_` indicates that the hypotheses should be introduced anonymously.
  
  ## Examples
  
  Basic properties:
  ```lean
  def AllEven (f : Nat → Nat) := ∀ n, f n % 2 = 0
  
  -- Introduces the two obvious hypotheses automatically
  example : ∀ (f : Nat → Nat), AllEven f → AllEven (fun k => f (k + 1)) := by
    intros
    /- Tactic state
       f✝ : Nat → Nat
       a✝ : AllEven f✝
       ⊢ AllEven fun k => f✝ (k + 1) -/
    sorry
  
  -- Introduces exactly two hypotheses, naming only the first
  example : ∀ (f : Nat → Nat), AllEven f → AllEven (fun k => f (k + 1)) := by
    intros g _
    /- Tactic state
       g : Nat → Nat
       a✝ : AllEven g
       ⊢ AllEven fun k => g (k + 1) -/
    sorry
  
  -- Introduces exactly three hypotheses, which requires unfolding `AllEven`
  example : ∀ (f : Nat → Nat), AllEven f → AllEven (fun k => f (k + 1)) := by
    intros f h n
    /- Tactic state
       f : Nat → Nat
       h : AllEven f
       n : Nat
       ⊢ (fun k => f (k + 1)) n % 2 = 0 -/
    apply h
  ```
  
  Implications:
  ```lean
  example (p q : Prop) : p → q → p := by
    intros
    /- Tactic state
       a✝¹ : p
       a✝ : q
       ⊢ p      -/
    assumption
  ```
  
  Let bindings:
  ```lean
  example : let n := 1; let k := 2; n + k = 3 := by
    intros
    /- n✝ : Nat := 1
       k✝ : Nat := 2
       ⊢ n✝ + k✝ = 3 -/
    rfl
  ```

syntax "introv"... [Mathlib.Tactic.introv]
  The tactic `introv` allows the user to automatically introduce the variables of a theorem and
  explicitly name the non-dependent hypotheses.
  Any dependent hypotheses are assigned their default names.
  
  Examples:
  ```
  example : ∀ a b : Nat, a = b → b = a := by
    introv h,
    exact h.symm
  ```
  The state after `introv h` is
  ```
  a b : ℕ,
  h : a = b
  ⊢ b = a
  ```
  
  ```
  example : ∀ a b : Nat, a = b → ∀ c, b = c → a = c := by
    introv h₁ h₂,
    exact h₁.trans h₂
  ```
  The state after `introv h₁ h₂` is
  ```
  a b : ℕ,
  h₁ : a = b,
  c : ℕ,
  h₂ : b = c
  ⊢ a = c
  ```

syntax "isBoundedDefault"... [Filter.tacticIsBoundedDefault]
  Filters are automatically bounded or cobounded in complete lattices. To use the same statements
  in complete and conditionally complete lattices but let automation fill automatically the
  boundedness proofs in complete lattices, we use the tactic `isBoundedDefault` in the statements,
  in the form `(hf : f.IsBounded (≥) := by isBoundedDefault)`.

syntax "iterate"... [Lean.Parser.Tactic.tacticIterate____]
  `iterate n tac` runs `tac` exactly `n` times.
  `iterate tac` runs `tac` repeatedly until failure.
  
  `iterate`'s argument is a tactic sequence,
  so multiple tactics can be run using `iterate n (tac₁; tac₂; ⋯)` or
  ```lean
  iterate n
    tac₁
    tac₂
    ⋯
  ```

syntax "left"... [Lean.Parser.Tactic.left]
  Applies the first constructor when
  the goal is an inductive type with exactly two constructors, or fails otherwise.
  ```
  example : True ∨ False := by
    left
    trivial
  ```

syntax "let"... [Lean.Parser.Tactic.letrec]
  `let rec f : t := e` adds a recursive definition `f` to the current goal.
  The syntax is the same as term-mode `let rec`.

syntax "let"... [Mathlib.Tactic.tacticLet_]

syntax "let"... [Lean.Parser.Tactic.tacticLet_]
  The `let` tactic is for adding definitions to the local context of the main goal.
  * `let x : t := e` adds the definition `x : t := e` if `e` is a term of type `t`.
  * `let x := e` uses the type of `e` for `t`.
  * `let : t := e` and `let := e` use `this` for the name of the hypothesis.
  * `let pat := e` for a pattern `pat` is equivalent to `match e with | pat => _`,
    where `_` stands for the tactics that follow this one.
    It is convenient for types that let only one applicable constructor.
    For example, given `p : α × β × γ`, `let ⟨x, y, z⟩ := p` produces the
    local variables `x : α`, `y : β`, and `z : γ`.

syntax "let'"... [Lean.Parser.Tactic.tacticLet'_]
  Similar to `let`, but using `refine'`

syntax "letI"... [Lean.Parser.Tactic.tacticLetI_]
  `letI` behaves like `let`, but inlines the value instead of producing a `let_fun` term.

syntax "lift"... [Mathlib.Tactic.lift]
  Lift an expression to another type.
  * Usage: `'lift' expr 'to' expr ('using' expr)? ('with' id (id id?)?)?`.
  * If `n : ℤ` and `hn : n ≥ 0` then the tactic `lift n to ℕ using hn` creates a new
    constant of type `ℕ`, also named `n` and replaces all occurrences of the old variable `(n : ℤ)`
    with `↑n` (where `n` in the new variable). It will remove `n` and `hn` from the context.
    + So for example the tactic `lift n to ℕ using hn` transforms the goal
      `n : ℤ, hn : n ≥ 0, h : P n ⊢ n = 3` to `n : ℕ, h : P ↑n ⊢ ↑n = 3`
      (here `P` is some term of type `ℤ → Prop`).
  * The argument `using hn` is optional, the tactic `lift n to ℕ` does the same, but also creates a
    new subgoal that `n ≥ 0` (where `n` is the old variable).
    This subgoal will be placed at the top of the goal list.
    + So for example the tactic `lift n to ℕ` transforms the goal
      `n : ℤ, h : P n ⊢ n = 3` to two goals
      `n : ℤ, h : P n ⊢ n ≥ 0` and `n : ℕ, h : P ↑n ⊢ ↑n = 3`.
  * You can also use `lift n to ℕ using e` where `e` is any expression of type `n ≥ 0`.
  * Use `lift n to ℕ with k` to specify the name of the new variable.
  * Use `lift n to ℕ with k hk` to also specify the name of the equality `↑k = n`. In this case, `n`
    will remain in the context. You can use `rfl` for the name of `hk` to substitute `n` away
    (i.e. the default behavior).
  * You can also use `lift e to ℕ with k hk` where `e` is any expression of type `ℤ`.
    In this case, the `hk` will always stay in the context, but it will be used to rewrite `e` in
    all hypotheses and the target.
    + So for example the tactic `lift n + 3 to ℕ using hn with k hk` transforms the goal
      `n : ℤ, hn : n + 3 ≥ 0, h : P (n + 3) ⊢ n + 3 = 2 * n` to the goal
      `n : ℤ, k : ℕ, hk : ↑k = n + 3, h : P ↑k ⊢ ↑k = 2 * n`.
  * The tactic `lift n to ℕ using h` will remove `h` from the context. If you want to keep it,
    specify it again as the third argument to `with`, like this: `lift n to ℕ using h with n rfl h`.
  * More generally, this can lift an expression from `α` to `β` assuming that there is an instance
    of `CanLift α β`. In this case the proof obligation is specified by `CanLift.prf`.
  * Given an instance `CanLift β γ`, it can also lift `α → β` to `α → γ`; more generally, given
    `β : Π a : α, Type*`, `γ : Π a : α, Type*`, and `[Π a : α, CanLift (β a) (γ a)]`, it
    automatically generates an instance `CanLift (Π a, β a) (Π a, γ a)`.
  
  `lift` is in some sense dual to the `zify` tactic. `lift (z : ℤ) to ℕ` will change the type of an
  integer `z` (in the supertype) to `ℕ` (the subtype), given a proof that `z ≥ 0`;
  propositions concerning `z` will still be over `ℤ`. `zify` changes propositions about `ℕ` (the
  subtype) to propositions about `ℤ` (the supertype), without changing the type of any variable.

syntax "lift_lets"... [Mathlib.Tactic.lift_lets]
  Lift all the `let` bindings in the type of an expression as far out as possible.
  
  When applied to the main goal, this gives one the ability to `intro` embedded `let` expressions.
  For example,
  ```lean
  example : (let x := 1; x) = 1 := by
    lift_lets
    -- ⊢ let x := 1; x = 1
    intro x
    sorry
  ```
  
  During the lifting process, let bindings are merged if they have the same type and value.

syntax "liftable_prefixes"... [Mathlib.Tactic.Coherence.liftable_prefixes]
  Internal tactic used in `coherence`.
  
  Rewrites an equation `f = g` as `f₀ ≫ f₁ = g₀ ≫ g₁`,
  where `f₀` and `g₀` are maximal prefixes of `f` and `g` (possibly after reassociating)
  which are "liftable" (i.e. expressible as compositions of unitors and associators).

syntax "linarith"... [linarith]
  `linarith` attempts to find a contradiction between hypotheses that are linear (in)equalities.
  Equivalently, it can prove a linear inequality by assuming its negation and proving `False`.
  
  In theory, `linarith` should prove any goal that is true in the theory of linear arithmetic over
  the rationals. While there is some special handling for non-dense orders like `Nat` and `Int`,
  this tactic is not complete for these theories and will not prove every true goal. It will solve
  goals over arbitrary types that instantiate `LinearOrderedCommRing`.
  
  An example:
  ```lean
  example (x y z : ℚ) (h1 : 2*x < 3*y) (h2 : -4*x + 2*z < 0)
          (h3 : 12*y - 4* z < 0)  : False :=
  by linarith
  ```
  
  `linarith` will use all appropriate hypotheses and the negation of the goal, if applicable.
  Disequality hypotheses require case splitting and are not normally considered
  (see the `splitNe` option below).
  
  `linarith [t1, t2, t3]` will additionally use proof terms `t1, t2, t3`.
  
  `linarith only [h1, h2, h3, t1, t2, t3]` will use only the goal (if relevant), local hypotheses
  `h1`, `h2`, `h3`, and proofs `t1`, `t2`, `t3`. It will ignore the rest of the local context.
  
  `linarith!` will use a stronger reducibility setting to try to identify atoms. For example,
  ```lean
  example (x : ℚ) : id x ≥ x :=
  by linarith
  ```
  will fail, because `linarith` will not identify `x` and `id x`. `linarith!` will.
  This can sometimes be expensive.
  
  `linarith (config := { .. })` takes a config object with five
  optional arguments:
  * `discharger` specifies a tactic to be used for reducing an algebraic equation in the
    proof stage. The default is `ring`. Other options include `simp` for basic
    problems.
  * `transparency` controls how hard `linarith` will try to match atoms to each other. By default
    it will only unfold `reducible` definitions.
  * If `splitHypotheses` is true, `linarith` will split conjunctions in the context into separate
    hypotheses.
  * If `splitNe` is `true`, `linarith` will case split on disequality hypotheses.
    For a given `x ≠ y` hypothesis, `linarith` is run with both `x < y` and `x > y`,
    and so this runs linarith exponentially many times with respect to the number of
    disequality hypotheses. (`false` by default.)
  * If `exfalso` is `false`, `linarith` will fail when the goal is neither an inequality nor `False`.
    (`true` by default.)
  * `restrict_type` (not yet implemented in mathlib4)
    will only use hypotheses that are inequalities over `tp`. This is useful
    if you have e.g. both integer and rational valued inequalities in the local context, which can
    sometimes confuse the tactic.
  
  A variant, `nlinarith`, does some basic preprocessing to handle some nonlinear goals.
  
  The option `set_option trace.linarith true` will trace certain intermediate stages of the `linarith`
  routine.

syntax "linarith!"... [tacticLinarith!_]
  `linarith` attempts to find a contradiction between hypotheses that are linear (in)equalities.
  Equivalently, it can prove a linear inequality by assuming its negation and proving `False`.
  
  In theory, `linarith` should prove any goal that is true in the theory of linear arithmetic over
  the rationals. While there is some special handling for non-dense orders like `Nat` and `Int`,
  this tactic is not complete for these theories and will not prove every true goal. It will solve
  goals over arbitrary types that instantiate `LinearOrderedCommRing`.
  
  An example:
  ```lean
  example (x y z : ℚ) (h1 : 2*x < 3*y) (h2 : -4*x + 2*z < 0)
          (h3 : 12*y - 4* z < 0)  : False :=
  by linarith
  ```
  
  `linarith` will use all appropriate hypotheses and the negation of the goal, if applicable.
  Disequality hypotheses require case splitting and are not normally considered
  (see the `splitNe` option below).
  
  `linarith [t1, t2, t3]` will additionally use proof terms `t1, t2, t3`.
  
  `linarith only [h1, h2, h3, t1, t2, t3]` will use only the goal (if relevant), local hypotheses
  `h1`, `h2`, `h3`, and proofs `t1`, `t2`, `t3`. It will ignore the rest of the local context.
  
  `linarith!` will use a stronger reducibility setting to try to identify atoms. For example,
  ```lean
  example (x : ℚ) : id x ≥ x :=
  by linarith
  ```
  will fail, because `linarith` will not identify `x` and `id x`. `linarith!` will.
  This can sometimes be expensive.
  
  `linarith (config := { .. })` takes a config object with five
  optional arguments:
  * `discharger` specifies a tactic to be used for reducing an algebraic equation in the
    proof stage. The default is `ring`. Other options include `simp` for basic
    problems.
  * `transparency` controls how hard `linarith` will try to match atoms to each other. By default
    it will only unfold `reducible` definitions.
  * If `splitHypotheses` is true, `linarith` will split conjunctions in the context into separate
    hypotheses.
  * If `splitNe` is `true`, `linarith` will case split on disequality hypotheses.
    For a given `x ≠ y` hypothesis, `linarith` is run with both `x < y` and `x > y`,
    and so this runs linarith exponentially many times with respect to the number of
    disequality hypotheses. (`false` by default.)
  * If `exfalso` is `false`, `linarith` will fail when the goal is neither an inequality nor `False`.
    (`true` by default.)
  * `restrict_type` (not yet implemented in mathlib4)
    will only use hypotheses that are inequalities over `tp`. This is useful
    if you have e.g. both integer and rational valued inequalities in the local context, which can
    sometimes confuse the tactic.
  
  A variant, `nlinarith`, does some basic preprocessing to handle some nonlinear goals.
  
  The option `set_option trace.linarith true` will trace certain intermediate stages of the `linarith`
  routine.

syntax "linear_combination"... [Mathlib.Tactic.LinearCombination.linearCombination]
  `linear_combination` attempts to simplify the target by creating a linear combination
    of a list of equalities and subtracting it from the target.
    The tactic will create a linear
    combination by adding the equalities together from left to right, so the order
    of the input hypotheses does matter.  If the `normalize` field of the
    configuration is set to false, then the tactic will simply set the user up to
    prove their target using the linear combination instead of normalizing the subtraction.
  
  Note: The left and right sides of all the equalities should have the same
    type, and the coefficients should also have this type.  There must be
    instances of `Mul` and `AddGroup` for this type.
  
  * The input `e` in `linear_combination e` is a linear combination of proofs of equalities,
    given as a sum/difference of coefficients multiplied by expressions.
    The coefficients may be arbitrary expressions.
    The expressions can be arbitrary proof terms proving equalities.
    Most commonly they are hypothesis names `h1, h2, ...`.
  * `linear_combination (norm := tac) e` runs the "normalization tactic" `tac`
    on the subgoal(s) after constructing the linear combination.
    * The default normalization tactic is `ring1`, which closes the goal or fails.
    * To get a subgoal in the case that it is not immediately provable, use
      `ring_nf` as the normalization tactic.
    * To avoid normalization entirely, use `skip` as the normalization tactic.
  * `linear_combination (exp := n) e` will take the goal to the `n`th power before subtracting the
    combination `e`. In other words, if the goal is `t1 = t2`, `linear_combination (exp := n) e`
    will change the goal to `(t1 - t2)^n = 0` before proceeding as above.
    This feature is not supported for `linear_combination2`.
  * `linear_combination2 e` is the same as `linear_combination e` but it produces two
    subgoals instead of one: rather than proving that `(a - b) - (a' - b') = 0` where
    `a' = b'` is the linear combination from `e` and `a = b` is the goal,
    it instead attempts to prove `a = a'` and `b = b'`.
    Because it does not use subtraction, this form is applicable also to semirings.
    * Note that a goal which is provable by `linear_combination e` may not be provable
      by `linear_combination2 e`; in general you may need to add a coefficient to `e`
      to make both sides match, as in `linear_combination2 e + c`.
    * You can also reverse equalities using `← h`, so for example if `h₁ : a = b`
      then `2 * (← h)` is a proof of `2 * b = 2 * a`.
  
  Example Usage:
  ```
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination 1*h1 - 2*h2
  
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination h1 - 2*h2
  
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination (norm := ring_nf) -2*h2
    /- Goal: x * y + x * 2 - 1 = 0 -/
  
  example (x y z : ℝ) (ha : x + 2*y - z = 4) (hb : 2*x + y + z = -2)
      (hc : x + 2*y + z = 2) :
      -3*x - 3*y - 4*z = 2 := by
    linear_combination ha - hb - 2*hc
  
  example (x y : ℚ) (h1 : x + y = 3) (h2 : 3*x = 7) :
      x*x*y + y*x*y + 6*x = 3*x*y + 14 := by
    linear_combination x*y*h1 + 2*h2
  
  example (x y : ℤ) (h1 : x = -3) (h2 : y = 10) : 2*x = -6 := by
    linear_combination (norm := skip) 2*h1
    simp
  
  axiom qc : ℚ
  axiom hqc : qc = 2*qc
  
  example (a b : ℚ) (h : ∀ p q : ℚ, p = q) : 3*a + qc = 3*b + 2*qc := by
    linear_combination 3 * h a b + hqc
  ```

syntax "linear_combination2"... [Mathlib.Tactic.LinearCombination.tacticLinear_combination2____]
  `linear_combination` attempts to simplify the target by creating a linear combination
    of a list of equalities and subtracting it from the target.
    The tactic will create a linear
    combination by adding the equalities together from left to right, so the order
    of the input hypotheses does matter.  If the `normalize` field of the
    configuration is set to false, then the tactic will simply set the user up to
    prove their target using the linear combination instead of normalizing the subtraction.
  
  Note: The left and right sides of all the equalities should have the same
    type, and the coefficients should also have this type.  There must be
    instances of `Mul` and `AddGroup` for this type.
  
  * The input `e` in `linear_combination e` is a linear combination of proofs of equalities,
    given as a sum/difference of coefficients multiplied by expressions.
    The coefficients may be arbitrary expressions.
    The expressions can be arbitrary proof terms proving equalities.
    Most commonly they are hypothesis names `h1, h2, ...`.
  * `linear_combination (norm := tac) e` runs the "normalization tactic" `tac`
    on the subgoal(s) after constructing the linear combination.
    * The default normalization tactic is `ring1`, which closes the goal or fails.
    * To get a subgoal in the case that it is not immediately provable, use
      `ring_nf` as the normalization tactic.
    * To avoid normalization entirely, use `skip` as the normalization tactic.
  * `linear_combination (exp := n) e` will take the goal to the `n`th power before subtracting the
    combination `e`. In other words, if the goal is `t1 = t2`, `linear_combination (exp := n) e`
    will change the goal to `(t1 - t2)^n = 0` before proceeding as above.
    This feature is not supported for `linear_combination2`.
  * `linear_combination2 e` is the same as `linear_combination e` but it produces two
    subgoals instead of one: rather than proving that `(a - b) - (a' - b') = 0` where
    `a' = b'` is the linear combination from `e` and `a = b` is the goal,
    it instead attempts to prove `a = a'` and `b = b'`.
    Because it does not use subtraction, this form is applicable also to semirings.
    * Note that a goal which is provable by `linear_combination e` may not be provable
      by `linear_combination2 e`; in general you may need to add a coefficient to `e`
      to make both sides match, as in `linear_combination2 e + c`.
    * You can also reverse equalities using `← h`, so for example if `h₁ : a = b`
      then `2 * (← h)` is a proof of `2 * b = 2 * a`.
  
  Example Usage:
  ```
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination 1*h1 - 2*h2
  
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination h1 - 2*h2
  
  example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) : x*y = -2*y + 1 := by
    linear_combination (norm := ring_nf) -2*h2
    /- Goal: x * y + x * 2 - 1 = 0 -/
  
  example (x y z : ℝ) (ha : x + 2*y - z = 4) (hb : 2*x + y + z = -2)
      (hc : x + 2*y + z = 2) :
      -3*x - 3*y - 4*z = 2 := by
    linear_combination ha - hb - 2*hc
  
  example (x y : ℚ) (h1 : x + y = 3) (h2 : 3*x = 7) :
      x*x*y + y*x*y + 6*x = 3*x*y + 14 := by
    linear_combination x*y*h1 + 2*h2
  
  example (x y : ℤ) (h1 : x = -3) (h2 : y = 10) : 2*x = -6 := by
    linear_combination (norm := skip) 2*h1
    simp
  
  axiom qc : ℚ
  axiom hqc : qc = 2*qc
  
  example (a b : ℚ) (h : ∀ p q : ℚ, p = q) : 3*a + qc = 3*b + 2*qc := by
    linear_combination 3 * h a b + hqc
  ```

syntax "map_tacs"... [Std.Tactic.«tacticMap_tacs[_;]»]
  Assuming there are `n` goals, `map_tacs [t1; t2; ...; tn]` applies each `ti` to the respective
  goal and leaves the resulting subgoals.

syntax "match"... [Std.Tactic.«tacticMatch_,,With.»]
  The syntax `match ⋯ with.` has been deprecated in favor of `nomatch ⋯`.
  
  Both now support multiple discriminants.

syntax "match_target"... [Mathlib.Tactic.tacticMatch_target_]

syntax "measurability"... [tacticMeasurability_]
  The tactic `measurability` solves goals of the form `Measurable f`, `AEMeasurable f`,
  `StronglyMeasurable f`, `AEStronglyMeasurable f μ`, or `MeasurableSet s` by applying lemmas tagged
  with the `measurability` user attribute.

syntax "measurability!"... [measurability!]

syntax "measurability!?"... [measurability!?]

syntax "measurability?"... [tacticMeasurability?_]
  The tactic `measurability?` solves goals of the form `Measurable f`, `AEMeasurable f`,
  `StronglyMeasurable f`, `AEStronglyMeasurable f μ`, or `MeasurableSet s` by applying lemmas tagged
  with the `measurability` user attribute, and suggests a faster proof script that can be substituted
  for the tactic call in case of success.

syntax "mfld_set_tac"... [Tactic.MfldSetTac.mfldSetTac]
  A very basic tactic to show that sets showing up in manifolds coincide or are included
  in one another.

syntax "mod_cases"... [Mathlib.Tactic.ModCases.«tacticMod_cases_:_%_»]
  * The tactic `mod_cases h : e % 3` will perform a case disjunction on `e`.
    If `e : ℤ`, then it will yield subgoals containing the assumptions
    `h : e ≡ 0 [ZMOD 3]`, `h : e ≡ 1 [ZMOD 3]`, `h : e ≡ 2 [ZMOD 3]`
    respectively. If `e : ℕ` instead, then it works similarly, except with
    `[MOD 3]` instead of `[ZMOD 3]`.
  * In general, `mod_cases h : e % n` works
    when `n` is a positive numeral and `e` is an expression of type `ℕ` or `ℤ`.
  * If `h` is omitted as in `mod_cases e % n`, it will be default-named `H`.

syntax "monicity"... [Mathlib.Tactic.ComputeDegree.monicityMacro]
  `monicity` tries to solve a goal of the form `Monic f`.
  It converts the goal into a goal of the form `natDegree f ≤ n` and one of the form `f.coeff n = 1`
  and calls `compute_degree` on those two goals.
  
  The variant `monicity!` starts like `monicity`, but calls `compute_degree!` on the two side-goals.

syntax "monicity!"... [Mathlib.Tactic.ComputeDegree.tacticMonicity!]
  `monicity` tries to solve a goal of the form `Monic f`.
  It converts the goal into a goal of the form `natDegree f ≤ n` and one of the form `f.coeff n = 1`
  and calls `compute_degree` on those two goals.
  
  The variant `monicity!` starts like `monicity`, but calls `compute_degree!` on the two side-goals.

syntax "mono"... [Mathlib.Tactic.Monotonicity.mono]
  `mono` applies monotonicity rules and local hypotheses repetitively.  For example,
  ```lean
  example (x y z k : ℤ)
      (h : 3 ≤ (4 : ℤ))
      (h' : z ≤ y) :
      (k + 3 + x) - y ≤ (k + 4 + x) - z := by
    mono
  ```

syntax "monoidal_coherence"... [Mathlib.Tactic.Coherence.tacticMonoidal_coherence]
  Coherence tactic for monoidal categories.
  Use `pure_coherence` instead, which is a frontend to this one.

syntax "monoidal_simps"... [Mathlib.Tactic.Coherence.monoidal_simps]
  Simp lemmas for rewriting a hom in monoical categories into a normal form.

syntax "move_add"... [Mathlib.MoveAdd.tacticMove_add_]
  The tactic `move_add` rearranges summands of expressions.
  Calling `move_add [a, ← b, ...]` matches `a, b,...` with summands in the main goal.
  It then moves `a` to the far right and `b` to the far left of each addition in which they appear.
  The side to which the summands are moved is determined by the presence or absence of the arrow `←`.
  
  The inputs `a, b,...` can be any terms, also with underscores.
  The tactic uses the first "new" summand that unifies with each one of the given inputs.
  
  There is a multiplicative variant, called `move_mul`.
  
  There is also a general tactic for a "binary associative commutative operation": `move_oper`.
  In this case the syntax requires providing first a term whose head symbol is the operation.
  E.g. `move_oper HAdd.hAdd [...]` is the same as `move_add`, while `move_oper Max.max [...]`
  rearranges `max`s.

syntax "move_mul"... [Mathlib.MoveAdd.tacticMove_mul_]
  The tactic `move_add` rearranges summands of expressions.
  Calling `move_add [a, ← b, ...]` matches `a, b,...` with summands in the main goal.
  It then moves `a` to the far right and `b` to the far left of each addition in which they appear.
  The side to which the summands are moved is determined by the presence or absence of the arrow `←`.
  
  The inputs `a, b,...` can be any terms, also with underscores.
  The tactic uses the first "new" summand that unifies with each one of the given inputs.
  
  There is a multiplicative variant, called `move_mul`.
  
  There is also a general tactic for a "binary associative commutative operation": `move_oper`.
  In this case the syntax requires providing first a term whose head symbol is the operation.
  E.g. `move_oper HAdd.hAdd [...]` is the same as `move_add`, while `move_oper Max.max [...]`
  rearranges `max`s.

syntax "move_oper"... [Mathlib.MoveAdd.moveOperTac]
  The tactic `move_add` rearranges summands of expressions.
  Calling `move_add [a, ← b, ...]` matches `a, b,...` with summands in the main goal.
  It then moves `a` to the far right and `b` to the far left of each addition in which they appear.
  The side to which the summands are moved is determined by the presence or absence of the arrow `←`.
  
  The inputs `a, b,...` can be any terms, also with underscores.
  The tactic uses the first "new" summand that unifies with each one of the given inputs.
  
  There is a multiplicative variant, called `move_mul`.
  
  There is also a general tactic for a "binary associative commutative operation": `move_oper`.
  In this case the syntax requires providing first a term whose head symbol is the operation.
  E.g. `move_oper HAdd.hAdd [...]` is the same as `move_add`, while `move_oper Max.max [...]`
  rearranges `max`s.

syntax "next"... [Lean.Parser.Tactic.«tacticNext_=>_»]
  `next => tac` focuses on the next goal and solves it using `tac`, or else fails.
  `next x₁ ... xₙ => tac` additionally renames the `n` most recent hypotheses with
  inaccessible names to the given names.

syntax "nlinarith"... [nlinarith]
  An extension of `linarith` with some preprocessing to allow it to solve some nonlinear arithmetic
  problems. (Based on Coq's `nra` tactic.) See `linarith` for the available syntax of options,
  which are inherited by `nlinarith`; that is, `nlinarith!` and `nlinarith only [h1, h2]` all work as
  in `linarith`. The preprocessing is as follows:
  
  * For every subterm `a ^ 2` or `a * a` in a hypothesis or the goal,
    the assumption `0 ≤ a ^ 2` or `0 ≤ a * a` is added to the context.
  * For every pair of hypotheses `a1 R1 b1`, `a2 R2 b2` in the context, `R1, R2 ∈ {<, ≤, =}`,
    the assumption `0 R' (b1 - a1) * (b2 - a2)` is added to the context (non-recursively),
    where `R ∈ {<, ≤, =}` is the appropriate comparison derived from `R1, R2`.

syntax "nlinarith!"... [tacticNlinarith!_]
  An extension of `linarith` with some preprocessing to allow it to solve some nonlinear arithmetic
  problems. (Based on Coq's `nra` tactic.) See `linarith` for the available syntax of options,
  which are inherited by `nlinarith`; that is, `nlinarith!` and `nlinarith only [h1, h2]` all work as
  in `linarith`. The preprocessing is as follows:
  
  * For every subterm `a ^ 2` or `a * a` in a hypothesis or the goal,
    the assumption `0 ≤ a ^ 2` or `0 ≤ a * a` is added to the context.
  * For every pair of hypotheses `a1 R1 b1`, `a2 R2 b2` in the context, `R1, R2 ∈ {<, ≤, =}`,
    the assumption `0 R' (b1 - a1) * (b2 - a2)` is added to the context (non-recursively),
    where `R ∈ {<, ≤, =}` is the appropriate comparison derived from `R1, R2`.

syntax "nofun"... [Lean.Parser.Tactic.tacticNofun]
  The tactic `nofun` is shorthand for `exact nofun`: it introduces the assumptions, then performs an
  empty pattern match, closing the goal if the introduced pattern is impossible.

syntax "nomatch"... [Lean.Parser.Tactic.«tacticNomatch_,,»]
  The tactic `nomatch h` is shorthand for `exact nomatch h`.

syntax "noncomm_ring"... [Mathlib.Tactic.NoncommRing.noncomm_ring]
  A tactic for simplifying identities in not-necessarily-commutative rings.
  
  An example:
  ```lean
  example {R : Type*} [Ring R] (a b c : R) : a * (b + c + c - b) = 2 * a * c := by
    noncomm_ring
  ```
  
  You can use `noncomm_ring [h]` to also simplify using `h`.

syntax "nontriviality"... [Mathlib.Tactic.Nontriviality.nontriviality]
  Attempts to generate a `Nontrivial α` hypothesis.
  
  The tactic first checks to see that there is not already a `Nontrivial α` instance
  before trying to synthesize one using other techniques.
  
  If the goal is an (in)equality, the type `α` is inferred from the goal.
  Otherwise, the type needs to be specified in the tactic invocation, as `nontriviality α`.
  
  The `nontriviality` tactic will first look for strict inequalities amongst the hypotheses,
  and use these to derive the `Nontrivial` instance directly.
  
  Otherwise, it will perform a case split on `Subsingleton α ∨ Nontrivial α`, and attempt to discharge
  the `Subsingleton` goal using `simp [h₁, h₂, ..., hₙ, nontriviality]`, where `[h₁, h₂, ..., hₙ]` is
  a list of additional `simp` lemmas that can be passed to `nontriviality` using the syntax
  `nontriviality α using h₁, h₂, ..., hₙ`.
  
  ```
  example {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : 0 < a := by
    nontriviality -- There is now a `Nontrivial R` hypothesis available.
    assumption
  ```
  
  ```
  example {R : Type} [CommRing R] {r s : R} : r * s = s * r := by
    nontriviality -- There is now a `Nontrivial R` hypothesis available.
    apply mul_comm
  ```
  
  ```
  example {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : (2 : ℕ) ∣ 4 := by
    nontriviality R -- there is now a `Nontrivial R` hypothesis available.
    dec_trivial
  ```
  
  ```
  def myeq {α : Type} (a b : α) : Prop := a = b
  
  example {α : Type} (a b : α) (h : a = b) : myeq a b := by
    success_if_fail nontriviality α -- Fails
    nontriviality α using myeq -- There is now a `Nontrivial α` hypothesis available
    assumption
  ```

syntax "norm_cast"... [Lean.Parser.Tactic.tacticNorm_cast_]
  The `norm_cast` family of tactics is used to normalize certain coercions (*casts*) in expressions.
  - `norm_cast` normalizes casts in the target.
  - `norm_cast at h` normalizes casts in hypothesis `h`.
  
  The tactic is basically a version of `simp` with a specific set of lemmas to move casts
  upwards in the expression.
  Therefore even in situations where non-terminal `simp` calls are discouraged (because of fragility),
  `norm_cast` is considered to be safe.
  It also has special handling of numerals.
  
  For instance, given an assumption
  ```lean
  a b : ℤ
  h : ↑a + ↑b < (10 : ℚ)
  ```
  writing `norm_cast at h` will turn `h` into
  ```lean
  h : a + b < 10
  ```
  
  There are also variants of basic tactics that use `norm_cast` to normalize expressions during
  their operation, to make them more flexible about the expressions they accept
  (we say that it is a tactic *modulo* the effects of `norm_cast`):
  - `exact_mod_cast` for `exact` and `apply_mod_cast` for `apply`.
    Writing `exact_mod_cast h` and `apply_mod_cast h` will normalize casts
    in the goal and `h` before using `exact h` or `apply h`.
  - `rw_mod_cast` for `rw`. It applies `norm_cast` between rewrites.
  - `assumption_mod_cast` for `assumption`.
    This is effectively `norm_cast at *; assumption`, but more efficient.
    It normalizes casts in the goal and, for every hypothesis `h` in the context,
    it will try to normalize casts in `h` and use `exact h`.
  
  See also `push_cast`, which moves casts inwards rather than lifting them outwards.

syntax "norm_cast0"... [Lean.Parser.Tactic.normCast0]
  Implementation of `norm_cast` (the full `norm_cast` calls `trivial` afterwards).

syntax "norm_num"... [Mathlib.Tactic.normNum]
  Normalize numerical expressions. Supports the operations `+` `-` `*` `/` `⁻¹` `^` and `%`
  over numerical types such as `ℕ`, `ℤ`, `ℚ`, `ℝ`, `ℂ` and some general algebraic types,
  and can prove goals of the form `A = B`, `A ≠ B`, `A < B` and `A ≤ B`, where `A` and `B` are
  numerical expressions. It also has a relatively simple primality prover.

syntax "norm_num1"... [Mathlib.Tactic.normNum1]
  Basic version of `norm_num` that does not call `simp`.

syntax "nth_rewrite"... [Mathlib.Tactic.nthRewriteSeq]
  `nth_rewrite` is a variant of `rewrite` that only changes the nth occurrence of the expression
  to be rewritten.
  
  Note: The occurrences are counted beginning with `1` and not `0`, this is different than in
  mathlib3. The translation will be handled by mathport.

syntax "nth_rw"... [Mathlib.Tactic.nthRwSeq]
  `nth_rw` is like `nth_rewrite`, but also tries to close the goal by trying `rfl` afterwards.

syntax "observe"... [Mathlib.Tactic.LibrarySearch.observe]
  `observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.
  If no proof is found, the tactic fails.
  In other words, this tactic is equivalent to `have hp : p := by exact?`.
  
  If `hp` is omitted, then the placeholder `this` is used.
  
  The variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.
  This may be particularly useful to speed up proofs.

syntax "observe?"... [Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»]
  `observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.
  If no proof is found, the tactic fails.
  In other words, this tactic is equivalent to `have hp : p := by exact?`.
  
  If `hp` is omitted, then the placeholder `this` is used.
  
  The variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.
  This may be particularly useful to speed up proofs.

syntax "observe?"... [Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»]
  `observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.
  If no proof is found, the tactic fails.
  In other words, this tactic is equivalent to `have hp : p := by exact?`.
  
  If `hp` is omitted, then the placeholder `this` is used.
  
  The variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.
  This may be particularly useful to speed up proofs.

syntax "obtain"... [Lean.Parser.Tactic.obtain]
  The `obtain` tactic is a combination of `have` and `rcases`. See `rcases` for
  a description of supported patterns.
  
  ```lean
  obtain ⟨patt⟩ : type := proof
  ```
  is equivalent to
  ```lean
  have h : type := proof
  rcases h with ⟨patt⟩
  ```
  
  If `⟨patt⟩` is omitted, `rcases` will try to infer the pattern.
  
  If `type` is omitted, `:= proof` is required.

syntax "omega"... [Lean.Parser.Tactic.omega]
  The `omega` tactic, for resolving integer and natural linear arithmetic problems.
  
  It is not yet a full decision procedure (no "dark" or "grey" shadows),
  but should be effective on many problems.
  
  We handle hypotheses of the form `x = y`, `x < y`, `x ≤ y`, and `k ∣ x` for `x y` in `Nat` or `Int`
  (and `k` a literal), along with negations of these statements.
  
  We decompose the sides of the inequalities as linear combinations of atoms.
  
  If we encounter `x / k` or `x % k` for literal integers `k` we introduce new auxiliary variables
  and the relevant inequalities.
  
  On the first pass, we do not perform case splits on natural subtraction.
  If `omega` fails, we recursively perform a case split on
  a natural subtraction appearing in a hypothesis, and try again.
  
  The options
  ```
  omega (config :=
    { splitDisjunctions := true, splitNatSub := true, splitNatAbs := true, splitMinMax := true })
  ```
  can be used to:
  * `splitDisjunctions`: split any disjunctions found in the context,
    if the problem is not otherwise solvable.
  * `splitNatSub`: for each appearance of `((a - b : Nat) : Int)`, split on `a ≤ b` if necessary.
  * `splitNatAbs`: for each appearance of `Int.natAbs a`, split on `0 ≤ a` if necessary.
  * `splitMinMax`: for each occurrence of `min a b`, split on `min a b = a ∨ min a b = b`
  Currently, all of these are on by default.

syntax "on_goal"... [Std.Tactic.«tacticOn_goal-_=>_»]
  `on_goal n => tacSeq` creates a block scope for the `n`-th goal and tries the sequence
  of tactics `tacSeq` on it.
  
  `on_goal -n => tacSeq` does the same, but the `n`-th goal is chosen by counting from the
  bottom.
  
  The goal is not required to be solved and any resulting subgoals are inserted back into the
  list of goals, replacing the chosen goal.

syntax "peel"... [Mathlib.Tactic.Peel.peel]
  Peels matching quantifiers off of a given term and the goal and introduces the relevant variables.
  
  - `peel e` peels all quantifiers (at reducible transparency),
    using `this` for the name of the peeled hypothesis.
  - `peel e with h` is `peel e` but names the peeled hypothesis `h`.
    If `h` is `_` then uses `this` for the name of the peeled hypothesis.
  - `peel n e` peels `n` quantifiers (at default transparency).
  - `peel n e with x y z ... h` peels `n` quantifiers, names the peeled hypothesis `h`,
    and uses `x`, `y`, `z`, and so on to name the introduced variables; these names may be `_`.
    If `h` is `_` then uses `this` for the name of the peeled hypothesis.
    The length of the list of variables does not need to equal `n`.
  - `peel e with x₁ ... xₙ h` is `peel n e with x₁ ... xₙ h`.
  
  There are also variants that apply to an iff in the goal:
  - `peel n` peels `n` quantifiers in an iff.
  - `peel with x₁ ... xₙ` peels `n` quantifiers in an iff and names them.
  
  Given `p q : ℕ → Prop`, `h : ∀ x, p x`, and a goal `⊢ : ∀ x, q x`, the tactic `peel h with x h'`
  will introduce `x : ℕ`, `h' : p x` into the context and the new goal will be `⊢ q x`. This works
  with `∃`, as well as `∀ᶠ` and `∃ᶠ`, and it can even be applied to a sequence of quantifiers. Note
  that this is a logically weaker setup, so using this tactic is not always feasible.
  
  For a more complex example, given a hypothesis and a goal:
  ```
  h : ∀ ε > (0 : ℝ), ∃ N : ℕ, ∀ n ≥ N, 1 / (n + 1 : ℝ) < ε
  ⊢ ∀ ε > (0 : ℝ), ∃ N : ℕ, ∀ n ≥ N, 1 / (n + 1 : ℝ) ≤ ε
  ```
  (which differ only in `<`/`≤`), applying `peel h with ε hε N n hn h_peel` will yield a tactic state:
  ```
  h : ∀ ε > (0 : ℝ), ∃ N : ℕ, ∀ n ≥ N, 1 / (n + 1 : ℝ) < ε
  ε : ℝ
  hε : 0 < ε
  N n : ℕ
  hn : N ≤ n
  h_peel : 1 / (n + 1 : ℝ) < ε
  ⊢ 1 / (n + 1 : ℝ) ≤ ε
  ```
  and the goal can be closed with `exact h_peel.le`.
  Note that in this example, `h` and the goal are logically equivalent statements, but `peel`
  *cannot* be immediately applied to show that the goal implies `h`.
  
  In addition, `peel` supports goals of the form `(∀ x, p x) ↔ ∀ x, q x`, or likewise for any
  other quantifier. In this case, there is no hypothesis or term to supply, but otherwise the syntax
  is the same. So for such goals, the syntax is `peel 1` or `peel with x`, and after which the
  resulting goal is `p x ↔ q x`. The `congr!` tactic can also be applied to goals of this form using
  `congr! 1 with x`. While `congr!` applies congruence lemmas in general, `peel` can be relied upon
  to only apply to outermost quantifiers.
  
  Finally, the user may supply a term `e` via `... using e` in order to close the goal
  immediately. In particular, `peel h using e` is equivalent to `peel h; exact e`. The `using` syntax
  may be paired with any of the other features of `peel`.
  
  This tactic works by repeatedly applying lemmas such as `forall_imp`, `Exists.imp`,
  `Filter.Eventually.mp`, `Filter.Frequently.mp`, and `Filter.eventually_of_forall`.

syntax "pick_goal"... [Std.Tactic.«tacticPick_goal-_»]
  `pick_goal n` will move the `n`-th goal to the front.
  
  `pick_goal -n` will move the `n`-th goal (counting from the bottom) to the front.
  
  See also `Tactic.rotate_goals`, which moves goals from the front to the back and vice-versa.

syntax "polyrith"... [Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»]
  Attempts to prove polynomial equality goals through polynomial arithmetic
  on the hypotheses (and additional proof terms if the user specifies them).
  It proves the goal by generating an appropriate call to the tactic
  `linear_combination`. If this call succeeds, the call to `linear_combination`
  is suggested to the user.
  
  * `polyrith` will use all relevant hypotheses in the local context.
  * `polyrith [t1, t2, t3]` will add proof terms t1, t2, t3 to the local context.
  * `polyrith only [h1, h2, h3, t1, t2, t3]` will use only local hypotheses
    `h1`, `h2`, `h3`, and proofs `t1`, `t2`, `t3`. It will ignore the rest of the local context.
  
  Notes:
  * This tactic only works with a working internet connection, since it calls Sage
    using the SageCell web API at <https://sagecell.sagemath.org/>.
    Many thanks to the Sage team and organization for allowing this use.
  * This tactic assumes that the user has `python3` installed and available on the path.
    (Test by opening a terminal and executing `python3 --version`.)
    It also assumes that the `requests` library is installed: `python3 -m pip install requests`.
  
  Examples:
  
  ```lean
  example (x y : ℚ) (h1 : x*y + 2*x = 1) (h2 : x = y) :
    x*y = -2*y + 1 :=
  by polyrith
  -- Try this: linear_combination h1 - 2 * h2
  
  example (x y z w : ℚ) (hzw : z = w) : x*z + 2*y*z = x*w + 2*y*w :=
  by polyrith
  -- Try this: linear_combination (2 * y + x) * hzw
  
  constant scary : ∀ a b : ℚ, a + b = 0
  
  example (a b c d : ℚ) (h : a + b = 0) (h2: b + c = 0) : a + b + c + d = 0 :=
  by polyrith only [scary c d, h]
  -- Try this: linear_combination scary c d + h
  ```

syntax "positivity"... [Mathlib.Tactic.Positivity.positivity]
  Tactic solving goals of the form `0 ≤ x`, `0 < x` and `x ≠ 0`.  The tactic works recursively
  according to the syntax of the expression `x`, if the atoms composing the expression all have
  numeric lower bounds which can be proved positive/nonnegative/nonzero by `norm_num`.  This tactic
  either closes the goal or fails.
  
  Examples:
  ```
  example {a : ℤ} (ha : 3 < a) : 0 ≤ a ^ 3 + a := by positivity
  
  example {a : ℤ} (ha : 1 < a) : 0 < |(3:ℤ) + a| := by positivity
  
  example {b : ℤ} : 0 ≤ max (-3) (b ^ 2) := by positivity
  ```

syntax "pure_coherence"... [Mathlib.Tactic.Coherence.pure_coherence]
  `pure_coherence` uses the coherence theorem for monoidal categories to prove the goal.
  It can prove any equality made up only of associators, unitors, and identities.
  ```lean
  example {C : Type} [Category C] [MonoidalCategory C] :
    (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom :=
  by pure_coherence
  ```
  
  Users will typically just use the `coherence` tactic,
  which can also cope with identities of the form
  `a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`
  where `a = a'`, `b = b'`, and `c = c'` can be proved using `pure_coherence`

syntax "push_cast"... [Lean.Parser.Tactic.pushCast]
  `push_cast` rewrites the goal to move certain coercions (*casts*) inward, toward the leaf nodes.
  This uses `norm_cast` lemmas in the forward direction.
  For example, `↑(a + b)` will be written to `↑a + ↑b`.
  - `push_cast` moves casts inward in the goal.
  - `push_cast at h` moves casts inward in the hypothesis `h`.
  It can be used with extra simp lemmas with, for example, `push_cast [Int.add_zero]`.
  
  Example:
  ```lean
  example (a b : Nat)
      (h1 : ((a + b : Nat) : Int) = 10)
      (h2 : ((a + b + 0 : Nat) : Int) = 10) :
      ((a + b : Nat) : Int) = 10 := by
    /-
    h1 : ↑(a + b) = 10
    h2 : ↑(a + b + 0) = 10
    ⊢ ↑(a + b) = 10
    -/
    push_cast
    /- Now
    ⊢ ↑a + ↑b = 10
    -/
    push_cast at h1
    push_cast [Int.add_zero] at h2
    /- Now
    h1 h2 : ↑a + ↑b = 10
    -/
    exact h1
  ```
  
  See also `norm_cast`.

syntax "push_neg"... [Mathlib.Tactic.PushNeg.tacticPush_neg_]
  Push negations into the conclusion of a hypothesis.
  For instance, a hypothesis `h : ¬ ∀ x, ∃ y, x ≤ y` will be transformed by `push_neg at h` into
  `h : ∃ x, ∀ y, y < x`. Variable names are conserved.
  This tactic pushes negations inside expressions. For instance, given a hypothesis
  ```lean
  h : ¬ ∀ ε > 0, ∃ δ > 0, ∀ x, |x - x₀| ≤ δ → |f x - y₀| ≤ ε)
  ```
  writing `push_neg at h` will turn `h` into
  ```lean
  h : ∃ ε, ε > 0 ∧ ∀ δ, δ > 0 → (∃ x, |x - x₀| ≤ δ ∧ ε < |f x - y₀|),
  ```
  (The pretty printer does *not* use the abbreviations `∀ δ > 0` and `∃ ε > 0` but this issue
  has nothing to do with `push_neg`).
  
  Note that names are conserved by this tactic, contrary to what would happen with `simp`
  using the relevant lemmas. One can also use this tactic at the goal using `push_neg`,
  at every hypothesis and the goal using `push_neg at *` or at selected hypotheses and the goal
  using say `push_neg at h h' ⊢` as usual.
  
  This tactic has two modes: in standard mode, it transforms `¬(p ∧ q)` into `p → ¬q`, whereas in
  distrib mode it produces `¬p ∨ ¬q`. To use distrib mode, use `set_option push_neg.use_distrib true`.

syntax "qify"... [Mathlib.Tactic.Qify.qify]
  The `qify` tactic is used to shift propositions from `ℕ` or `ℤ` to `ℚ`.
  This is often useful since `ℚ` has well-behaved division.
  ```
  example (a b c x y z : ℕ) (h : ¬ x*y*z < 0) : c < a + 3*b := by
    qify
    qify at h
    /-
    h : ¬↑x * ↑y * ↑z < 0
    ⊢ ↑c < ↑a + 3 * ↑b
    -/
    sorry
  ```
  `qify` can be given extra lemmas to use in simplification. This is especially useful in the
  presence of nat subtraction: passing `≤` arguments will allow `push_cast` to do more work.
  ```
  example (a b c : ℤ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by
    qify [hab] at h hb ⊢
    exact (div_eq_iff hb).1 h
  ```
  `qify` makes use of the `@[zify_simps]` and `@[qify_simps]` attributes to move propositions,
  and the `push_cast` tactic to simplify the `ℚ`-valued expressions.

syntax "rcases"... [Lean.Parser.Tactic.rcases]
  `rcases` is a tactic that will perform `cases` recursively, according to a pattern. It is used to
  destructure hypotheses or expressions composed of inductive types like `h1 : a ∧ b ∧ c ∨ d` or
  `h2 : ∃ x y, trans_rel R x y`. Usual usage might be `rcases h1 with ⟨ha, hb, hc⟩ | hd` or
  `rcases h2 with ⟨x, y, _ | ⟨z, hxz, hzy⟩⟩` for these examples.
  
  Each element of an `rcases` pattern is matched against a particular local hypothesis (most of which
  are generated during the execution of `rcases` and represent individual elements destructured from
  the input expression). An `rcases` pattern has the following grammar:
  
  * A name like `x`, which names the active hypothesis as `x`.
  * A blank `_`, which does nothing (letting the automatic naming system used by `cases` name the
    hypothesis).
  * A hyphen `-`, which clears the active hypothesis and any dependents.
  * The keyword `rfl`, which expects the hypothesis to be `h : a = b`, and calls `subst` on the
    hypothesis (which has the effect of replacing `b` with `a` everywhere or vice versa).
  * A type ascription `p : ty`, which sets the type of the hypothesis to `ty` and then matches it
    against `p`. (Of course, `ty` must unify with the actual type of `h` for this to work.)
  * A tuple pattern `⟨p1, p2, p3⟩`, which matches a constructor with many arguments, or a series
    of nested conjunctions or existentials. For example if the active hypothesis is `a ∧ b ∧ c`,
    then the conjunction will be destructured, and `p1` will be matched against `a`, `p2` against `b`
    and so on.
  * A `@` before a tuple pattern as in `@⟨p1, p2, p3⟩` will bind all arguments in the constructor,
    while leaving the `@` off will only use the patterns on the explicit arguments.
  * An alternation pattern `p1 | p2 | p3`, which matches an inductive type with multiple constructors,
    or a nested disjunction like `a ∨ b ∨ c`.
  
  A pattern like `⟨a, b, c⟩ | ⟨d, e⟩` will do a split over the inductive datatype,
  naming the first three parameters of the first constructor as `a,b,c` and the
  first two of the second constructor `d,e`. If the list is not as long as the
  number of arguments to the constructor or the number of constructors, the
  remaining variables will be automatically named. If there are nested brackets
  such as `⟨⟨a⟩, b | c⟩ | d` then these will cause more case splits as necessary.
  If there are too many arguments, such as `⟨a, b, c⟩` for splitting on
  `∃ x, ∃ y, p x`, then it will be treated as `⟨a, ⟨b, c⟩⟩`, splitting the last
  parameter as necessary.
  
  `rcases` also has special support for quotient types: quotient induction into Prop works like
  matching on the constructor `quot.mk`.
  
  `rcases h : e with PAT` will do the same as `rcases e with PAT` with the exception that an
  assumption `h : e = PAT` will be added to the context.

syntax "rcongr"... [Std.Tactic.rcongr]
  Repeatedly apply `congr` and `ext`, using the given patterns as arguments for `ext`.
  
  There are two ways this tactic stops:
  * `congr` fails (makes no progress), after having already applied `ext`.
  * `congr` canceled out the last usage of `ext`. In this case, the state is reverted to before
    the `congr` was applied.
  
  For example, when the goal is
  ```
  ⊢ (fun x => f x + 3) '' s = (fun x => g x + 3) '' s
  ```
  then `rcongr x` produces the goal
  ```
  x : α ⊢ f x = g x
  ```
  This gives the same result as `congr; ext x; congr`.
  
  In contrast, `congr` would produce
  ```
  ⊢ (fun x => f x + 3) = (fun x => g x + 3)
  ```
  and `congr with x` (or `congr; ext x`) would produce
  ```
  x : α ⊢ f x + 3 = g x + 3
  ```

syntax "recover"... [Mathlib.Tactic.tacticRecover_]
  Modifier `recover` for a tactic (sequence) to debug cases where goals are closed incorrectly.
  The tactic `recover tacs` for a tactic (sequence) tacs applies the tactics and then adds goals
  that are not closed starting from the original

syntax "reduce"... [Mathlib.Tactic.tacticReduce__]
  `reduce at loc` completely reduces the given location.
  This also exists as a `conv`-mode tactic.
  
  This does the same transformation as the `#reduce` command.

syntax "reduce_mod_char"... [Tactic.ReduceModChar.reduce_mod_char]
  The tactic `reduce_mod_char` looks for numeric expressions in characteristic `p`
  and reduces these to lie between `0` and `p`.
  
  For example:
  ```
  example : (5 : ZMod 4) = 1 := by reduce_mod_char
  example : (X ^ 2 - 3 * X + 4 : (ZMod 4)[X]) = X ^ 2 + X := by reduce_mod_char
  ```
  
  It also handles negation, turning it into multiplication by `p - 1`,
  and similarly subtraction.
  
  This tactic uses the type of the subexpression to figure out if it is indeed of positive
  characteristic, for improved performance compared to trying to synthesise a `CharP` instance.

syntax "refine"... [Lean.Parser.Tactic.refine]
  `refine e` behaves like `exact e`, except that named (`?x`) or unnamed (`?_`)
  holes in `e` that are not solved by unification with the main goal's target type
  are converted into new goals, using the hole's name, if any, as the goal case name.

syntax "refine'"... [Lean.Parser.Tactic.refine']
  `refine' e` behaves like `refine e`, except that unsolved placeholders (`_`)
  and implicit parameters are also converted into new goals.

syntax "refine_lift"... [Lean.Parser.Tactic.tacticRefine_lift_]
  Auxiliary macro for lifting have/suffices/let/...
  It makes sure the "continuation" `?_` is the main goal after refining.

syntax "refine_lift'"... [Lean.Parser.Tactic.tacticRefine_lift'_]
  Similar to `refine_lift`, but using `refine'`

syntax "rel"... [Mathlib.Tactic.GCongr.«tacticRel[_]»]
  The `rel` tactic applies "generalized congruence" rules to solve a relational goal by
  "substitution".  For example,
  ```
  example {a b x c d : ℝ} (h1 : a ≤ b) (h2 : c ≤ d) :
      x ^ 2 * a + c ≤ x ^ 2 * b + d := by
    rel [h1, h2]
  ```
  In this example we "substitute" the hypotheses `a ≤ b` and `c ≤ d` into the LHS `x ^ 2 * a + c` of
  the goal and obtain the RHS `x ^ 2 * b + d`, thus proving the goal.
  
  The "generalized congruence" rules used are the library lemmas which have been tagged with the
  attribute `@[gcongr]`.  For example, the first example constructs the proof term
  ```
  add_le_add (mul_le_mul_of_nonneg_left h1 (pow_bit0_nonneg x 1)) h2
  ```
  using the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.  If there are
  no applicable generalized congruence lemmas, the tactic fails.
  
  The tactic attempts to discharge side goals to these "generalized congruence" lemmas (such as the
  side goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic
  `gcongr_discharger`, which wraps `positivity` but can also be extended. If the side goals cannot
  be discharged in this way, the tactic fails.

syntax "rename"... [Lean.Parser.Tactic.rename]
  `rename t => x` renames the most recent hypothesis whose type matches `t`
  (which may contain placeholders) to `x`, or fails if no such hypothesis could be found.

syntax "rename'"... [Mathlib.Tactic.rename']
  `rename' h => hnew` renames the hypothesis named `h` to `hnew`.
  To rename several hypothesis, use `rename' h₁ => h₁new, h₂ => h₂new`.
  You can use `rename' a => b, b => a` to swap two variables.

syntax "rename_bvar"... [Mathlib.Tactic.«tacticRename_bvar_→__»]
  * `rename_bvar old new` renames all bound variables named `old` to `new` in the target.
  * `rename_bvar old new at h` does the same in hypothesis `h`.
  
  ```lean
  example (P : ℕ → ℕ → Prop) (h : ∀ n, ∃ m, P n m) : ∀ l, ∃ m, P l m := by
    rename_bvar n q at h -- h is now ∀ (q : ℕ), ∃ (m : ℕ), P q m,
    rename_bvar m n -- target is now ∀ (l : ℕ), ∃ (n : ℕ), P k n,
    exact h -- Lean does not care about those bound variable names
  ```
  Note: name clashes are resolved automatically.

syntax "rename_i"... [Lean.Parser.Tactic.renameI]
  `rename_i x_1 ... x_n` renames the last `n` inaccessible names using the given names.

syntax "repeat"... [Lean.Parser.Tactic.tacticRepeat_]
  `repeat tac` repeatedly applies `tac` to the main goal until it fails.
  That is, if `tac` produces multiple subgoals, only subgoals up to the first failure will be visited.
  The `Std` library provides `repeat'` which repeats separately in each subgoal.

syntax "repeat'"... [Lean.Parser.Tactic.repeat']
  `repeat' tac` runs `tac` on all of the goals to produce a new list of goals,
  then runs `tac` again on all of those goals, and repeats until `tac` fails on all remaining goals.

syntax "repeat1"... [Mathlib.Tactic.tacticRepeat1_]
  `repeat1 tac` applies `tac` to main goal at least once. If the application succeeds,
  the tactic is applied recursively to the generated subgoals until it eventually fails.

syntax "repeat1'"... [Lean.Parser.Tactic.repeat1']
  `repeat1' tac` applies `tac` to main goal at least once. If the application succeeds,
  the tactic is applied recursively to the generated subgoals until it eventually fails.

syntax "replace"... [Mathlib.Tactic.replace']
  Acts like `have`, but removes a hypothesis with the same name as
  this one if possible. For example, if the state is:
  
  Then after `replace h : β` the state will be:
  
  ```lean
  case h
  f : α → β
  h : α
  ⊢ β
  
  f : α → β
  h : β
  ⊢ goal
  ```
  
  whereas `have h : β` would result in:
  
  ```lean
  case h
  f : α → β
  h : α
  ⊢ β
  
  f : α → β
  h✝ : α
  h : β
  ⊢ goal
  ```

syntax "replace"... [Lean.Parser.Tactic.replace]
  Acts like `have`, but removes a hypothesis with the same name as
  this one if possible. For example, if the state is:
  
  ```lean
  f : α → β
  h : α
  ⊢ goal
  ```
  
  Then after `replace h := f h` the state will be:
  
  ```lean
  f : α → β
  h : β
  ⊢ goal
  ```
  
  whereas `have h := f h` would result in:
  
  ```lean
  f : α → β
  h† : α
  h : β
  ⊢ goal
  ```
  
  This can be used to simulate the `specialize` and `apply at` tactics of Coq.

syntax "revert"... [Lean.Parser.Tactic.revert]
  `revert x...` is the inverse of `intro x...`: it moves the given hypotheses
  into the main goal's target type.

syntax "rewrite"... [Lean.Parser.Tactic.rewriteSeq]
  `rewrite [e]` applies identity `e` as a rewrite rule to the target of the main goal.
  If `e` is preceded by left arrow (`←` or `<-`), the rewrite is applied in the reverse direction.
  If `e` is a defined constant, then the equational theorems associated with `e` are used.
  This provides a convenient way to unfold `e`.
  - `rewrite [e₁, ..., eₙ]` applies the given rules sequentially.
  - `rewrite [e] at l` rewrites `e` at location(s) `l`, where `l` is either `*` or a
    list of hypotheses in the local context. In the latter case, a turnstile `⊢` or `|-`
    can also be used, to signify the target of the goal.
  
  Using `rw (config := {occs := .pos L}) [e]`,
  where `L : List Nat`, you can control which "occurrences" are rewritten.
  (This option applies to each rule, so usually this will only be used with a single rule.)
  Occurrences count from `1`.
  At each allowed occurrence, arguments of the rewrite rule `e` may be instantiated,
  restricting which later rewrites can be found.
  (Disallowed occurrences do not result in instantiation.)
  `{occs := .neg L}` allows skipping specified occurrences.

syntax "rfl"... [Lean.Parser.Tactic.tacticRfl]
  `rfl` tries to close the current goal using reflexivity.
  This is supposed to be an extensible tactic and users can add their own support
  for new reflexive relations.
  
  Remark: `rfl` is an extensible tactic. We later add `macro_rules` to try different
  reflexivity theorems (e.g., `Iff.rfl`).

syntax "rfl'"... [Lean.Parser.Tactic.tacticRfl']
  `rfl'` is similar to `rfl`, but disables smart unfolding and unfolds all kinds of definitions,
  theorems included (relevant for declarations defined by well-founded recursion).

syntax "rify"... [Mathlib.Tactic.Rify.rify]
  The `rify` tactic is used to shift propositions from `ℕ`, `ℤ` or `ℚ` to `ℝ`.
  Although less useful than its cousins `zify` and `qify`, it can be useful when your
  goal or context already involves real numbers.
  
  In the example below, assumption `hn` is about natural numbers, `hk` is about integers
  and involves casting a natural number to `ℤ`, and the conclusion is about real numbers.
  The proof uses `rify` to lift both assumptions to `ℝ` before calling `linarith`.
  ```
  example {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : 2 * k ≤ n + 2) :
      (0 : ℝ) < n - k - 1 := by
    rify at hn hk /- Now have hn : 8 ≤ (n : ℝ)   hk : 2 * (k : ℝ) ≤ (n : ℝ) + 2-/
    linarith
  ```
  
  `rify` makes use of the `@[zify_simps]`, `@[qify_simps]` and `@[rify_simps]` attributes to move
  propositions, and the `push_cast` tactic to simplify the `ℝ`-valued expressions.
  
  `rify` can be given extra lemmas to use in simplification. This is especially useful in the
  presence of nat subtraction: passing `≤` arguments will allow `push_cast` to do more work.
  ```
  example (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : a < b + c := by
    rify [hab] at h ⊢
    linarith
  ```
  Note that `zify` or `qify` would work just as well in the above example (and `zify` is the natural
  choice since it is enough to get rid of the pathological `ℕ` subtraction).

syntax "right"... [Lean.Parser.Tactic.right]
  Applies the second constructor when
  the goal is an inductive type with exactly two constructors, or fails otherwise.
  ```
  example {p q : Prop} (h : q) : p ∨ q := by
    right
    exact h
  ```

syntax "ring"... [Mathlib.Tactic.RingNF.ring]
  Tactic for evaluating expressions in *commutative* (semi)rings, allowing for variables in the
  exponent.
  
  * `ring!` will use a more aggressive reducibility setting to determine equality of atoms.
  * `ring1` fails if the target is not an equality.
  
  For example:
  ```
  example (n : ℕ) (m : ℤ) : 2^(n+1) * m = 2 * 2^n * m := by ring
  example (a b : ℤ) (n : ℕ) : (a + b)^(n + 2) = (a^2 + b^2 + a * b + b * a) * (a + b)^n := by ring
  example (x y : ℕ) : x + id y = y + id x := by ring!
  ```

syntax "ring!"... [Mathlib.Tactic.RingNF.tacticRing!]
  Tactic for evaluating expressions in *commutative* (semi)rings, allowing for variables in the
  exponent.
  
  * `ring!` will use a more aggressive reducibility setting to determine equality of atoms.
  * `ring1` fails if the target is not an equality.
  
  For example:
  ```
  example (n : ℕ) (m : ℤ) : 2^(n+1) * m = 2 * 2^n * m := by ring
  example (a b : ℤ) (n : ℕ) : (a + b)^(n + 2) = (a^2 + b^2 + a * b + b * a) * (a + b)^n := by ring
  example (x y : ℕ) : x + id y = y + id x := by ring!
  ```

syntax "ring1"... [Mathlib.Tactic.Ring.ring1]
  Tactic for solving equations of *commutative* (semi)rings,
  allowing variables in the exponent.
  
  * This version of `ring` fails if the target is not an equality.
  * The variant `ring1!` will use a more aggressive reducibility setting
    to determine equality of atoms.

syntax "ring1!"... [Mathlib.Tactic.Ring.tacticRing1!]
  Tactic for solving equations of *commutative* (semi)rings,
  allowing variables in the exponent.
  
  * This version of `ring` fails if the target is not an equality.
  * The variant `ring1!` will use a more aggressive reducibility setting
    to determine equality of atoms.

syntax "ring1_nf"... [Mathlib.Tactic.RingNF.ring1NF]
  Tactic for solving equations of *commutative* (semi)rings, allowing variables in the exponent.
  
  * This version of `ring1` uses `ring_nf` to simplify in atoms.
  * The variant `ring1_nf!` will use a more aggressive reducibility setting
    to determine equality of atoms.

syntax "ring1_nf!"... [Mathlib.Tactic.RingNF.tacticRing1_nf!_]
  Tactic for solving equations of *commutative* (semi)rings, allowing variables in the exponent.
  
  * This version of `ring1` uses `ring_nf` to simplify in atoms.
  * The variant `ring1_nf!` will use a more aggressive reducibility setting
    to determine equality of atoms.

syntax "ring_nf"... [Mathlib.Tactic.RingNF.ringNF]
  Simplification tactic for expressions in the language of commutative (semi)rings,
  which rewrites all ring expressions into a normal form.
  * `ring_nf!` will use a more aggressive reducibility setting to identify atoms.
  * `ring_nf (config := cfg)` allows for additional configuration:
    * `red`: the reducibility setting (overridden by `!`)
    * `recursive`: if true, `ring_nf` will also recurse into atoms
  * `ring_nf` works as both a tactic and a conv tactic.
    In tactic mode, `ring_nf at h` can be used to rewrite in a hypothesis.

syntax "ring_nf!"... [Mathlib.Tactic.RingNF.tacticRing_nf!__]
  Simplification tactic for expressions in the language of commutative (semi)rings,
  which rewrites all ring expressions into a normal form.
  * `ring_nf!` will use a more aggressive reducibility setting to identify atoms.
  * `ring_nf (config := cfg)` allows for additional configuration:
    * `red`: the reducibility setting (overridden by `!`)
    * `recursive`: if true, `ring_nf` will also recurse into atoms
  * `ring_nf` works as both a tactic and a conv tactic.
    In tactic mode, `ring_nf at h` can be used to rewrite in a hypothesis.

syntax "rintro"... [Lean.Parser.Tactic.rintro]
  The `rintro` tactic is a combination of the `intros` tactic with `rcases` to
  allow for destructuring patterns while introducing variables. See `rcases` for
  a description of supported patterns. For example, `rintro (a | ⟨b, c⟩) ⟨d, e⟩`
  will introduce two variables, and then do case splits on both of them producing
  two subgoals, one with variables `a d e` and the other with `b c d e`.
  
  `rintro`, unlike `rcases`, also supports the form `(x y : ty)` for introducing
  and type-ascripting multiple variables at once, similar to binders.

syntax "rotate_left"... [Lean.Parser.Tactic.rotateLeft]
  `rotate_left n` rotates goals to the left by `n`. That is, `rotate_left 1`
  takes the main goal and puts it to the back of the subgoal list.
  If `n` is omitted, it defaults to `1`.

syntax "rotate_right"... [Lean.Parser.Tactic.rotateRight]
  Rotate the goals to the right by `n`. That is, take the goal at the back
  and push it to the front `n` times. If `n` is omitted, it defaults to `1`.

syntax "rsuffices"... [rsuffices]
  The `rsuffices` tactic is an alternative version of `suffices`, that allows the usage
  of any syntax that would be valid in an `obtain` block. This tactic just calls `obtain`
  on the expression, and then `rotate_left`.

syntax "run_tac"... [Lean.Parser.Tactic.runTac]
  The `run_tac doSeq` tactic executes code in `TacticM Unit`.

syntax "rw"... [Lean.Parser.Tactic.rwSeq]
  `rw` is like `rewrite`, but also tries to close the goal by "cheap" (reducible) `rfl` afterwards.

syntax "rw?"... [Lean.Parser.Tactic.rewrites?]
  `rw?` tries to find a lemma which can rewrite the goal.
  
  `rw?` should not be left in proofs; it is a search tool, like `apply?`.
  
  Suggestions are printed as `rw [h]` or `rw [← h]`.
  
  You can use `rw? [-my_lemma, -my_theorem]` to prevent `rw?` using the named lemmas.

syntax "rw_mod_cast"... [Lean.Parser.Tactic.tacticRw_mod_cast___]
  Rewrites with the given rules, normalizing casts prior to each step.

syntax "rw_search"... [Mathlib.Tactic.RewriteSearch.tacticRw_search_]
  `rw_search` attempts to solve an equality goal
  by repeatedly rewriting using lemmas from the library.
  
  If no solution is found,
  the best sequence of rewrites found before `maxHeartbeats` elapses is returned.
  
  The search is a best-first search, minimising the Levenshtein edit distance between
  the pretty-printed expressions on either side of the equality.
  (The strings are tokenized at spaces,
  separating delimiters `(`, `)`, `[`, `]`, and `,` into their own tokens.)
  
  You can use `rw_search [-my_lemma, -my_theorem]`
  to prevent `rw_search` from using the names theorems.

syntax "rwa"... [Lean.Parser.Tactic.tacticRwa__]
  `rwa` calls `rw`, then closes any remaining goals using `assumption`.

syntax "save"... [Lean.Parser.Tactic.save]
  `save` is defined to be the same as `skip`, but the elaborator has
  special handling for occurrences of `save` in tactic scripts and will transform
  `by tac1; save; tac2` to `by (checkpoint tac1); tac2`, meaning that the effect of `tac1`
  will be cached and replayed. This is useful for improving responsiveness
  when working on a long tactic proof, by using `save` after expensive tactics.
  
  (TODO: do this automatically and transparently so that users don't have to use
  this combinator explicitly.)

syntax "set"... [Mathlib.Tactic.setTactic]

syntax "set!"... [Mathlib.Tactic.tacticSet!_]

syntax "show"... [Lean.Parser.Tactic.tacticShow_]
  `show t` finds the first goal whose target unifies with `t`. It makes that the main goal,
  performs the unification, and replaces the target with the unified version of `t`.

syntax "show_term"... [Lean.Parser.Tactic.showTerm]
  `show_term tac` runs `tac`, then prints the generated term in the form
  "exact X Y Z" or "refine X ?_ Z" if there are remaining subgoals.
  
  (For some tactics, the printed term will not be human readable.)

syntax "simp"... [Lean.Parser.Tactic.simp]
  The `simp` tactic uses lemmas and hypotheses to simplify the main goal target or
  non-dependent hypotheses. It has many variants:
  - `simp` simplifies the main goal target using lemmas tagged with the attribute `[simp]`.
  - `simp [h₁, h₂, ..., hₙ]` simplifies the main goal target using the lemmas tagged
    with the attribute `[simp]` and the given `hᵢ`'s, where the `hᵢ`'s are expressions.
    If an `hᵢ` is a defined constant `f`, then the equational lemmas associated with
    `f` are used. This provides a convenient way to unfold `f`.
  - `simp [*]` simplifies the main goal target using the lemmas tagged with the
    attribute `[simp]` and all hypotheses.
  - `simp only [h₁, h₂, ..., hₙ]` is like `simp [h₁, h₂, ..., hₙ]` but does not use `[simp]` lemmas.
  - `simp [-id₁, ..., -idₙ]` simplifies the main goal target using the lemmas tagged
    with the attribute `[simp]`, but removes the ones named `idᵢ`.
  - `simp at h₁ h₂ ... hₙ` simplifies the hypotheses `h₁ : T₁` ... `hₙ : Tₙ`. If
    the target or another hypothesis depends on `hᵢ`, a new simplified hypothesis
    `hᵢ` is introduced, but the old one remains in the local context.
  - `simp at *` simplifies all the hypotheses and the target.
  - `simp [*] at *` simplifies target and all (propositional) hypotheses using the
    other hypotheses.

syntax "simp!"... [Lean.Parser.Tactic.simpAutoUnfold]
  `simp!` is shorthand for `simp` with `autoUnfold := true`.
  This will rewrite with all equation lemmas, which can be used to
  partially evaluate many definitions.

syntax "simp?"... [Lean.Parser.Tactic.simpTrace]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "simp?!"... [Lean.Parser.Tactic.tacticSimp?!_]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "simp_all"... [Lean.Parser.Tactic.simpAll]
  `simp_all` is a stronger version of `simp [*] at *` where the hypotheses and target
  are simplified multiple times until no simplification is applicable.
  Only non-dependent propositional hypotheses are considered.

syntax "simp_all!"... [Lean.Parser.Tactic.simpAllAutoUnfold]
  `simp_all!` is shorthand for `simp_all` with `autoUnfold := true`.
  This will rewrite with all equation lemmas, which can be used to
  partially evaluate many definitions.

syntax "simp_all?"... [Lean.Parser.Tactic.simpAllTrace]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "simp_all?!"... [Lean.Parser.Tactic.tacticSimp_all?!_]
  `simp?` takes the same arguments as `simp`, but reports an equivalent call to `simp only`
  that would be sufficient to close the goal. This is useful for reducing the size of the simp
  set in a local invocation to speed up processing.
  ```
  example (x : Nat) : (if True then x + 2 else 3) = x + 2 := by
    simp? -- prints "Try this: simp only [ite_true]"
  ```
  
  This command can also be used in `simp_all` and `dsimp`.

syntax "simp_all_arith"... [Lean.Parser.Tactic.simpAllArith]
  `simp_all_arith` combines the effects of `simp_all` and `simp_arith`.

syntax "simp_all_arith!"... [Lean.Parser.Tactic.simpAllArithAutoUnfold]
  `simp_all_arith!` combines the effects of `simp_all`, `simp_arith` and `simp!`.

syntax "simp_arith"... [Lean.Parser.Tactic.simpArith]
  `simp_arith` is shorthand for `simp` with `arith := true` and `decide := true`.
  This enables the use of normalization by linear arithmetic.

syntax "simp_arith!"... [Lean.Parser.Tactic.simpArithAutoUnfold]
  `simp_arith!` is shorthand for `simp_arith` with `autoUnfold := true`.
  This will rewrite with all equation lemmas, which can be used to
  partially evaluate many definitions.

syntax "simp_intro"... [Mathlib.Tactic.«tacticSimp_intro_____..Only_»]
  The `simp_intro` tactic is a combination of `simp` and `intro`: it will simplify the types of
  variables as it introduces them and uses the new variables to simplify later arguments
  and the goal.
  * `simp_intro x y z` introduces variables named `x y z`
  * `simp_intro x y z ..` introduces variables named `x y z` and then keeps introducing `_` binders
  * `simp_intro (config := cfg) (discharger := tac) x y .. only [h₁, h₂]`:
    `simp_intro` takes the same options as `simp` (see `simp`)
  ```
  example : x + 0 = y → x = z := by
    simp_intro h
    -- h: x = y ⊢ y = z
    sorry
  ```

syntax "simp_rw"... [Mathlib.Tactic.tacticSimp_rw___]
  `simp_rw` functions as a mix of `simp` and `rw`. Like `rw`, it applies each
  rewrite rule in the given order, but like `simp` it repeatedly applies these
  rules and also under binders like `∀ x, ...`, `∃ x, ...` and `fun x ↦...`.
  Usage:
  
  - `simp_rw [lemma_1, ..., lemma_n]` will rewrite the goal by applying the
    lemmas in that order. A lemma preceded by `←` is applied in the reverse direction.
  - `simp_rw [lemma_1, ..., lemma_n] at h₁ ... hₙ` will rewrite the given hypotheses.
  - `simp_rw [...] at *` rewrites in the whole context: all hypotheses and the goal.
  
  Lemmas passed to `simp_rw` must be expressions that are valid arguments to `simp`.
  For example, neither `simp` nor `rw` can solve the following, but `simp_rw` can:
  
  ```lean
  example {a : ℕ}
    (h1 : ∀ a b : ℕ, a - 1 ≤ b ↔ a ≤ b + 1)
    (h2 : ∀ a b : ℕ, a ≤ b ↔ ∀ c, c < a → c < b) :
    (∀ b, a - 1 ≤ b) = ∀ b c : ℕ, c < a → c < b + 1 :=
  by simp_rw [h1, h2]
  ```

syntax "simp_wf"... [tacticSimp_wf]
  Unfold definitions commonly used in well founded relation definitions.
  This is primarily intended for internal use in `decreasing_tactic`.

syntax "simpa"... [Lean.Parser.Tactic.simpa]
  This is a "finishing" tactic modification of `simp`. It has two forms.
  
  * `simpa [rules, ⋯] using e` will simplify the goal and the type of
  `e` using `rules`, then try to close the goal using `e`.
  
  Simplifying the type of `e` makes it more likely to match the goal
  (which has also been simplified). This construction also tends to be
  more robust under changes to the simp lemma set.
  
  * `simpa [rules, ⋯]` will simplify the goal and the type of a
  hypothesis `this` if present in the context, then try to close the goal using
  the `assumption` tactic.

syntax "simpa!"... [Lean.Parser.Tactic.tacticSimpa!_]
  This is a "finishing" tactic modification of `simp`. It has two forms.
  
  * `simpa [rules, ⋯] using e` will simplify the goal and the type of
  `e` using `rules`, then try to close the goal using `e`.
  
  Simplifying the type of `e` makes it more likely to match the goal
  (which has also been simplified). This construction also tends to be
  more robust under changes to the simp lemma set.
  
  * `simpa [rules, ⋯]` will simplify the goal and the type of a
  hypothesis `this` if present in the context, then try to close the goal using
  the `assumption` tactic.

syntax "simpa?"... [Lean.Parser.Tactic.tacticSimpa?_]
  This is a "finishing" tactic modification of `simp`. It has two forms.
  
  * `simpa [rules, ⋯] using e` will simplify the goal and the type of
  `e` using `rules`, then try to close the goal using `e`.
  
  Simplifying the type of `e` makes it more likely to match the goal
  (which has also been simplified). This construction also tends to be
  more robust under changes to the simp lemma set.
  
  * `simpa [rules, ⋯]` will simplify the goal and the type of a
  hypothesis `this` if present in the context, then try to close the goal using
  the `assumption` tactic.

syntax "simpa?!"... [Lean.Parser.Tactic.tacticSimpa?!_]
  This is a "finishing" tactic modification of `simp`. It has two forms.
  
  * `simpa [rules, ⋯] using e` will simplify the goal and the type of
  `e` using `rules`, then try to close the goal using `e`.
  
  Simplifying the type of `e` makes it more likely to match the goal
  (which has also been simplified). This construction also tends to be
  more robust under changes to the simp lemma set.
  
  * `simpa [rules, ⋯]` will simplify the goal and the type of a
  hypothesis `this` if present in the context, then try to close the goal using
  the `assumption` tactic.

syntax "sizeOf_list_dec"... [List.tacticSizeOf_list_dec]
  This tactic, added to the `decreasing_trivial` toolbox, proves that
  `sizeOf a < sizeOf as` when `a ∈ as`, which is useful for well founded recursions
  over a nested inductive like `inductive T | mk : List T → T`.

syntax "skip"... [Lean.Parser.Tactic.skip]
  `skip` does nothing.

syntax "sleep"... [Lean.Parser.Tactic.sleep]
  The tactic `sleep ms` sleeps for `ms` milliseconds and does nothing.
  It is used for debugging purposes only.

syntax "slice_lhs"... [sliceLHS]
  `slice_lhs a b => tac` zooms to the left hand side, uses associativity for categorical
  composition as needed, zooms in on the `a`-th through `b`-th morphisms, and invokes `tac`.

syntax "slice_rhs"... [sliceRHS]
  `slice_rhs a b => tac` zooms to the right hand side, uses associativity for categorical
  composition as needed, zooms in on the `a`-th through `b`-th morphisms, and invokes `tac`.

syntax "slim_check"... [slimCheckSyntax]
  `slim_check` considers a proof goal and tries to generate examples
  that would contradict the statement.
  
  Let's consider the following proof goal.
  
  ```lean
  xs : List ℕ,
  h : ∃ (x : ℕ) (H : x ∈ xs), x < 3
  ⊢ ∀ (y : ℕ), y ∈ xs → y < 5
  ```
  
  The local constants will be reverted and an instance will be found for
  `Testable (∀ (xs : List ℕ), (∃ x ∈ xs, x < 3) → (∀ y ∈ xs, y < 5))`.
  The `Testable` instance is supported by an instance of `Sampleable (List ℕ)`,
  `Decidable (x < 3)` and `Decidable (y < 5)`.
  
  Examples will be created in ascending order of size (more or less)
  
  The first counter-examples found will be printed and will result in an error:
  
  ```
  ===================
  Found problems!
  xs := [1, 28]
  x := 1
  y := 28
  -------------------
  ```
  
  If `slim_check` successfully tests 100 examples, it acts like
  admit. If it gives up or finds a counter-example, it reports an error.
  
  For more information on writing your own `Sampleable` and `Testable`
  instances, see `Testing.SlimCheck.Testable`.
  
  Optional arguments given with `slim_check (config : { ... })`
  * `numInst` (default 100): number of examples to test properties with
  * `maxSize` (default 100): final size argument
  
  Options:
  * `set_option trace.slim_check.decoration true`: print the proposition with quantifier annotations
  * `set_option trace.slim_check.discarded true`: print the examples discarded because they do not
    satisfy assumptions
  * `set_option trace.slim_check.shrink.steps true`: trace the shrinking of counter-example
  * `set_option trace.slim_check.shrink.candidates true`: print the lists of candidates considered
    when shrinking each variable
  * `set_option trace.slim_check.instance true`: print the instances of `testable` being used to test
    the proposition
  * `set_option trace.slim_check.success true`: print the tested samples that satisfy a property

syntax "smul_tac"... [RatFunc.tacticSmul_tac]
  Solve equations for `RatFunc K` by applying `RatFunc.induction_on`.

syntax "solve"... [solve]
  Similar to `first`, but succeeds only if one the given tactics solves the current goal.

syntax "solve_by_elim"... [Lean.Parser.Tactic.solveByElim]
  `solve_by_elim` calls `apply` on the main goal to find an assumption whose head matches
  and then repeatedly calls `apply` on the generated subgoals until no subgoals remain,
  performing at most `maxDepth` (defaults to 6) recursive steps.
  
  `solve_by_elim` discharges the current goal or fails.
  
  `solve_by_elim` performs backtracking if subgoals can not be solved.
  
  By default, the assumptions passed to `apply` are the local context, `rfl`, `trivial`,
  `congrFun` and `congrArg`.
  
  The assumptions can be modified with similar syntax as for `simp`:
  * `solve_by_elim [h₁, h₂, ..., hᵣ]` also applies the given expressions.
  * `solve_by_elim only [h₁, h₂, ..., hᵣ]` does not include the local context,
    `rfl`, `trivial`, `congrFun`, or `congrArg` unless they are explicitly included.
  * `solve_by_elim [-h₁, ... -hₙ]` removes the given local hypotheses.
  * `solve_by_elim using [a₁, ...]` uses all lemmas which have been labelled
    with the attributes `aᵢ` (these attributes must be created using `register_label_attr`).
  
  `solve_by_elim*` tries to solve all goals together, using backtracking if a solution for one goal
  makes other goals impossible.
  (Adding or removing local hypotheses may not be well-behaved when starting with multiple goals.)
  
  Optional arguments passed via a configuration argument as `solve_by_elim (config := { ... })`
  - `maxDepth`: number of attempts at discharging generated subgoals
  - `symm`: adds all hypotheses derived by `symm` (defaults to `true`).
  - `exfalso`: allow calling `exfalso` and trying again if `solve_by_elim` fails
    (defaults to `true`).
  - `transparency`: change the transparency mode when calling `apply`. Defaults to `.default`,
    but it is often useful to change to `.reducible`,
    so semireducible definitions will not be unfolded when trying to apply a lemma.
  
  See also the doc-comment for `Std.Tactic.BacktrackConfig` for the options
  `proc`, `suspend`, and `discharge` which allow further customization of `solve_by_elim`.
  Both `apply_assumption` and `apply_rules` are implemented via these hooks.

syntax "sorry"... [Lean.Parser.Tactic.tacticSorry]
  The `sorry` tactic closes the goal using `sorryAx`. This is intended for stubbing out incomplete
  parts of a proof while still having a syntactically correct proof skeleton. Lean will give
  a warning whenever a proof uses `sorry`, so you aren't likely to miss it, but
  you can double check if a theorem depends on `sorry` by using
  `#print axioms my_thm` and looking for `sorryAx` in the axiom list.

syntax "specialize"... [Lean.Parser.Tactic.specialize]
  The tactic `specialize h a₁ ... aₙ` works on local hypothesis `h`.
  The premises of this hypothesis, either universal quantifications or
  non-dependent implications, are instantiated by concrete terms coming
  from arguments `a₁` ... `aₙ`.
  The tactic adds a new hypothesis with the same name `h := h a₁ ... aₙ`
  and tries to clear the previous one.

syntax "split"... [Lean.Parser.Tactic.split]
  The `split` tactic is useful for breaking nested if-then-else and `match` expressions into separate cases.
  For a `match` expression with `n` cases, the `split` tactic generates at most `n` subgoals.
  
  For example, given `n : Nat`, and a target `if n = 0 then Q else R`, `split` will generate
  one goal with hypothesis `n = 0` and target `Q`, and a second goal with hypothesis
  `¬n = 0` and target `R`.  Note that the introduced hypothesis is unnamed, and is commonly
  renamed used the `case` or `next` tactics.
  
  - `split` will split the goal (target).
  - `split at h` will split the hypothesis `h`.

syntax "split_ands"... [Std.Tactic.tacticSplit_ands]
  `split_ands` applies `And.intro` until it does not make progress.

syntax "split_ifs"... [Mathlib.Tactic.splitIfs]
  Splits all if-then-else-expressions into multiple goals.
  Given a goal of the form `g (if p then x else y)`, `split_ifs` will produce
  two goals: `p ⊢ g x` and `¬p ⊢ g y`.
  If there are multiple ite-expressions, then `split_ifs` will split them all,
  starting with a top-most one whose condition does not contain another
  ite-expression.
  `split_ifs at *` splits all ite-expressions in all hypotheses as well as the goal.
  `split_ifs with h₁ h₂ h₃` overrides the default names for the hypotheses.

syntax "squeeze_scope"... [Std.Tactic.squeezeScope]
  The `squeeze_scope` tactic allows aggregating multiple calls to `simp` coming from the same syntax
  but in different branches of execution, such as in `cases x <;> simp`.
  The reported `simp` call covers all simp lemmas used by this syntax.
  ```
  @[simp] def bar (z : Nat) := 1 + z
  @[simp] def baz (z : Nat) := 1 + z
  
  @[simp] def foo : Nat → Nat → Nat
    | 0, z => bar z
    | _+1, z => baz z
  
  example : foo x y = 1 + y := by
    cases x <;> simp? -- two printouts:
    -- "Try this: simp only [foo, bar]"
    -- "Try this: simp only [foo, baz]"
  
  example : foo x y = 1 + y := by
    squeeze_scope
      cases x <;> simp -- only one printout: "Try this: simp only [foo, baz, bar]"
  ```

syntax "stop"... [Lean.Parser.Tactic.tacticStop_]
  `stop` is a helper tactic for "discarding" the rest of a proof:
  it is defined as `repeat sorry`.
  It is useful when working on the middle of a complex proofs,
  and less messy than commenting the remainder of the proof.

syntax "subst"... [Lean.Parser.Tactic.subst]
  `subst x...` substitutes each `x` with `e` in the goal if there is a hypothesis
  of type `x = e` or `e = x`.
  If `x` is itself a hypothesis of type `y = e` or `e = y`, `y` is substituted instead.

syntax "subst_eqs"... [Lean.Parser.Tactic.substEqs]
  `subst_eq` repeatedly substitutes according to the equality proof hypotheses in the context,
  replacing the left side of the equality with the right, until no more progress can be made.

syntax "subst_vars"... [Lean.Parser.Tactic.substVars]
  Applies `subst` to all hypotheses of the form `h : x = t` or `h : t = x`.

syntax "substs"... [Mathlib.Tactic.Substs.substs]
  Applies the `subst` tactic to all given hypotheses from left to right.

syntax "success_if_fail_with_msg"... [Mathlib.Tactic.successIfFailWithMsg]
  `success_if_fail_with_msg msg tacs` runs `tacs` and succeeds only if they fail with the message
  `msg`.
  
  `msg` can be any term that evaluates to an explicit `String`.

syntax "suffices"... [Lean.Parser.Tactic.tacticSuffices_]
  Given a main goal `ctx ⊢ t`, `suffices h : t' from e` replaces the main goal with `ctx ⊢ t'`,
  `e` must have type `t` in the context `ctx, h : t'`.
  
  The variant `suffices h : t' by tac` is a shorthand for `suffices h : t' from by tac`.
  If `h :` is omitted, the name `this` is used.

syntax "suffices"... [Mathlib.Tactic.tacticSuffices_]

syntax "swap"... [Std.Tactic.tacticSwap]
  `swap` is a shortcut for `pick_goal 2`, which interchanges the 1st and 2nd goals.

syntax "swap_var"... [Mathlib.Tactic.«tacticSwap_var__,,»]
  `swap_var swap_rule₁, swap_rule₂, ⋯` applies `swap_rule₁` then `swap_rule₂` then `⋯`.
  
  A *swap_rule* is of the form `x y` or `x ↔ y`, and "applying it" means swapping the variable name
  `x` by `y` and vice-versa on all hypotheses and the goal.
  
  ```lean
  example {P Q : Prop} (q : P) (p : Q) : P ∧ Q := by
    swap_var p ↔ q
    exact ⟨p, q⟩
  ```

syntax "symm"... [Lean.Parser.Tactic.symm]
  * `symm` applies to a goal whose target has the form `t ~ u` where `~` is a symmetric relation,
    that is, a relation which has a symmetry lemma tagged with the attribute [symm].
    It replaces the target with `u ~ t`.
  * `symm at h` will rewrite a hypothesis `h : t ~ u` to `h : u ~ t`.

syntax "symm_saturate"... [Lean.Parser.Tactic.symmSaturate]
  For every hypothesis `h : a ~ b` where a `@[symm]` lemma is available,
  add a hypothesis `h_symm : b ~ a`.

syntax "tauto"... [Mathlib.Tactic.Tauto.tauto]
  `tauto` breaks down assumptions of the form `_ ∧ _`, `_ ∨ _`, `_ ↔ _` and `∃ _, _`
  and splits a goal of the form `_ ∧ _`, `_ ↔ _` or `∃ _, _` until it can be discharged
  using `reflexivity` or `solve_by_elim`.
  This is a finishing tactic: it either closes the goal or raises an error.
  
  The Lean 3 version of this tactic by default attempted to avoid classical reasoning
  where possible. This Lean 4 version makes no such attempt. The `itauto` tactic
  is designed for that purpose.

syntax "tfae_finish"... [Mathlib.Tactic.TFAE.tfaeFinish]
  `tfae_finish` is used to close goals of the form `TFAE [P₁, P₂, ...]` once a sufficient collection
  of hypotheses of the form `Pᵢ → Pⱼ` or `Pᵢ ↔ Pⱼ` have been introduced to the local context.
  
  `tfae_have` can be used to conveniently introduce these hypotheses; see `tfae_have`.
  
  Example:
  ```lean
  example : TFAE [P, Q, R] := by
    tfae_have 1 → 2
    · /- proof of P → Q -/
    tfae_have 2 → 1
    · /- proof of Q → P -/
    tfae_have 2 ↔ 3
    · /- proof of Q ↔ R -/
    tfae_finish
  ```

syntax "tfae_have"... [Mathlib.Tactic.TFAE.tfaeHave]
  `tfae_have` introduces hypotheses for proving goals of the form `TFAE [P₁, P₂, ...]`. Specifically,
  `tfae_have i arrow j` introduces a hypothesis of type `Pᵢ arrow Pⱼ` to the local context,
  where `arrow` can be `→`, `←`, or `↔`. Note that `i` and `j` are natural number indices (beginning
  at 1) used to specify the propositions `P₁, P₂, ...` that appear in the `TFAE` goal list. A proof
  is required afterward, typically via a tactic block.
  
  ```lean
  example (h : P → R) : TFAE [P, Q, R] := by
    tfae_have 1 → 3
    · exact h
    ...
  ```
  The resulting context now includes `tfae_1_to_3 : P → R`.
  
  The introduced hypothesis can be given a custom name, in analogy to `have` syntax:
  ```lean
  tfae_have h : 2 ↔ 3
  ```
  
  Once sufficient hypotheses have been introduced by `tfae_have`, `tfae_finish` can be used to close
  the goal.
  
  ```lean
  example : TFAE [P, Q, R] := by
    tfae_have 1 → 2
    · /- proof of P → Q -/
    tfae_have 2 → 1
    · /- proof of Q → P -/
    tfae_have 2 ↔ 3
    · /- proof of Q ↔ R -/
    tfae_finish
  ```

syntax "trace"... [Lean.Parser.Tactic.trace]
  Evaluates a term to a string (when possible), and prints it as a trace message.

syntax "trace"... [Lean.Parser.Tactic.traceMessage]
  `trace msg` displays `msg` in the info view.

syntax "trace_state"... [Lean.Parser.Tactic.traceState]
  `trace_state` displays the current state in the info view.

syntax "trans"... [Mathlib.Tactic.tacticTrans___]
  `trans` applies to a goal whose target has the form `t ~ u` where `~` is a transitive relation,
  that is, a relation which has a transitivity lemma tagged with the attribute [trans].
  
  * `trans s` replaces the goal with the two subgoals `t ~ s` and `s ~ u`.
  * If `s` is omitted, then a metavariable is used instead.

syntax "transitivity"... [Mathlib.Tactic.tacticTransitivity___]

syntax "triv"... [Std.Tactic.triv]
  Deprecated variant of `trivial`.

syntax "trivial"... [Lean.Parser.Tactic.tacticTrivial]
  `trivial` tries different simple tactics (e.g., `rfl`, `contradiction`, ...)
  to close the current goal.
  You can use the command `macro_rules` to extend the set of tactics used. Example:
  ```
  macro_rules | `(tactic| trivial) => `(tactic| simp)
  ```

syntax "try"... [Lean.Parser.Tactic.tacticTry_]
  `try tac` runs `tac` and succeeds even if `tac` failed.

syntax "try_this"... [Mathlib.Tactic.tacticTry_this_]
  Produces the text `Try this: <tac>` with the given tactic, and then executes it.

syntax "type_check"... [tacticType_check_]
  Type check the given expression, and trace its type.

syntax "unfold"... [Lean.Parser.Tactic.unfold]
  * `unfold id` unfolds definition `id`.
  * `unfold id1 id2 ...` is equivalent to `unfold id1; unfold id2; ...`.
  
  For non-recursive definitions, this tactic is identical to `delta`.
  For definitions by pattern matching, it uses "equation lemmas" which are
  autogenerated for each match arm.

syntax "unfold_let"... [Mathlib.Tactic.unfoldLetStx]
  `unfold_let x y z at loc` unfolds the local definitions `x`, `y`, and `z` at the given
  location, which is known as "zeta reduction."
  This also exists as a `conv`-mode tactic.
  
  If no local definitions are given, then all local definitions are unfolded.
  This variant also exists as the `conv`-mode tactic `zeta`.
  
  This is similar to the `unfold` tactic, which instead is for unfolding global definitions.

syntax "unfold_projs"... [Mathlib.Tactic.unfoldProjsStx]
  `unfold_projs at loc` unfolds projections of class instances at the given location.
  This also exists as a `conv`-mode tactic.

syntax "unhygienic"... [Lean.Parser.Tactic.tacticUnhygienic_]
  `unhygienic tacs` runs `tacs` with name hygiene disabled.
  This means that tactics that would normally create inaccessible names will instead
  make regular variables. **Warning**: Tactics may change their variable naming
  strategies at any time, so code that depends on autogenerated names is brittle.
  Users should try not to use `unhygienic` if possible.
  ```
  example : ∀ x : Nat, x = x := by unhygienic
    intro            -- x would normally be intro'd as inaccessible
    exact Eq.refl x  -- refer to x
  ```

syntax "unit_interval"... [Tactic.Interactive.tacticUnit_interval]
  A tactic that solves `0 ≤ ↑x`, `0 ≤ 1 - ↑x`, `↑x ≤ 1`, and `1 - ↑x ≤ 1` for `x : I`.

syntax "unreachable!"... [Std.Tactic.unreachable]
  This tactic causes a panic when run (at compile time).
  (This is distinct from `exact unreachable!`, which inserts code which will panic at run time.)
  
  It is intended for tests to assert that a tactic will never be executed, which is otherwise an
  unusual thing to do (and the `unreachableTactic` linter will give a warning if you do).
  
  The `unreachableTactic` linter has a special exception for uses of `unreachable!`.
  ```
  example : True := by trivial <;> unreachable!
  ```

syntax "use"... [Mathlib.Tactic.useSyntax]
  `use e₁, e₂, ⋯` is similar to `exists`, but unlike `exists` it is equivalent to applying the tactic
  `refine ⟨e₁, e₂, ⋯, ?_, ⋯, ?_⟩` with any number of placeholders (rather than just one) and
  then trying to close goals associated to the placeholders with a configurable discharger (rather
  than just `try trivial`).
  
  Examples:
  
  ```lean
  example : ∃ x : Nat, x = x := by use 42
  
  example : ∃ x : Nat, ∃ y : Nat, x = y := by use 42, 42
  
  example : ∃ x : String × String, x.1 = x.2 := by use ("forty-two", "forty-two")
  ```
  
  `use! e₁, e₂, ⋯` is similar but it applies constructors everywhere rather than just for
  goals that correspond to the last argument of a constructor. This gives the effect that
  nested constructors are being flattened out, with the supplied values being used along the
  leaves and nodes of the tree of constructors.
  With `use!` one can feed in each `42` one at a time:
  
  ```lean
  example : ∃ p : Nat × Nat, p.1 = p.2 := by use! 42, 42
  
  example : ∃ p : Nat × Nat, p.1 = p.2 := by use! (42, 42)
  ```
  
  The second line makes use of the fact that `use!` tries refining with the argument before
  applying a constructor. Also note that `use`/`use!` by default uses a tactic
  called `use_discharger` to discharge goals, so `use! 42` will close the goal in this example since
  `use_discharger` applies `rfl`, which as a consequence solves for the other `Nat` metavariable.
  
  These tactics take an optional discharger to handle remaining explicit `Prop` constructor arguments.
  By default it is `use (discharger := try with_reducible use_discharger) e₁, e₂, ⋯`.
  To turn off the discharger and keep all goals, use `(discharger := skip)`.
  To allow "heavy refls", use `(discharger := try use_discharger)`.

syntax "use!"... [Mathlib.Tactic.«tacticUse!___,,»]
  `use e₁, e₂, ⋯` is similar to `exists`, but unlike `exists` it is equivalent to applying the tactic
  `refine ⟨e₁, e₂, ⋯, ?_, ⋯, ?_⟩` with any number of placeholders (rather than just one) and
  then trying to close goals associated to the placeholders with a configurable discharger (rather
  than just `try trivial`).
  
  Examples:
  
  ```lean
  example : ∃ x : Nat, x = x := by use 42
  
  example : ∃ x : Nat, ∃ y : Nat, x = y := by use 42, 42
  
  example : ∃ x : String × String, x.1 = x.2 := by use ("forty-two", "forty-two")
  ```
  
  `use! e₁, e₂, ⋯` is similar but it applies constructors everywhere rather than just for
  goals that correspond to the last argument of a constructor. This gives the effect that
  nested constructors are being flattened out, with the supplied values being used along the
  leaves and nodes of the tree of constructors.
  With `use!` one can feed in each `42` one at a time:
  
  ```lean
  example : ∃ p : Nat × Nat, p.1 = p.2 := by use! 42, 42
  
  example : ∃ p : Nat × Nat, p.1 = p.2 := by use! (42, 42)
  ```
  
  The second line makes use of the fact that `use!` tries refining with the argument before
  applying a constructor. Also note that `use`/`use!` by default uses a tactic
  called `use_discharger` to discharge goals, so `use! 42` will close the goal in this example since
  `use_discharger` applies `rfl`, which as a consequence solves for the other `Nat` metavariable.
  
  These tactics take an optional discharger to handle remaining explicit `Prop` constructor arguments.
  By default it is `use (discharger := try with_reducible use_discharger) e₁, e₂, ⋯`.
  To turn off the discharger and keep all goals, use `(discharger := skip)`.
  To allow "heavy refls", use `(discharger := try use_discharger)`.

syntax "use_discharger"... [Mathlib.Tactic.tacticUse_discharger]
  Default discharger to try to use for the `use` and `use!` tactics.
  This is similar to the `trivial` tactic but doesn't do things like `contradiction` or `decide`.

syntax "use_finite_instance"... [tacticUse_finite_instance]

syntax "volume_tac"... [MeasureTheory.tacticVolume_tac]
  The tactic `exact volume`, to be used in optional (`autoParam`) arguments.

syntax "whisker_simps"... [Mathlib.Tactic.BicategoryCoherence.whisker_simps]
  Simp lemmas for rewriting a 2-morphism into a normal form.

syntax "whnf"... [Mathlib.Tactic.tacticWhnf__]
  `whnf at loc` puts the given location into weak-head normal form.
  This also exists as a `conv`-mode tactic.
  
  Weak-head normal form is when the outer-most expression has been fully reduced, the expression
  may contain subexpressions which have not been reduced.

syntax "with_reducible"... [Lean.Parser.Tactic.withReducible]
  `with_reducible tacs` executes `tacs` using the reducible transparency setting.
  In this setting only definitions tagged as `[reducible]` are unfolded.

syntax "with_reducible_and_instances"... [Lean.Parser.Tactic.withReducibleAndInstances]
  `with_reducible_and_instances tacs` executes `tacs` using the `.instances` transparency setting.
  In this setting only definitions tagged as `[reducible]` or type class instances are unfolded.

syntax "with_unfolding_all"... [Lean.Parser.Tactic.withUnfoldingAll]
  `with_unfolding_all tacs` executes `tacs` using the `.all` transparency setting.
  In this setting all definitions that are not opaque are unfolded.

syntax "wlog"... [Mathlib.Tactic.wlog]
  `wlog h : P` will add an assumption `h : P` to the main goal, and add a side goal that requires
  showing that the case `h : ¬ P` can be reduced to the case where `P` holds (typically by symmetry).
  
  The side goal will be at the top of the stack. In this side goal, there will be two additional
  assumptions:
  - `h : ¬ P`: the assumption that `P` does not hold
  - `this`: which is the statement that in the old context `P` suffices to prove the goal.
    By default, the name `this` is used, but the idiom `with H` can be added to specify the name:
    `wlog h : P with H`.
  
  Typically, it is useful to use the variant `wlog h : P generalizing x y`,
  to revert certain parts of the context before creating the new goal.
  In this way, the wlog-claim `this` can be applied to `x` and `y` in different orders
  (exploiting symmetry, which is the typical use case).
  
  By default, the entire context is reverted.

syntax "zify"... [Mathlib.Tactic.Zify.zify]
  The `zify` tactic is used to shift propositions from `Nat` to `Int`.
  This is often useful since `Int` has well-behaved subtraction.
  ```
  example (a b c x y z : Nat) (h : ¬ x*y*z < 0) : c < a + 3*b := by
    zify
    zify at h
    /-
    h : ¬↑x * ↑y * ↑z < 0
    ⊢ ↑c < ↑a + 3 * ↑b
    -/
  ```
  `zify` can be given extra lemmas to use in simplification. This is especially useful in the
  presence of nat subtraction: passing `≤` arguments will allow `push_cast` to do more work.
  ```
  example (a b c : Nat) (h : a - b < c) (hab : b ≤ a) : false := by
    zify [hab] at h
    /- h : ↑a - ↑b < ↑c -/
  ```
  `zify` makes use of the `@[zify_simps]` attribute to move propositions,
  and the `push_cast` tactic to simplify the `Int`-valued expressions.
  `zify` is in some sense dual to the `lift` tactic.
  `lift (z : Int) to Nat` will change the type of an
  integer `z` (in the supertype) to `Nat` (the subtype), given a proof that `z ≥ 0`;
  propositions concerning `z` will still be over `Int`.
  `zify` changes propositions about `Nat` (the subtype) to propositions about `Int` (the supertype),
  without changing the type of any variable.

syntax ... [Lean.Parser.Tactic.decide]
  `decide` attempts to prove the main goal (with target type `p`) by synthesizing an instance of `Decidable p`
  and then reducing that instance to evaluate the truth value of `p`.
  If it reduces to `isTrue h`, then `h` is a proof of `p` that closes the goal.
  
  Limitations:
  - The target is not allowed to contain local variables or metavariables.
    If there are local variables, you can try first using the `revert` tactic with these local variables
    to move them into the target, which may allow `decide` to succeed.
  - Because this uses kernel reduction to evaluate the term, `Decidable` instances defined
    by well-founded recursion might not work, because evaluating them requires reducing proofs.
    The kernel can also get stuck reducing `Decidable` instances with `Eq.rec` terms for rewriting propositions.
    These can appear for instances defined using tactics (such as `rw` and `simp`).
    To avoid this, use definitions such as `decidable_of_iff` instead.
  
  ## Examples
  
  Proving inequalities:
  ```lean
  example : 2 + 2 ≠ 5 := by decide
  ```
  
  Trying to prove a false proposition:
  ```lean
  example : 1 ≠ 1 := by decide
  /-
  tactic 'decide' proved that the proposition
    1 ≠ 1
  is false
  -/
  ```
  
  Trying to prove a proposition whose `Decidable` instance fails to reduce
  ```lean
  opaque unknownProp : Prop
  
  open scoped Classical in
  example : unknownProp := by decide
  /-
  tactic 'decide' failed for proposition
    unknownProp
  since its 'Decidable' instance reduced to
    Classical.choice ⋯
  rather than to the 'isTrue' constructor.
  -/
  ```
  
  ## Properties and relations
  
  For equality goals for types with decidable equality, usually `rfl` can be used in place of `decide`.
  ```lean
  example : 1 + 1 = 2 := by decide
  example : 1 + 1 = 2 := by rfl
  ```

syntax ... [Lean.Parser.Tactic.introMatch]
  The tactic
  ```
  intro
  | pat1 => tac1
  | pat2 => tac2
  ```
  is the same as:
  ```
  intro x
  match x with
  | pat1 => tac1
  | pat2 => tac2
  ```
  That is, `intro` can be followed by match arms and it introduces the values while
  doing a pattern match. This is equivalent to `fun` with match arms in term mode.

syntax ... [Lean.Parser.Tactic.match]
  `match` performs case analysis on one or more expressions.
  See [Induction and Recursion][tpil4].
  The syntax for the `match` tactic is the same as term-mode `match`, except that
  the match arms are tactics instead of expressions.
  ```
  example (n : Nat) : n = n := by
    match n with
    | 0 => rfl
    | i+1 => simp
  ```
  
  [tpil4]: https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html

syntax ... [Lean.Parser.Tactic.nativeDecide]
  `native_decide` will attempt to prove a goal of type `p` by synthesizing an instance
  of `Decidable p` and then evaluating it to `isTrue ..`. Unlike `decide`, this
  uses `#eval` to evaluate the decidability instance.
  
  This should be used with care because it adds the entire lean compiler to the trusted
  part, and the axiom `ofReduceBool` will show up in `#print axioms` for theorems using
  this method or anything that transitively depends on them. Nevertheless, because it is
  compiled, this can be significantly more efficient than using `decide`, and for very
  large computations this is one way to run external programs and trust the result.
  ```
  example : (List.range 1000).length = 1000 := by native_decide
  ```

syntax ... [Lean.Parser.Tactic.nestedTactic]

syntax ... [Lean.Parser.Tactic.open]
  `open Foo in tacs` (the tactic) acts like `open Foo` at command level,
  but it opens a namespace only within the tactics `tacs`.

syntax ... [Lean.Parser.Tactic.set_option]
  `set_option opt val in tacs` (the tactic) acts like `set_option opt val` at the command level,
  but it sets the option only within the tactics `tacs`.

syntax ... [Lean.Parser.Tactic.tacDepIfThenElse]
  In tactic mode, `if h : t then tac1 else tac2` can be used as alternative syntax for:
  ```
  by_cases h : t
  · tac1
  · tac2
  ```
  It performs case distinction on `h : t` or `h : ¬t` and `tac1` and `tac2` are the subproofs.
  
  You can use `?_` or `_` for either subproof to delay the goal to after the tactic, but
  if a tactic sequence is provided for `tac1` or `tac2` then it will require the goal to be closed
  by the end of the block.

syntax ... [Lean.Parser.Tactic.tacIfThenElse]
  In tactic mode, `if t then tac1 else tac2` is alternative syntax for:
  ```
  by_cases t
  · tac1
  · tac2
  ```
  It performs case distinction on `h† : t` or `h† : ¬t`, where `h†` is an anonymous
  hypothesis, and `tac1` and `tac2` are the subproofs. (It doesn't actually use
  nondependent `if`, since this wouldn't add anything to the context and hence would be
  useless for proving theorems. To actually insert an `ite` application use
  `refine if t then ?_ else ?_`.)

syntax ... [Lean.Parser.Tactic.«tactic_<;>_»]
  `tac <;> tac'` runs `tac` on the main goal and `tac'` on each produced goal,
  concatenating all goals produced by `tac'`.

syntax ... [Lean.Parser.Tactic.unknown]

syntax ... [Mathlib.Tactic.Says.says]
  If you write `X says`, where `X` is a tactic that produces a "Try this: Y" message,
  then you will get a message "Try this: X says Y".
  Once you've clicked to replace `X says` with `X says Y`,
  afterwards `X says Y` will only run `Y`.
  
  The typical usage case is:
  ```
  simp? [X] says simp only [X, Y, Z]
  ```
  
  If you use `set_option says.verify true` (set automatically during CI) then `X says Y`
  runs `X` and verifies that it still prints "Try this: Y".

syntax ... [Std.Tactic.seq_focus]
  `t <;> [t1; t2; ...; tn]` focuses on the first goal and applies `t`, which should result in `n`
  subgoals. It then applies each `ti` to the corresponding goal and collects the resulting
  subgoals.  syntax ... [cdot] `· tac` focuses on the main goal and tries to solve it using `tac`, or else fails.
info: ././././Examples/Command/Help.lean:21:0-21:10: [aesop]: Register a declaration as an Aesop rule.

[aesop_CategoryTheory]: simp theorems in the Aesop rule set 'CategoryTheory'

[aesop_CategoryTheory_proc]: simprocs in the Aesop rule set 'CategoryTheory'

[aesop_Continuous]: simp theorems in the Aesop rule set 'Continuous'

[aesop_Continuous_proc]: simprocs in the Aesop rule set 'Continuous'

[aesop_IsMultiplicative]: simp theorems in the Aesop rule set 'IsMultiplicative'

[aesop_IsMultiplicative_proc]: simprocs in the Aesop rule set 'IsMultiplicative'

[aesop_Measurable]: simp theorems in the Aesop rule set 'Measurable'

[aesop_Measurable_proc]: simprocs in the Aesop rule set 'Measurable'

[aesop_SetLike]: simp theorems in the Aesop rule set 'SetLike'

[aesop_SetLike_proc]: simprocs in the Aesop rule set 'SetLike'

[aesop_builtin]: simp theorems in the Aesop rule set 'builtin'

[aesop_builtin_proc]: simprocs in the Aesop rule set 'builtin'

[aesop_default]: simp theorems in the Aesop rule set 'default'

[aesop_default_proc]: simprocs in the Aesop rule set 'default'

[aesop_finsetNonempty]: simp theorems in the Aesop rule set 'finsetNonempty'

[aesop_finsetNonempty_proc]: simprocs in the Aesop rule set 'finsetNonempty'

[always_inline]: mark definition to be always inlined

[app_unexpander]: Register an unexpander for applications of a given constant.
  
  [app_unexpander c] registers a `Lean.PrettyPrinter.Unexpander` for applications of the constant `c`. The unexpander is
  passed the result of pre-pretty printing the application *without* implicitly passed arguments. If `pp.explicit` is set
  to true or `pp.notation` is set to false, it will not be called at all.

[attr_parser]: parser

[binport]: this definition was autogenerated by mathport
  The `@[binport]` attribute should not be added manually, it is added automatically by mathport
  to definitions that it created based on a lean 3 definition (as opposed to pre-existing
  definitions).

[builtin_attr_parser]: Builtin parser

[builtin_category_parenthesizer]: (builtin) Register a parenthesizer for a syntax category.
  
    [category_parenthesizer cat] registers a declaration of type `Lean.PrettyPrinter.CategoryParenthesizer` for the category `cat`,
    which is used when parenthesizing calls of `categoryParser cat prec`. Implementations should call `maybeParenthesize`
    with the precedence and `cat`. If no category parenthesizer is registered, the category will never be parenthesized,
    but still be traversed for parenthesizing nested categories.

[builtin_code_action_provider]: (builtin) Use to decorate methods for suggesting code actions. This is a low-level interface for making code actions.

[builtin_command_code_action]: Declare a new builtin command code action, to appear in the code actions on commands

[builtin_command_elab]: (builtin) command elaborator

[builtin_command_parser]: Builtin parser

[builtin_delab]: (builtin) Register a delaborator.
  
    [delab k] registers a declaration of type `Lean.PrettyPrinter.Delaborator.Delab` for the `Lean.Expr`
    constructor `k`. Multiple delaborators for a single constructor are tried in turn until
    the first success. If the term to be delaborated is an application of a constant `c`,
    elaborators for `app.c` are tried first; this is also done for `Expr.const`s ("nullary applications")
    to reduce special casing. If the term is an `Expr.mdata` with a single key `k`, `mdata.k`
    is tried first.

[builtin_doElem_parser]: Builtin parser

[builtin_doc]: make the docs and location of this declaration available as a builtin

[builtin_formatter]: (builtin) Register a formatter for a parser.
  
    [formatter k] registers a declaration of type `Lean.PrettyPrinter.Formatter` for the `SyntaxNodeKind` `k`.

[builtin_init]: initialization procedure for global references

[builtin_level_parser]: Builtin parser

[builtin_macro]: (builtin) macro elaborator

[builtin_missing_docs_handler]: (builtin) adds a syntax traversal for the missing docs linter

[builtin_parenthesizer]: (builtin) Register a parenthesizer for a parser.
  
    [parenthesizer k] registers a declaration of type `Lean.PrettyPrinter.Parenthesizer` for the `SyntaxNodeKind` `k`.

[builtin_prec_parser]: Builtin parser

[builtin_prio_parser]: Builtin parser

[builtin_quot_precheck]: (builtin) Register a double backtick syntax quotation pre-check.
  
  [quot_precheck k] registers a declaration of type `Lean.Elab.Term.Quotation.Precheck` for the `SyntaxNodeKind` `k`.
  It should implement eager name analysis on the passed syntax by throwing an exception on unbound identifiers,
  and calling `precheck` recursively on nested terms, potentially with an extended local context (`withNewLocal`).
  Macros without registered precheck hook are unfolded, and identifier-less syntax is ultimately assumed to be well-formed.

[builtin_syntax_parser]: Builtin parser

[builtin_tactic]: (builtin) tactic elaborator

[builtin_tactic_parser]: Builtin parser

[builtin_term_elab]: (builtin) term elaborator

[builtin_term_parser]: Builtin parser

[builtin_unused_variables_ignore_fn]: (builtin) Marks a function of type `Lean.Linter.IgnoreFunction` for suppressing unused variable warnings
  Adds the `@[{builtin_}unused_variables_ignore_fn]` attribute, which is applied
  to declarations of type `IgnoreFunction` for use by the unused variables linter.

[builtin_widget_module]: (builtin) Registers a widget module. Its type must implement Lean.Widget.ToModule.
  Registers `[builtin_widget_module]` and `[widget_module]` and binds the latter's implementation
  (used for creating the obsolete `[widget]` alias below).

[bv_toNat]: simp lemmas converting `BitVec` goals to `Nat` goals, for the `bv_omega` preprocessor

[cases_eliminator]: custom `casesOn`-like eliminator for the `cases` tactic

[category_parenthesizer]: Register a parenthesizer for a syntax category.
  
    [category_parenthesizer cat] registers a declaration of type `Lean.PrettyPrinter.CategoryParenthesizer` for the category `cat`,
    which is used when parenthesizing calls of `categoryParser cat prec`. Implementations should call `maybeParenthesize`
    with the precedence and `cat`. If no category parenthesizer is registered, the category will never be parenthesized,
    but still be traversed for parenthesizing nested categories.

[class]: type class

[code_action_provider]: Use to decorate methods for suggesting code actions. This is a low-level interface for making code actions.

[coe]: Adds a definition as a coercion

[coe_decl]: auxiliary definition used to implement coercion (unfolded during elaboration)

[combinator_formatter]: Register a formatter for a parser combinator.
  
    [combinator_formatter c] registers a declaration of type `Lean.PrettyPrinter.Formatter` for the `Parser` declaration `c`.
    Note that, unlike with [formatter], this is not a node kind since combinators usually do not introduce their own node kinds.
    The tagged declaration may optionally accept parameters corresponding to (a prefix of) those of `c`, where `Parser` is replaced
    with `Formatter` in the parameter types.

[combinator_parenthesizer]: Register a parenthesizer for a parser combinator.
  
    [combinator_parenthesizer c] registers a declaration of type `Lean.PrettyPrinter.Parenthesizer` for the `Parser` declaration `c`.
    Note that, unlike with [parenthesizer], this is not a node kind since combinators usually do not introduce their own node kinds.
    The tagged declaration may optionally accept parameters corresponding to (a prefix of) those of `c`, where `Parser` is replaced
    with `Parenthesizer` in the parameter types.

[command_code_action]: Declare a new command code action, to appear in the code actions on commands

[command_elab]: command elaborator

[command_parser]: parser

[computed_field]: Marks a function as a computed field of an inductive

[congr]: congruence theorem

[cpass]: compiler passes for the code generator

[csimp]: simplification theorem for the compiler

[default_instance]: type class default instance

[delab]: Register a delaborator.
  
    [delab k] registers a declaration of type `Lean.PrettyPrinter.Delaborator.Delab` for the `Lean.Expr`
    constructor `k`. Multiple delaborators for a single constructor are tried in turn until
    the first success. If the term to be delaborated is an application of a constant `c`,
    elaborators for `app.c` are tried first; this is also done for `Expr.const`s ("nullary applications")
    to reduce special casing. If the term is an `Expr.mdata` with a single key `k`, `mdata.k`
    is tried first.

[deprecated]: mark declaration as deprecated

[doElem_parser]: parser

[dummy_label_attr]: A dummy label attribute, which can be used for testing. 

[elab_as_elim]: instructs elaborator that the arguments of the function application should be elaborated as were an eliminator

[elab_without_expected_type]: mark that applications of the given declaration should be elaborated without the expected type

[elementwise]: 

[eqns]: Overrides the equation lemmas for a declaration to the provided list
  Similar to `registerParametricAttribute` except that attributes do not
  have to be assigned in the same file as the declaration.

[export]: name to be used by code generators

[expr_presenter]: Register an Expr presenter. It must have the type `ProofWidgets.ExprPresenter`.

[ext]: Marks a theorem as an extensionality theorem

[extern]: builtin and foreign functions

[field_simps]: The simpset `field_simps` is used by the tactic `field_simp` to
  reduce an expression in a field to an expression of the form `n / d` where `n` and `d` are
  division-free. 

[field_simps_proc]: simproc set for field_simps_proc

[formatter]: Register a formatter for a parser.
  
    [formatter k] registers a declaration of type `Lean.PrettyPrinter.Formatter` for the `SyntaxNodeKind` `k`.

[fun_prop]: `funProp` tactic to prove function properties like `Continuous`, `Differentiable`, `IsLinearMap`
  Initialization of `funProp` attribute

[functor_norm]: Simp set for `functor_norm` 

[functor_norm_proc]: simproc set for functor_norm_proc

[gcongr]: generalized congruence
  Attribute marking "generalized congruence" (`gcongr`) lemmas.  Such lemmas must have a
  conclusion of a form such as `f x₁ y z₁ ∼ f x₂ y z₂`; that is, a relation between the application of
  a function to two argument lists, in which the "varying argument" pairs (here `x₁`/`x₂` and
  `z₁`/`z₂`) are all free variables.
  
  The antecedents of such a lemma are classified as generating "main goals" if they are of the form
  `x₁ ≈ x₂` for some "varying argument" pair `x₁`/`x₂` (and a possibly different relation `≈` to `∼`),
  or more generally of the form `∀ i h h' j h'', f₁ i j ≈ f₂ i j` (say) for some "varying argument"
  pair `f₁`/`f₂`. (Other antecedents are considered to generate "side goals".) The index of the
  "varying argument" pair corresponding to each "main" antecedent is recorded.

[gcongr_forward]: adds a gcongr_forward extension

[ghost_simps]: Simplification rules for ghost equations. 

[ghost_simps_proc]: simproc set for ghost_simps_proc

[higherOrder]: From a lemma of the shape `∀ x, f (g x) = h x` derive an auxiliary lemma of the
  form `f ∘ g = h` for reasoning about higher-order functions.
  
  Syntax: `[higher_order]` or `[higher_order name]`, where the given name is used for the
  generated theorem.
  The `higher_order` attribute. From a lemma of the shape `∀ x, f (g x) = h x` derive an
  auxiliary lemma of the form `f ∘ g = h` for reasoning about higher-order functions.
  
  Syntax: `[higher_order]` or `[higher_order name]` where the given name is used for the
  generated theorem.

[hole_code_action]: Declare a new hole code action, to appear in the code actions on ?_ and _

[implemented_by]: name of the Lean (probably unsafe) function that implements opaque constant

[induction_eliminator]: custom `rec`-like eliminator for the `induction` tactic

[inherit_doc]: inherit documentation from a specified declaration

[init]: initialization procedure for global references

[inline]: mark definition to be inlined

[inline_if_reduce]: mark definition to be inlined when resultant term after reduction is not a `cases_on` application

[instance]: type class instance

[integral_simps]: Simp set for integral rules. 

[integral_simps_proc]: simproc set for integral_simps_proc

[irreducible]: irreducible declaration

[is_poly]: A stub attribute for `is_poly`. 

[macro]: macro elaborator

[macro_inline]: mark definition to always be inlined before ANF conversion

[match_pattern]: mark that a definition can be used in a pattern (remark: the dependent pattern matching compiler will unfold the definition)

[mfld_simps]: The simpset `mfld_simps` records several simp lemmas that are
  especially useful in manifolds. It is a subset of the whole set of simp lemmas, but it makes it
  possible to have quicker proofs (when used with `squeeze_simp` or `simp only`) while retaining
  readability.
  
  The typical use case is the following, in a file on manifolds:
  If `simp [foo, bar]` is slow, replace it with `squeeze_simp [foo, bar, mfld_simps]` and paste
  its output. The list of lemmas should be reasonable (contrary to the output of
  `squeeze_simp [foo, bar]` which might contain tens of lemmas), and the outcome should be quick
  enough.
  

[mfld_simps_proc]: simproc set for mfld_simps_proc

[missing_docs_handler]: adds a syntax traversal for the missing docs linter

[mkIff]: Generate an `iff` lemma for an inductive `Prop`.

[monad_norm]: Simp set for `functor_norm` 

[monad_norm_proc]: simproc set for monad_norm_proc

[mono]: A lemma stating the monotonicity of some function, with respect to appropriate
  relations on its domain and range, and possibly with side conditions.

[multigoal]: this tactic acts on multiple goals
  The `multigoal` attribute keeps track of tactics that operate on multiple goals,
  meaning that `tac` acts differently from `focus tac`. This is used by the
  'unnecessary `<;>`' linter to prevent false positives where `tac <;> tac'` cannot
  be replaced by `(tac; tac')` because the latter would expose `tac` to a different set of goals.

[never_extract]: instruct the compiler that function applications using the tagged declaration should not be extracted when they are closed terms, nor common subexpression should be performed. This is useful for declarations that have implicit effects.

[noinline]: mark definition to never be inlined

[nolint]: Do not report this declaration in any of the tests of `#lint`
  Defines the user attribute `nolint` for skipping `#lint`

[nontriviality]: The `@[nontriviality]` simp set is used by the `nontriviality` tactic to automatically
  discharge theorems about the trivial case (where we know `Subsingleton α` and many theorems
  in e.g. groups are trivially true). 

[nontriviality_proc]: simproc set for nontriviality_proc

[norm_cast]: attribute for norm_cast

[norm_num]: adds a norm_num extension

[nospecialize]: mark definition to never be specialized

[notation_class]: An attribute specifying that this is a notation class. Used by @[simps].
  `@[notation_class]` attribute. Note: this is *not* a `NameMapAttribute` because we key on the
  argument of the attribute, not the declaration name.

[parenthesizer]: Register a parenthesizer for a parser.
  
    [parenthesizer k] registers a declaration of type `Lean.PrettyPrinter.Parenthesizer` for the `SyntaxNodeKind` `k`.

[parity_simps]: Simp attribute for lemmas about `Even` 

[parity_simps_proc]: simproc set for parity_simps_proc

[positivity]: adds a positivity extension

[ppDotAttr]: 

[ppWithUnivAttr]: 

[pp_nodot]: mark declaration to never be pretty printed using field notation

[pp_using_anonymous_constructor]: mark structure to be pretty printed using `⟨a,b,c⟩` notation

[prec_parser]: parser

[prio_parser]: parser

[push_cast]: The `push_cast` simp attribute uses `norm_cast` lemmas to move casts toward the leaf nodes of the expression.
  The `push_cast` simp attribute.

[qify_simps]: The simpset `qify_simps` is used by the tactic `qify` to move expressions from `ℕ` or `ℤ` to `ℚ`
  which gives a well-behaved division. 

[qify_simps_proc]: simproc set for qify_simps_proc

[quot_precheck]: Register a double backtick syntax quotation pre-check.
  
  [quot_precheck k] registers a declaration of type `Lean.Elab.Term.Quotation.Precheck` for the `SyntaxNodeKind` `k`.
  It should implement eager name analysis on the passed syntax by throwing an exception on unbound identifiers,
  and calling `precheck` recursively on nested terms, potentially with an extended local context (`withNewLocal`).
  Macros without registered precheck hook are unfolded, and identifier-less syntax is ultimately assumed to be well-formed.

[rclike_simps]: "Simp attribute for lemmas about `RCLike`" 

[rclike_simps_proc]: simproc set for rclike_simps_proc

[reassoc]: 

[recursor]: user defined recursor, numerical parameter specifies position of the major premise

[reduce_mod_char]: lemmas for preprocessing and cleanup in the `reduce_mod_char` tactic
  `@[reduce_mod_char]` is an attribute that tags lemmas for preprocessing and cleanup in the
  `reduce_mod_char` tactic

[reducible]: reducible declaration

[refl]: reflexivity relation

[rify_simps]: The simpset `rify_simps` is used by the tactic `rify` to move expressions from `ℕ`, `ℤ`, or
  `ℚ` to `ℝ`. 

[rify_simps_proc]: simproc set for rify_simps_proc

[run_builtin_parser_attribute_hooks]: explicitly run hooks normally activated by builtin parser attributes

[run_parser_attribute_hooks]: explicitly run hooks normally activated by parser attributes

[semireducible]: semireducible declaration

[server_rpc_method]: Marks a function as a Lean server RPC method.
      Shorthand for `registerRpcProcedure`.
      The function must have type `α → RequestM (RequestTask β)` with
      `[RpcEncodable α]` and `[RpcEncodable β]`.

[server_rpc_method_cancellable]: Like `server_rpc_method`, but requests for this method can be cancelled. The method should check for that using `IO.checkCanceled`. Cancellable methods are invoked differently from JavaScript: see `callCancellable` in `cancellable.ts`.

[seval]: symbolic evaluator theorem

[sevalprocAttr]: Symbolic evaluator procedure

[sevalprocBuiltinAttr]: Builtin symbolic evaluation procedure

[simp]: simplification theorem

[simprocAttr]: Simplification procedure

[simprocBuiltinAttr]: Builtin simplification procedure

[simps]: Automatically derive lemmas specifying the projections of this declaration.
  The `simps` attribute.

[specialize]: mark definition to always be specialized

[std_linter]: Use this declaration as a linting test in #lint

[stx_parser]: parser

[subst]: substitution

[symm]: symmetric relation

[tactic]: tactic elaborator

[tactic_code_action]: Declare a new tactic code action, to appear in the code actions on tactics

[tactic_parser]: parser

[term_elab]: term elaborator

[term_parser]: parser

[to_additive]: Transport multiplicative to additive
  The attribute `to_additive` can be used to automatically transport theorems
  and definitions (but not inductive types and structures) from a multiplicative
  theory to an additive theory.
  
  To use this attribute, just write:
  
  ```
  @[to_additive]
  theorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := mul_comm x y
  ```
  
  This code will generate a theorem named `add_comm'`. It is also
  possible to manually specify the name of the new declaration:
  
  ```
  @[to_additive add_foo]
  theorem foo := sorry
  ```
  
  An existing documentation string will _not_ be automatically used, so if the theorem or definition
  has a doc string, a doc string for the additive version should be passed explicitly to
  `to_additive`.
  
  ```
  /-- Multiplication is commutative -/
  @[to_additive "Addition is commutative"]
  theorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := CommSemigroup.mul_comm
  ```
  
  The transport tries to do the right thing in most cases using several
  heuristics described below.  However, in some cases it fails, and
  requires manual intervention.
  
  Use the `(reorder := ...)` syntax to reorder the arguments in the generated additive declaration.
  This is specified using cycle notation. For example `(reorder := 1 2, 5 6)` swaps the first two
  arguments with each other and the fifth and the sixth argument and `(reorder := 3 4 5)` will move
  the fifth argument before the third argument. This is mostly useful to translate declarations using
  `Pow` to those using `SMul`.
  
  Use the `(attr := ...)` syntax to apply attributes to both the multiplicative and the additive
  version:
  
  ```
  @[to_additive (attr := simp)] lemma mul_one' {G : Type*} [Group G] (x : G) : x * 1 = x := mul_one x
  ```
  
  For `simp` and `simps` this also ensures that some generated lemmas are added to the additive
  dictionary.
  `@[to_additive (attr := to_additive)]` is a special case, where the `to_additive`
  attribute is added to the generated lemma only, to additivize it again.
  This is useful for lemmas about `Pow` to generate both lemmas about `SMul` and `VAdd`. Example:
  ```
  @[to_additive (attr := to_additive VAdd_lemma, simp) SMul_lemma]
  lemma Pow_lemma ... :=
  ```
  In the above example, the `simp` is added to all 3 lemmas. All other options to `to_additive`
  (like the generated name or `(reorder := ...)`) are not passed down,
  and can be given manually to each individual `to_additive` call.
  
  ## Implementation notes
  
  The transport process generally works by taking all the names of
  identifiers appearing in the name, type, and body of a declaration and
  creating a new declaration by mapping those names to additive versions
  using a simple string-based dictionary and also using all declarations
  that have previously been labeled with `to_additive`.
  
  In the `mul_comm'` example above, `to_additive` maps:
  * `mul_comm'` to `add_comm'`,
  * `CommSemigroup` to `AddCommSemigroup`,
  * `x * y` to `x + y` and `y * x` to `y + x`, and
  * `CommSemigroup.mul_comm'` to `AddCommSemigroup.add_comm'`.
  
  ### Heuristics
  
  `to_additive` uses heuristics to determine whether a particular identifier has to be
  mapped to its additive version. The basic heuristic is
  
  * Only map an identifier to its additive version if its first argument doesn't
    contain any unapplied identifiers.
  
  Examples:
  * `@Mul.mul Nat n m` (i.e. `(n * m : Nat)`) will not change to `+`, since its
    first argument is `Nat`, an identifier not applied to any arguments.
  * `@Mul.mul (α × β) x y` will change to `+`. It's first argument contains only the identifier
    `Prod`, but this is applied to arguments, `α` and `β`.
  * `@Mul.mul (α × Int) x y` will not change to `+`, since its first argument contains `Int`.
  
  The reasoning behind the heuristic is that the first argument is the type which is "additivized",
  and this usually doesn't make sense if this is on a fixed type.
  
  There are some exceptions to this heuristic:
  
  * Identifiers that have the `@[to_additive]` attribute are ignored.
    For example, multiplication in `↥Semigroup` is replaced by addition in `↥AddSemigroup`.
  * If an identifier `d` has attribute `@[to_additive_relevant_arg n]` then the argument
    in position `n` is checked for a fixed type, instead of checking the first argument.
    `@[to_additive]` will automatically add the attribute `@[to_additive_relevant_arg n]` to a
    declaration when the first argument has no multiplicative type-class, but argument `n` does.
  * If an identifier has attribute `@[to_additive_ignore_args n1 n2 ...]` then all the arguments in
    positions `n1`, `n2`, ... will not be checked for unapplied identifiers (start counting from 1).
    For example, `ContMDiffMap` has attribute `@[to_additive_ignore_args 21]`, which means
    that its 21st argument `(n : WithTop ℕ)` can contain `ℕ`
    (usually in the form `Top.top ℕ ...`) and still be additivized.
    So `@Mul.mul (C^∞⟮I, N; I', G⟯) _ f g` will be additivized.
  
  ### Troubleshooting
  
  If `@[to_additive]` fails because the additive declaration raises a type mismatch, there are
  various things you can try.
  The first thing to do is to figure out what `@[to_additive]` did wrong by looking at the type
  mismatch error.
  
  * Option 1: The most common case is that it didn't additivize a declaration that should be
    additivized. This happened because the heuristic applied, and the first argument contains a
    fixed type, like `ℕ` or `ℝ`. However, the heuristic misfires on some other declarations.
    Solutions:
    * First figure out what the fixed type is in the first argument of the declaration that didn't
      get additivized. Note that this fixed type can occur in implicit arguments. If manually finding
      it is hard, you can run `set_option trace.to_additive_detail true` and search the output for the
      fragment "contains the fixed type" to find what the fixed type is.
    * If the fixed type has an additive counterpart (like `↥Semigroup`), give it the `@[to_additive]`
      attribute.
    * If the fixed type has nothing to do with algebraic operations (like `TopCat`), add the attribute
      `@[to_additive existing Foo]` to the fixed type `Foo`.
    * If the fixed type occurs inside the `k`-th argument of a declaration `d`, and the
      `k`-th argument is not connected to the multiplicative structure on `d`, consider adding
      attribute `[to_additive_ignore_args k]` to `d`.
      Example: `ContMDiffMap` ignores the argument `(n : WithTop ℕ)`
  * Option 2: It additivized a declaration `d` that should remain multiplicative. Solution:
    * Make sure the first argument of `d` is a type with a multiplicative structure. If not, can you
      reorder the (implicit) arguments of `d` so that the first argument becomes a type with a
      multiplicative structure (and not some indexing type)?
      The reason is that `@[to_additive]` doesn't additivize declarations if their first argument
      contains fixed types like `ℕ` or `ℝ`. See section Heuristics.
      If the first argument is not the argument with a multiplicative type-class, `@[to_additive]`
      should have automatically added the attribute `@[to_additive_relevant_arg]` to the declaration.
      You can test this by running the following (where `d` is the full name of the declaration):
      ```
        open Lean in run_cmd logInfo m!"{ToAdditive.relevantArgAttr.find? (← getEnv) `d}"
      ```
      The expected output is `n` where the `n`-th (0-indexed) argument of `d` is a type (family)
      with a multiplicative structure on it. `none` means `0`.
      If you get a different output (or a failure), you could add the attribute
      `@[to_additive_relevant_arg n]` manually, where `n` is an (1-indexed) argument with a
      multiplicative structure.
  * Option 3: Arguments / universe levels are incorrectly ordered in the additive version.
    This likely only happens when the multiplicative declaration involves `pow`/`^`. Solutions:
    * Ensure that the order of arguments of all relevant declarations are the same for the
      multiplicative and additive version. This might mean that arguments have an "unnatural" order
      (e.g. `Monoid.npow n x` corresponds to `x ^ n`, but it is convenient that `Monoid.npow` has this
      argument order, since it matches `AddMonoid.nsmul n x`.
    * If this is not possible, add `(reorder := ...)` argument to `to_additive`.
  
  If neither of these solutions work, and `to_additive` is unable to automatically generate the
  additive version of a declaration, manually write and prove the additive version.
  Often the proof of a lemma/theorem can just be the multiplicative version of the lemma applied to
  `multiplicative G`.
  Afterwards, apply the attribute manually:
  
  ```
  attribute [to_additive foo_add_bar] foo_bar
  ```
  
  This will allow future uses of `to_additive` to recognize that
  `foo_bar` should be replaced with `foo_add_bar`.
  
  ### Handling of hidden definitions
  
  Before transporting the “main” declaration `src`, `to_additive` first
  scans its type and value for names starting with `src`, and transports
  them. This includes auxiliary definitions like `src._match_1`,
  `src._proof_1`.
  
  In addition to transporting the “main” declaration, `to_additive` transports
  its equational lemmas and tags them as equational lemmas for the new declaration.
  
  ### Structure fields and constructors
  
  If `src` is a structure, then the additive version has to be already written manually.
  In this case `to_additive` adds all structure fields to its mapping.
  
  ### Name generation
  
  * If `@[to_additive]` is called without a `name` argument, then the
    new name is autogenerated.  First, it takes the longest prefix of
    the source name that is already known to `to_additive`, and replaces
    this prefix with its additive counterpart. Second, it takes the last
    part of the name (i.e., after the last dot), and replaces common
    name parts (“mul”, “one”, “inv”, “prod”) with their additive versions.
  
  * [todo] Namespaces can be transformed using `map_namespace`. For example:
    ```
    run_cmd to_additive.map_namespace `QuotientGroup `QuotientAddGroup
    ```
  
    Later uses of `to_additive` on declarations in the `QuotientGroup`
    namespace will be created in the `QuotientAddGroup` namespaces.
  
  * If `@[to_additive]` is called with a `name` argument `new_name`
    /without a dot/, then `to_additive` updates the prefix as described
    above, then replaces the last part of the name with `new_name`.
  
  * If `@[to_additive]` is called with a `name` argument
    `NewNamespace.new_name` /with a dot/, then `to_additive` uses this
    new name as is.
  
  As a safety check, in the first case `to_additive` double checks
  that the new name differs from the original one.

[to_additive_change_numeral]: Auxiliary attribute for `to_additive` that stores functions that have numerals as argument.
  Similar to `registerParametricAttribute` except that attributes do not
  have to be assigned in the same file as the declaration.

[to_additive_ignore_args]: Auxiliary attribute for `to_additive` stating that certain arguments are not additivized.
  Similar to `registerParametricAttribute` except that attributes do not
  have to be assigned in the same file as the declaration.

[to_additive_relevant_arg]: Auxiliary attribute for `to_additive` stating which arguments are the types with a multiplicative structure.
  Similar to `registerParametricAttribute` except that attributes do not
  have to be assigned in the same file as the declaration.

[to_additive_reorder]: Auxiliary attribute for `to_additive` that stores arguments that need to be reordered. This should not appear in any file. We keep it as an attribute for now so that mathport can still use it, and it can generate a warning.
  Similar to `registerParametricAttribute` except that attributes do not
  have to be assigned in the same file as the declaration.

[trans]: transitive relation

[typevec]: simp set for the manipulation of typevec and arrow expressions 

[typevec_proc]: simproc set for typevec_proc

[unbox]: compiler tries to unbox result values if their types are tagged with `[unbox]`

[unification_hint]: unification hint

[unused_variables_ignore_fn]: Marks a function of type `Lean.Linter.IgnoreFunction` for suppressing unused variable warnings
  Adds the `@[{builtin_}unused_variables_ignore_fn]` attribute, which is applied
  to declarations of type `IgnoreFunction` for use by the unused variables linter.

[variable_alias]: Attribute to record aliases for the `variable?` command.
  Attribute to record aliases for the `variable?` command. Aliases are structures that have no
  fields, and additional typeclasses are recorded as *arguments* to the structure.
  
  Example:
  ```
  @[variable_alias]
  structure VectorSpace (k V : Type*)
    [Field k] [AddCommGroup V] [Module k V]
  ```
  Then `variable? [VectorSpace k V]` ensures that these three typeclasses are present in
  the current scope. Notice that it's looking at the arguments to the `VectorSpace` type
  constructor. You should not have any fields in `variable_alias` structures.
  
  Notice that `VectorSpace` is not a class; the `variable?` command allows non-classes with the
  `variable_alias` attribute to use instance binders.

[widget]: The `@[widget]` attribute has been deprecated, use `@[widget_module]` instead.

[widget_module]: Registers a widget module. Its type must implement Lean.Widget.ToModule.
  Registers `[builtin_widget_module]` and `[widget_module]` and binds the latter's implementation
  (used for creating the obsolete `[widget]` alias below).

[zify_simps]: The simpset `zify_simps` is used by the tactic `zify` to move expressions from `ℕ` to `ℤ`
  which gives a well-behaved subtraction.   [zify_simps_proc]: simproc set for zify_simps_proc
info: ././././Examples/Command/Help.lean:24:0-24:13: syntax "#aesop_rules"... [Aesop.Frontend.Parser.«command#aesop_rules»]

syntax "#aesop_stats"... [Aesop.Frontend.Parser.«command#aesop_stats_»]

syntax "#align"... [Mathlib.Prelude.Rename.align]
  `#align lean_3.def_name Lean4.defName` will record an "alignment" from the lean 3 name
  to the corresponding lean 4 name. This information is used by the
  [mathport](https://github.com/leanprover-community/mathport) utility to translate later uses of
  the definition.
  
  If there is no alignment for a given definition, mathport will attempt to convert
  from the lean 3 `snake_case` style to `UpperCamelCase` for namespaces and types and
  `lowerCamelCase` for definitions, and `snake_case` for theorems. But for various reasons,
  it may fail either to determine whether it is a type, definition, or theorem, or to determine
  that a specific definition is in fact being called. Or a specific definition may need a different
  name altogether because the existing name is already taken in lean 4 for something else. For
  these reasons, you should use `#align` on any theorem that needs to be renamed from the default.

syntax "#align_import"... [Mathlib.Prelude.Rename.alignImport]
  Declare the corresponding mathlib3 module for the current mathlib4 module.

syntax "#check_simp"... [Lean.Parser.checkSimp]
  `#check_simp t ~> r` checks `simp` reduces `t` to `r`.

syntax "#check_simp"... [Std.Tactic.«command#check_simp_~>_»]
  `#check_simp t ~> r` checks `simp` reduces `t` to `r`.

syntax "#check_simp"... [Lean.Parser.checkSimpFailure]
  `#check_simp t !~>` checks `simp` fails on reducing `t`.

syntax "#check_simp"... [Std.Tactic.«command#check_simp_!~>»]
  `#check_simp t !~>` checks `simp` fails to reduce `t`.

syntax "#check_tactic"... [Lean.Parser.checkTactic]
  `#check_tactic t ~> r by commands` runs the tactic sequence `commands`
  on a goal with `t` and sees if the resulting expression has reduced it
  to `r`.

syntax "#check_tactic"... [Std.Tactic.«command#check_tactic_~>_By_»]
  `#check_tactic t ~> r by commands` runs the tactic sequence `commands`
  on a goal with t in the type and sees if the resulting expression has
  reduced it to `r`.

syntax "#check_tactic_failure"... [Lean.Parser.checkTacticFailure]
  `#check_tactic_failure t by tac` runs the tactic `tac`
  on a goal with `t` and verifies it fails.

syntax "#conv"... [Mathlib.Tactic.Conv.«command#conv_=>_»]
  The command `#conv tac => e` will run a conv tactic `tac` on `e`, and display the resulting
  expression (discarding the proof).
  For example, `#conv rw [true_and] => True ∧ False` displays `False`.
  There are also shorthand commands for several common conv tactics:
  
  * `#whnf e` is short for `#conv whnf => e`
  * `#simp e` is short for `#conv simp => e`
  * `#norm_num e` is short for `#conv norm_num => e`
  * `#push_neg e` is short for `#conv push_neg => e`

syntax "#explode"... [Mathlib.Explode.«command#explode_»]
  `#explode expr` displays a proof term in a line-by-line format somewhat akin to a Fitch-style
  proof or the Metamath proof style.
  
  For example, exploding the following theorem:
  
  ```lean
  #explode iff_of_true
  ```
  
  produces:
  
  ```lean
  iff_of_true : ∀ {a b : Prop}, a → b → (a ↔ b)
  
  0│         │ a         ├ Prop
  1│         │ b         ├ Prop
  2│         │ ha        ├ a
  3│         │ hb        ├ b
  4│         │ x✝        │ ┌ a
  5│4,3      │ ∀I        │ a → b
  6│         │ x✝        │ ┌ b
  7│6,2      │ ∀I        │ b → a
  8│5,7      │ Iff.intro │ a ↔ b
  9│0,1,2,3,8│ ∀I        │ ∀ {a b : Prop}, a → b → (a ↔ b)
  ```
  
  ## Overview
  
  The `#explode` command takes the body of the theorem and decomposes it into its parts,
  displaying each expression constructor one at a time. The constructor is indicated
  in some way in column 3, and its dependencies are recorded in column 2.
  
  These are the main constructor types:
  
    - Lambda expressions (`Expr.lam`). The expression `fun (h : p) => s` is displayed as
      ```lean
       0│    │ h   │ ┌ p
       1│**  │ **  │ │ q
       2│1,2 │ ∀I  │ ∀ (h : p), q
      ```
      with `**` a wildcard, and there can be intervening steps between 0 and 1.
      Nested lambda expressions can be merged, and `∀I` can depend on a whole list of arguments.
  
    - Applications (`Expr.app`). The expression `f a b c` is displayed as
       ```lean
       0│**      │ f  │ A → B → C → D
       1│**      │ a  │ A
       2│**      │ b  │ B
       3│**      │ c  │ C
       1│0,1,2,3 │ ∀E │ D
       ```
       There can be intervening steps between each of these.
       As a special case, if `f` is a constant it can be omitted and the display instead looks like
       ```lean
       0│**    │ a │ A
       1│**    │ b │ B
       2│**    │ c │ C
       3│1,2,3 │ f │ D
       ```
  
    - Let expressions (`Expr.letE`) do not display in any special way, but they do
      ensure that in `let x := v; b` that `v` is processed first and then `b`, rather
      than first doing zeta reduction. This keeps lambda merging and application merging
      from making proofs with `let` confusing to interpret.
  
    - Everything else (constants, fvars, etc.) display `x : X` as
      ```lean
      0│  │ x │ X
      ```
  
  ## In more detail
  
  The output of `#explode` is a Fitch-style proof in a four-column diagram modeled after Metamath
  proof displays like [this](http://us.metamath.org/mpeuni/ru.html). The headers of the columns are
  "Step", "Hyp", "Ref", "Type" (or "Expression" in the case of Metamath):
  * **Step**: An increasing sequence of numbers for each row in the proof, used in the Hyp fields.
  * **Hyp**: The direct children of the current step. These are step numbers for the subexpressions
    for this step's expression. For theorem applications, it's the theorem arguments, and for
    foralls it is all the bound variables and the conclusion.
  * **Ref**: The name of the theorem being applied. This is well-defined in Metamath, but in Lean
    there are some special steps that may have long names because the structure of proof terms doesn't
    exactly match this mold.
    * If the theorem is `foo (x y : Z) : A x -> B y -> C x y`:
      * the Ref field will contain `foo`,
      * `x` and `y` will be suppressed, because term construction is not interesting, and
      * the Hyp field will reference steps proving `A x` and `B y`. This corresponds to a proof term
        like `@foo x y pA pB` where `pA` and `pB` are subproofs.
      * In the Hyp column, suppressed terms are omitted, including terms that ought to be
        suppressed but are not (in particular lambda arguments).
        TODO: implement a configuration option to enable representing suppressed terms using
        an `_` rather than a step number.
    * If the head of the proof term is a local constant or lambda, then in this case the Ref will
      say `∀E` for forall-elimination. This happens when you have for example `h : A -> B` and
      `ha : A` and prove `b` by `h ha`; we reinterpret this as if it said `∀E h ha` where `∀E` is
      (n-ary) modus ponens.
    * If the proof term is a lambda, we will also use `∀I` for forall-introduction, referencing the
      body of the lambda. The indentation level will increase, and a bracket will surround the proof
      of the body of the lambda, starting at a proof step labeled with the name of the lambda variable
      and its type, and ending with the `∀I` step. Metamath doesn't have steps like this, but the
      style is based on Fitch proofs in first-order logic.
  * **Type**: This contains the type of the proof term, the theorem being proven at the current step.
  
  Also, it is common for a Lean theorem to begin with a sequence of lambdas introducing local
  constants of the theorem. In order to minimize the indentation level, the `∀I` steps at the end of
  the proof will be introduced in a group and the indentation will stay fixed. (The indentation
  brackets are only needed in order to delimit the scope of assumptions, and these assumptions
  have global scope anyway so detailed tracking is not necessary.)

syntax "#find"... [Mathlib.Tactic.Find.«command#find_»]

syntax "#find_home"... [«command#find_home!_»]
  Find locations as high as possible in the import hierarchy
  where the named declaration could live.
  Using `#find_home!` will forcefully remove the current file.
  Note that this works best if used in a file with `import Mathlib`.
  
  The current file could still be the only suggestion, even using `#find_home! lemma`.
  The reason is that `#find_home!` scans the import graph below the current file,
  selects all the files containing declarations appearing in `lemma`, excluding
  the current file itself and looks for all least upper bounds of such files.
  
  For a simple example, if `lemma` is in a file importing only `A.lean` and `B.lean` and
  uses one lemma from each, then `#find_home! lemma` returns the current file.

syntax "#guard"... [Lean.Parser.Command.guardCmd]
  Command to check that an expression evaluates to `true`.
  
  `#guard e` elaborates `e` ensuring its type is `Bool` then evaluates `e` and checks that
  the result is `true`. The term is elaborated *without* variables declared using `variable`, since
  these cannot be evaluated.
  
  Since this makes use of coercions, so long as a proposition `p` is decidable, one can write
  `#guard p` rather than `#guard decide p`. A consequence to this is that if there is decidable
  equality one can write `#guard a = b`. Note that this is not exactly the same as checking
  if `a` and `b` evaluate to the same thing since it uses the `DecidableEq` instance to do
  the evaluation.
  
  Note: this uses the untrusted evaluator, so `#guard` passing is *not* a proof that the
  expression equals `true`.

syntax "#guard_expr"... [Lean.Parser.Command.guardExprCmd]
  Command to check equality of two expressions.
  * `#guard_expr e = e'` checks that `e` and `e'` are defeq at reducible transparency.
  * `#guard_expr e =~ e'` checks that `e` and `e'` are defeq at default transparency.
  * `#guard_expr e =ₛ e'` checks that `e` and `e'` are syntactically equal.
  * `#guard_expr e =ₐ e'` checks that `e` and `e'` are alpha-equivalent.
  
  This is a command version of the `guard_expr` tactic.

syntax "#help"... [Mathlib.Tactic.«command#help_Cats___»]
  The command `#help cats` shows all syntax categories that have been defined in the
  current environment.
  Each syntax has a format like:
  ```
  category command [Lean.Parser.initFn✝]
  ```
  The name of the syntax category in this case is `command`, and `Lean.Parser.initFn✝` is the
  name of the declaration that introduced it. (It is often an anonymous declaration like this,
  but you can click to go to the definition.) It also shows the doc string if available.
  
  The form `#help cats id` will show only syntax categories that begin with `id`.

syntax "#help"... [Mathlib.Tactic.«command#help_Tactic+____»]
  The command `#help tactic` shows all tactics that have been defined in the current environment.
  See `#help cat` for more information.

syntax "#help"... [Mathlib.Tactic.«command#help_Conv+____»]
  The command `#help conv` shows all tactics that have been defined in the current environment.
  See `#help cat` for more information.

syntax "#help"... [Mathlib.Tactic.«command#help_Option___»]
  The command `#help option` shows all options that have been defined in the current environment.
  Each option has a format like:
  ```
  option pp.all : Bool := false
    (pretty printer) display coercions, implicit parameters, proof terms, fully qualified names,
    universe, and disable beta reduction and notations during pretty printing
  ```
  This says that `pp.all` is an option which can be set to a `Bool` value, and the default value is
  `false`. If an option has been modified from the default using e.g. `set_option pp.all true`,
  it will appear as a `(currently: true)` note next to the option.
  
  The form `#help option id` will show only options that begin with `id`.

syntax "#help"... [Mathlib.Tactic.«command#help_Term+____»]
  The command `#help term` shows all term syntaxes that have been defined in the current environment.
  See `#help cat` for more information.

syntax "#help"... [Mathlib.Tactic.«command#help_Cat+______»]
  The command `#help cat C` shows all syntaxes that have been defined in syntax category `C` in the
  current environment.
  Each syntax has a format like:
  ```
  syntax "first"... [Parser.tactic.first]
    `first | tac | ...` runs each `tac` until one succeeds, or else fails.
  ```
  The quoted string is the leading token of the syntax, if applicable. It is followed by the full
  name of the syntax (which you can also click to go to the definition), and the documentation.
  
  * The form `#help cat C id` will show only attributes that begin with `id`.
  * The form `#help cat+ C` will also show information about any `macro`s and `elab`s
    associated to the listed syntaxes.

syntax "#help"... [Mathlib.Tactic.«command#help_Command+____»]
  The command `#help command` shows all commands that have been defined in the current environment.
  See `#help cat` for more information.

syntax "#help"... [Mathlib.Tactic.«command#help_AttrAttribute___»]
  The command `#help attribute` (or the short form `#help attr`) shows all attributes that have been
  defined in the current environment.
  Each option has a format like:
  ```
  [inline]: mark definition to always be inlined
  ```
  This says that `inline` is an attribute that can be placed on definitions like
  `@[inline] def foo := 1`. (Individual attributes may have restrictions on where they can be
  applied; see the attribute's documentation for details.) Both the attribute's `descr` field as well
  as the docstring will be displayed here.
  
  The form `#help attr id` will show only attributes that begin with `id`.

syntax "#instances"... [Std.Tactic.Instances.instancesCmd]
  `#instances term` prints all the instances for the given class.
  For example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the
  `Nat` instance. The `term` can be any type that can appear in `[...]` binders.
  
  Trailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;
  the command adds metavariables until the argument is no longer a function.
  
  The `#instances` command is closely related to `#synth`, but `#synth` does the full
  instance synthesis algorithm and `#instances` does the first step of finding potential instances.

syntax "#instances"... [Std.Tactic.Instances.«command#instances__:_»]
  `#instances term` prints all the instances for the given class.
  For example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the
  `Nat` instance. The `term` can be any type that can appear in `[...]` binders.
  
  Trailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;
  the command adds metavariables until the argument is no longer a function.
  
  The `#instances` command is closely related to `#synth`, but `#synth` does the full
  instance synthesis algorithm and `#instances` does the first step of finding potential instances.

syntax "#lint"... [Std.Tactic.Lint.«command#lint+-*Only___»]
  The command `#lint` runs the linters on the current file (by default).
  
  `#lint only someLinter` can be used to run only a single linter.

syntax "#list_linters"... [Std.Tactic.Lint.«command#list_linters»]
  The command `#list_linters` prints a list of all available linters.

syntax "#lookup3"... [Mathlib.Prelude.Rename.lookup3]
  Show information about the alignment status of a lean 3 definition.

syntax "#minimize_imports"... [«command#minimize_imports»]
  Try to compute a minimal set of imports for this file,
  by analyzing the declarations.
  
  This must be run at the end of the file,
  and is not aware of syntax and tactics,
  so the results will likely need to be adjusted by hand.

syntax "#noalign"... [Mathlib.Prelude.Rename.noalign]
  `#noalign lean_3.def_name` will record that `lean_3.def_name` has been marked for non-porting.
  This information is used by the [mathport](https://github.com/leanprover-community/mathport)
  utility, which will remove the declaration from the corresponding mathport file, and later
  uses of the definition will be replaced by `sorry`.

syntax "#norm_num"... [Mathlib.Tactic.normNumCmd]
  The basic usage is `#norm_num e`, where `e` is an expression,
  which will print the `norm_num` form of `e`.
  
  Syntax: `#norm_num` (`only`)? (`[` simp lemma list `]`)? `:`? expression
  
  This accepts the same options as the `#simp` command.
  You can specify additional simp lemmas as usual, for example using `#norm_num [f, g] : e`.
  (The colon is optional but helpful for the parser.)
  The `only` restricts `norm_num` to using only the provided lemmas, and so
  `#norm_num only : e` behaves similarly to `norm_num1`.
  
  Unlike `norm_num`, this command does not fail when no simplifications are made.
  
  `#norm_num` understands local variables, so you can use them to introduce parameters.

syntax "#print"... [Std.Tactic.«command#printDependents___»]
  The command `#print dependents X Y` prints a list of all the declarations in the file that
  transitively depend on `X` or `Y`. After each declaration, it shows the list of all declarations
  referred to directly in the body which also depend on `X` or `Y`.
  
  For example, `#print axioms bar'` below shows that `bar'` depends on `Classical.choice`, but not
  why. `#print dependents Classical.choice` says that `bar'` depends on `Classical.choice` because
  it uses `foo` and `foo` uses `Classical.em`. `bar` is not listed because it is proved without using
  `Classical.choice`.
  ```
  import Std.Tactic.PrintDependents
  
  theorem foo : x = y ∨ x ≠ y := Classical.em _
  theorem bar : 1 = 1 ∨ 1 ≠ 1 := by simp
  theorem bar' : 1 = 1 ∨ 1 ≠ 1 := foo
  
  #print axioms bar'
  -- 'bar'' depends on axioms: [Classical.choice, Quot.sound, propext]
  
  #print dependents Classical.choice
  -- foo: Classical.em
  -- bar': foo
  ```

syntax "#print"... [Std.Tactic.printPrefix]
  The command `#print prefix foo` will print all definitions that start with
  the namespace `foo`.
  
  For example, the command below will print out definitions in the `List` namespace:
  
  ```lean
  #print prefix List
  ```
  
  `#print prefix` can be controlled by flags in `PrintPrefixConfig`.  These provide
  options for filtering names and formatting.   For example,
  `#print prefix` by default excludes internal names, but this can be controlled
  via config:
  ```lean
  #print prefix (config := {internals := true}) List
  ```
  
  By default, `#print prefix` prints the type after each name.  This can be controlled
  by setting `showTypes` to `false`:
  ```lean
  #print prefix (config := {showTypes := false}) List
  ```
  
  The complete set of flags can be seen in the documentation
  for `Lean.Elab.Command.PrintPrefixConfig`.

syntax "#push_neg"... [Mathlib.Tactic.PushNeg.pushNeg]
  The syntax is `#push_neg e`, where `e` is an expression,
  which will print the `push_neg` form of `e`.
  
  `#push_neg` understands local variables, so you can use them to introduce parameters.

syntax "#redundant_imports"... [«command#redundant_imports»]
  List the imports in this file which can be removed
  because they are transitively implied by another import.

syntax "#sample"... [SlimCheck.«command#sample_»]
  `#sample type`, where `type` has an instance of `SampleableExt`, prints ten random
  values of type `type` using an increasing size parameter.
  
  ```lean
  #sample Nat
  -- prints
  -- 0
  -- 0
  -- 2
  -- 24
  -- 64
  -- 76
  -- 5
  -- 132
  -- 8
  -- 449
  -- or some other sequence of numbers
  
  #sample List Int
  -- prints
  -- []
  -- [1, 1]
  -- [-7, 9, -6]
  -- [36]
  -- [-500, 105, 260]
  -- [-290]
  -- [17, 156]
  -- [-2364, -7599, 661, -2411, -3576, 5517, -3823, -968]
  -- [-643]
  -- [11892, 16329, -15095, -15461]
  -- or whatever
  ```

syntax "#show_unused"... [Std.Tactic.ShowUnused.«command#show_unused___»]
  `#show_unused decl1 decl2 ..` will highlight every theorem or definition in the current file
  not involved in the definition of declarations `decl1`, `decl2`, etc. The result is shown
  both in the message on `#show_unused`, as well as on the declarations themselves.
  ```
  def foo := 1
  def baz := 2
  def bar := foo
  #show_unused bar -- highlights `baz`
  ```

syntax "#simp"... [Mathlib.Tactic.Conv.«command#simpOnly_=>__»]
  * `#simp => e` runs `simp` on the expression `e` and displays the resulting expression after
    simplification.
  * `#simp only [lems] => e` runs `simp only [lems]` on `e`.
  * The `=>` is optional, so `#simp e` and `#simp only [lems] e` have the same behavior.
    It is mostly useful for disambiguating the expression `e` from the lemmas.

syntax "#test"... [SlimCheck.«command#test_»]

syntax "#where"... [Std.Tactic.Where.«command#where»]
  `#where` gives a description of the global scope at this point in the module.
  This includes the namespace, `open` namespaces, `universe` and `variable` commands,
  and options set with `set_option`.

syntax "#whnf"... [Mathlib.Tactic.Conv.«command#whnf_»]
  The command `#whnf e` evaluates `e` to Weak Head Normal Form, which means that the "head"
  of the expression is reduced to a primitive - a lambda or forall, or an axiom or inductive type.
  It is similar to `#reduce e`, but it does not reduce the expression completely,
  only until the first constructor is exposed. For example:
  ```
  open Nat List
  set_option pp.notation false
  #whnf [1, 2, 3].map succ
  -- cons (succ 1) (map succ (cons 2 (cons 3 nil)))
  #reduce [1, 2, 3].map succ
  -- cons 2 (cons 3 (cons 4 nil))
  ```
  The head of this expression is the `List.cons` constructor,
  so we can see from this much that the list is not empty,
  but the subterms `Nat.succ 1` and `List.map Nat.succ (List.cons 2 (List.cons 3 List.nil))` are
  still unevaluated. `#reduce` is equivalent to using `#whnf` on every subexpression.

syntax "#whnfR"... [Mathlib.Tactic.Conv.«command#whnfR_»]
  The command `#whnfR e` evaluates `e` to Weak Head Normal Form with Reducible transparency,
  that is, it uses `whnf` but only unfolding reducible definitions.

syntax "#widget"... [Lean.Widget.widgetCmd]
  Use `#widget <widget>` to display a panel widget,
  and `#widget <widget> with <props>` to display it with the given props.
  Useful for debugging widgets.
  
  The type of `<widget>` must implement `Widget.ToModule`,
  and the type of `<props>` must implement `Server.RpcEncodable`.
  In particular, `<props> : Json` works.

syntax "assert_exists"... [commandAssert_exists_]
  `assert_exists n` is a user command that asserts that a declaration named `n` exists
  in the current import scope.
  
  Be careful to use names (e.g. `Rat`) rather than notations (e.g. `ℚ`).

syntax "assert_not_exists"... [commandAssert_not_exists_]
  `assert_not_exists n` is a user command that asserts that a declaration named `n` *does not exist*
  in the current import scope.
  
  Be careful to use names (e.g. `Rat`) rather than notations (e.g. `ℚ`).
  
  It may be used (sparingly!) in mathlib to enforce plans that certain files
  are independent of each other.
  
  If you encounter an error on an `assert_not_exists` command while developing mathlib,
  it is probably because you have introduced new import dependencies to a file.
  
  In this case, you should refactor your work
  (for example by creating new files rather than adding imports to existing files).
  You should *not* delete the `assert_not_exists` statement without careful discussion ahead of time.

syntax "builtin_simproc_pattern%"... [Lean.Parser.simprocPatternBuiltin]
  Auxiliary command for associating a pattern with a builtin simplification procedure.

syntax "compile_def%"... [Mathlib.Util.«commandCompile_def%_»]
  `compile_def% Foo.foo` adds compiled code for the definition `Foo.foo`.
  This can be used for type class projections or definitions like `List._sizeOf_1`,
  for which Lean does not generate compiled code by default
  (since it is not used 99% of the time).

syntax "compile_inductive%"... [Mathlib.Util.«commandCompile_inductive%_»]
  `compile_inductive% Foo` creates compiled code for the recursor `Foo.rec`,
  so that `Foo.rec` can be used in a definition
  without having to mark the definition as `noncomputable`.

syntax "count_heartbeats"... [Mathlib.CountHeartbeats.commandCount_heartbeatsIn__]
  Count the heartbeats used in the enclosed command.
  
  This is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`
  for long running declarations.
  
  If you do so, please resist the temptation to set the limit as low as possible.
  As the `simp` set and other features of the library evolve,
  other contributors will find that their (likely unrelated) changes
  have pushed the declaration over the limit.
  `count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via "Try this:"
  using the least number of the form `2^k * 200000` that suffices.
  
  Note that that internal heartbeat counter accessible via `IO.getNumHeartbeats`
  has granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.
  As this is intended as a user command, we divide by 1000.

syntax "declare_aesop_rule_sets"... [Aesop.Frontend.Parser.declareAesopRuleSets]

syntax "declare_ext_theorems_for"... [Lean.Elab.Tactic.Ext.declareExtTheoremFor]
  `declare_ext_theorems_for A` declares the extensionality theorems for the structure `A`.
  
  These theorems state that two expressions with the structure type are equal if their fields are equal.

syntax "declare_uint_simprocs"... [commandDeclare_uint_simprocs_]

syntax "elab_stx_quot"... [Lean.Elab.Term.Quotation.commandElab_stx_quot_]

syntax "erase_aesop_rules"... [Aesop.Frontend.Parser.«commandErase_aesop_rules[_,,]»]

syntax "export private"... [Lean.Elab.Command.exportPrivate]
  The command `export private a b c in foo bar` is similar to `open private`, but instead of opening
  them in the current scope it will create public aliases to the private definition. The definition
  will exist at exactly the original location and name, as if the `private` keyword was not used
  originally.
  
  It will also open the newly created alias definition under the provided short name, like
  `open private`.
  It is also possible to specify the module instead with
  `export private a b c from Other.Module`.

syntax "extend_docs"... [Mathlib.Tactic.ExtendDocs.commandExtend_docs__Before__After_]
  `extend_docs <declName> before <prefix_string> after <suffix_string>` extends the
  docs of `<declName>` by adding `<prefix_string>` before and `<suffix_string>` after.

syntax "initialize_simps_projections"... [Lean.Parser.Command.initialize_simps_projections]
  This command specifies custom names and custom projections for the simp attribute `simpsAttr`.
  * You can specify custom names by writing e.g.
    `initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)`.
  * See Note [custom simps projection] and the examples below for information how to declare custom
    projections.
  * For algebraic structures, we will automatically use the notation (like `Mul`)
    for the projections if such an instance is available.
  * By default, the projections to parent structures are not default projections,
    but all the data-carrying fields are (including those in parent structures).
  * You can disable a projection by default by running
    `initialize_simps_projections Equiv (-invFun)`
    This will ensure that no simp lemmas are generated for this projection,
    unless this projection is explicitly specified by the user.
  * Conversely, you can enable a projection by default by running
    `initialize_simps_projections Equiv (+toEquiv)`.
  * If you want the projection name added as a prefix in the generated lemma name, you can use
    `as_prefix fieldName`:
    `initialize_simps_projections Equiv (toFun → coe, as_prefix coe)`
    Note that this does not influence the parsing of projection names: if you have a declaration
    `foo` and you want to apply the projections `snd`, `coe` (which is a prefix) and `fst`, in that
    order you can run `@[simps snd_coe_fst] def foo ...` and this will generate a lemma with the
    name `coe_foo_snd_fst`.
    * Run `initialize_simps_projections?` (or `set_option trace.simps.verbose true`)
    to see the generated projections.
  * Running `initialize_simps_projections MyStruc` without arguments is not necessary, it has the
    same effect if you just add `@[simps]` to a declaration.
  * It is recommended to call `@[simps]` or `initialize_simps_projections` in the same file as the
    structure declaration. Otherwise, the projections could be generated multiple times in different
    files.
  
  Some common uses:
  * If you define a new homomorphism-like structure (like `MulHom`) you can just run
    `initialize_simps_projections` after defining the `DFunLike` instance (or instance that implies
    a `DFunLike` instance).
    ```
      instance {mM : Mul M} {mN : Mul N} : DFunLike (MulHom M N) M N := ...
      initialize_simps_projections MulHom (toFun → apply)
    ```
    This will generate `foo_apply` lemmas for each declaration `foo`.
  * If you prefer `coe_foo` lemmas that state equalities between functions, use
    `initialize_simps_projections MulHom (toFun → coe, as_prefix coe)`
    In this case you have to use `@[simps (config := .asFn)]` or equivalently
    `@[simps (config := .asFn)]` whenever you call `@[simps]`.
  * You can also initialize to use both, in which case you have to choose which one to use by default,
    by using either of the following
    ```
      initialize_simps_projections MulHom (toFun → apply, toFun → coe, as_prefix coe, -coe)
      initialize_simps_projections MulHom (toFun → apply, toFun → coe, as_prefix coe, -apply)
    ```
    In the first case, you can get both lemmas using `@[simps, simps (config := .asFn) coe]` and in
    the second case you can get both lemmas using `@[simps (config := .asFn), simps apply]`.
  * If you declare a new homomorphism-like structure (like `RelEmbedding`),
    then `initialize_simps_projections` will automatically find any `DFunLike` coercions
    that will be used as the default projection for the `toFun` field.
    ```
      initialize_simps_projections relEmbedding (toFun → apply)
    ```
  * If you have an isomorphism-like structure (like `Equiv`) you often want to define a custom
    projection for the inverse:
    ```
      def Equiv.Simps.symm_apply (e : α ≃ β) : β → α := e.symm
      initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)
    ```

syntax "initialize_simps_projections?"... [Lean.Parser.Command.commandInitialize_simps_projections?_]
  This command specifies custom names and custom projections for the simp attribute `simpsAttr`.
  * You can specify custom names by writing e.g.
    `initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)`.
  * See Note [custom simps projection] and the examples below for information how to declare custom
    projections.
  * For algebraic structures, we will automatically use the notation (like `Mul`)
    for the projections if such an instance is available.
  * By default, the projections to parent structures are not default projections,
    but all the data-carrying fields are (including those in parent structures).
  * You can disable a projection by default by running
    `initialize_simps_projections Equiv (-invFun)`
    This will ensure that no simp lemmas are generated for this projection,
    unless this projection is explicitly specified by the user.
  * Conversely, you can enable a projection by default by running
    `initialize_simps_projections Equiv (+toEquiv)`.
  * If you want the projection name added as a prefix in the generated lemma name, you can use
    `as_prefix fieldName`:
    `initialize_simps_projections Equiv (toFun → coe, as_prefix coe)`
    Note that this does not influence the parsing of projection names: if you have a declaration
    `foo` and you want to apply the projections `snd`, `coe` (which is a prefix) and `fst`, in that
    order you can run `@[simps snd_coe_fst] def foo ...` and this will generate a lemma with the
    name `coe_foo_snd_fst`.
    * Run `initialize_simps_projections?` (or `set_option trace.simps.verbose true`)
    to see the generated projections.
  * Running `initialize_simps_projections MyStruc` without arguments is not necessary, it has the
    same effect if you just add `@[simps]` to a declaration.
  * It is recommended to call `@[simps]` or `initialize_simps_projections` in the same file as the
    structure declaration. Otherwise, the projections could be generated multiple times in different
    files.
  
  Some common uses:
  * If you define a new homomorphism-like structure (like `MulHom`) you can just run
    `initialize_simps_projections` after defining the `DFunLike` instance (or instance that implies
    a `DFunLike` instance).
    ```
      instance {mM : Mul M} {mN : Mul N} : DFunLike (MulHom M N) M N := ...
      initialize_simps_projections MulHom (toFun → apply)
    ```
    This will generate `foo_apply` lemmas for each declaration `foo`.
  * If you prefer `coe_foo` lemmas that state equalities between functions, use
    `initialize_simps_projections MulHom (toFun → coe, as_prefix coe)`
    In this case you have to use `@[simps (config := .asFn)]` or equivalently
    `@[simps (config := .asFn)]` whenever you call `@[simps]`.
  * You can also initialize to use both, in which case you have to choose which one to use by default,
    by using either of the following
    ```
      initialize_simps_projections MulHom (toFun → apply, toFun → coe, as_prefix coe, -coe)
      initialize_simps_projections MulHom (toFun → apply, toFun → coe, as_prefix coe, -apply)
    ```
    In the first case, you can get both lemmas using `@[simps, simps (config := .asFn) coe]` and in
    the second case you can get both lemmas using `@[simps (config := .asFn), simps apply]`.
  * If you declare a new homomorphism-like structure (like `RelEmbedding`),
    then `initialize_simps_projections` will automatically find any `DFunLike` coercions
    that will be used as the default projection for the `toFun` field.
    ```
      initialize_simps_projections relEmbedding (toFun → apply)
    ```
  * If you have an isomorphism-like structure (like `Equiv`) you often want to define a custom
    projection for the inverse:
    ```
      def Equiv.Simps.symm_apply (e : α ≃ β) : β → α := e.symm
      initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)
    ```

syntax "library_note"... [Std.Util.LibraryNote.commandLibrary_note___]
  ```
  library_note "some tag" /--
  ... some explanation ...
  -/
  ```
  creates a new "library note", which can then be cross-referenced using
  ```
  -- See note [some tag]
  ```
  in doc-comments.

syntax "lrat_proof"... [Mathlib.Tactic.Sat.commandLrat_proof_Example____]
  A macro for producing SAT proofs from CNF / LRAT files.
  These files are commonly used in the SAT community for writing proofs.
  
  The input to the `lrat_proof` command is the name of the theorem to define,
  and the statement (written in CNF format) and the proof (in LRAT format).
  For example:
  ```
  lrat_proof foo
    "p cnf 2 4  1 2 0  -1 2 0  1 -2 0  -1 -2 0"
    "5 -2 0 4 3 0  5 d 3 4 0  6 1 0 5 1 0  6 d 1 0  7 0 5 2 6 0"
  ```
  produces a theorem:
  ```
  foo : ∀ (a a_1 : Prop), (¬a ∧ ¬a_1 ∨ a ∧ ¬a_1) ∨ ¬a ∧ a_1 ∨ a ∧ a_1
  ```
  
  * You can see the theorem statement by hovering over the word `foo`.
  * You can use the `example` keyword in place of `foo` to avoid generating a theorem.
  * You can use the `include_str` macro in place of the two strings
    to load CNF / LRAT files from disk.

syntax "mk_iff_of_inductive_prop"... [Mathlib.Tactic.MkIff.mkIffOfInductiveProp]
  `mk_iff_of_inductive_prop i r` makes an `iff` rule for the inductively-defined proposition `i`.
  The new rule `r` has the shape `∀ps is, i as ↔ ⋁_j, ∃cs, is = cs`, where `ps` are the type
  parameters, `is` are the indices, `j` ranges over all possible constructors, the `cs` are the
  parameters for each of the constructors, and the equalities `is = cs` are the instantiations for
  each constructor for each of the indices to the inductive type `i`.
  
  In each case, we remove constructor parameters (i.e. `cs`) when the corresponding equality would
  be just `c = i` for some index `i`.
  
  For example, `mk_iff_of_inductive_prop` on `List.Chain` produces:
  
  ```lean
  ∀ { α : Type*} (R : α → α → Prop) (a : α) (l : List α),
    Chain R a l ↔ l = [] ∨ ∃(b : α) (l' : List α), R a b ∧ Chain R b l ∧ l = b :: l'
  ```
  
  See also the `mk_iff` user attribute.

syntax "norm_cast_add_elim"... [Lean.Parser.Tactic.normCastAddElim]
  `norm_cast_add_elim foo` registers `foo` as an elim-lemma in `norm_cast`.

syntax "open private"... [Lean.Elab.Command.openPrivate]
  The command `open private a b c in foo bar` will look for private definitions named `a`, `b`, `c`
  in declarations `foo` and `bar` and open them in the current scope. This does not make the
  definitions public, but rather makes them accessible in the current section by the short name `a`
  instead of the (unnameable) internal name for the private declaration, something like
  `_private.Other.Module.0.Other.Namespace.foo.a`, which cannot be typed directly because of the `0`
  name component.
  
  It is also possible to specify the module instead with
  `open private a b c from Other.Module`.

syntax "recall"... [Mathlib.Tactic.Recall.recall]
  The `recall` command redeclares a previous definition for illustrative purposes.
  This can be useful for files that give an expository account of some theory in Lean.
  
  The syntax of the command mirrors `def`, so all the usual bells and whistles work.
  ```
  recall List.cons_append (a : α) (as bs : List α) : (a :: as) ++ bs = a :: (as ++ bs) := rfl
  ```
  Also, one can leave out the body.
  ```
  recall Nat.add_comm (n m : Nat) : n + m = m + n
  ```
  
  The command verifies that the new definition type-checks and that the type and value
  provided are definitionally equal to the original declaration. However, this does not
  capture some details (like binders), so the following works without error.
  ```
  recall Nat.add_comm {n m : Nat} : n + m = m + n
  ```

syntax "register_hint"... [Mathlib.Tactic.Hint.registerHintStx]
  Register a tactic for use with the `hint` tactic, e.g. `register_hint simp_all`.

syntax "run_cmd"... [Lean.runCmd]
  The `run_cmd doSeq` command executes code in `CommandElabM Unit`.
  This is almost the same as `#eval show CommandElabM Unit from do doSeq`,
  except that it doesn't print an empty diagnostic.

syntax "run_elab"... [Lean.runElab]
  The `run_elab doSeq` command executes code in `TermElabM Unit`.
  This is almost the same as `#eval show TermElabM Unit from do doSeq`,
  except that it doesn't print an empty diagnostic.

syntax "run_meta"... [Lean.runMeta]
  The `run_meta doSeq` command executes code in `MetaM Unit`.
  This is almost the same as `#eval show MetaM Unit from do doSeq`,
  except that it doesn't print an empty diagnostic.
  
  (This is effectively a synonym for `run_elab`.)

syntax "show_panel_widgets"... [Lean.Widget.showPanelWidgetsCmd]
  Use `show_panel_widgets [<widget>]` to mark that `<widget>`
  should always be displayed, including in downstream modules.
  
  The type of `<widget>` must implement `Widget.ToModule`,
  and the type of `<props>` must implement `Server.RpcEncodable`.
  In particular, `<props> : Json` works.
  
  Use `show_panel_widgets [<widget> with <props>]`
  to specify the `<props>` that the widget should be given
  as arguments.
  
  Use `show_panel_widgets [local <widget> (with <props>)?]` to mark it
  for display in the current section, namespace, or file only.
  
  Use `show_panel_widgets [scoped <widget> (with <props>)?]` to mark it
  for display only when the current namespace is open.
  
  Use `show_panel_widgets [-<widget>]` to temporarily hide a previously shown widget
  in the current section, namespace, or file.
  Note that persistent erasure is not possible, i.e.,
  `-<widget>` has no effect on downstream modules.

syntax "simproc_pattern%"... [Lean.Parser.simprocPattern]
  Auxiliary command for associating a pattern with a simplification procedure.

syntax "sudo"... [commandSudoSet_option___]
  The command `sudo set_option name val` is similar to `set_option name val`,
  but it also allows to set undeclared options.

syntax "suppress_compilation"... [commandSuppress_compilation]
  Replacing `def` and `instance` by `noncomputable def` and `noncomputable instance`, designed
  to disable the compiler in a given file or a given section.
  This is a hack to work around mathlib4#7103.
  Note that it does not work with `notation3`. You need to prefix such a notation declaration with
  `unsuppress_compilation` if `suppress_compilation` is active.

syntax "test_extern"... [testExternCmd]

syntax "unset_option"... [Lean.Elab.Command.unsetOption]
  Unset a user option

syntax "unsuppress_compilation"... [commandUnsuppress_compilationIn_]
  The command `unsuppress_compilation in def foo : ...` makes sure that the definition is
  compiled to executable code, even if `suppress_compilation` is active.

syntax "variable?"... [Mathlib.Command.Variable.variable?]
  The `variable?` command has the same syntax as `variable`, but it will auto-insert
  missing instance arguments wherever they are needed.
  It does not add variables that can already be deduced from others in the current context.
  By default the command checks that variables aren't implied by earlier ones, but it does *not*
  check that earlier variables aren't implied by later ones.
  Unlike `variable`, the `variable?` command does not support changing variable binder types.
  
  The `variable?` command will give a suggestion to replace itself with a command of the form
  `variable? ...binders... => ...binders...`.  The binders after the `=>` are the completed
  list of binders. When this `=>` clause is present, the command verifies that the expanded
  binders match the post-`=>` binders.  The purpose of this is to help keep code that uses
  `variable?` resilient against changes to the typeclass hierarchy, at least in the sense
  that this additional information can be used to debug issues that might arise.
  One can also replace `variable? ...binders... =>` with `variable`.
  
  The core algorithm is to try elaborating binders one at a time, and whenever there is a
  typeclass instance inference failure, it synthesizes binder syntax for it and adds it to
  the list of binders and tries again, recursively. There are no guarantees that this
  process gives the "correct" list of binders.
  
  Structures tagged with the `variable_alias` attribute can serve as aliases for a collection
  of typeclasses. For example, given
  ```lean
  @[variable_alias]
  structure VectorSpace (k V : Type*) [Field k] [AddCommGroup V] [Module k V]
  ```
  then `variable? [VectorSpace k V]` is
  equivalent to `variable {k V : Type*} [Field k] [AddCommGroup V] [Module k V]`, assuming
  that there are no pre-existing instances on `k` and `V`.
  Note that this is not a simple replacement: it only adds instances not inferrable
  from others in the current scope.
  
  A word of warning: the core algorithm depends on pretty printing, so if terms that appear
  in binders do not round trip, this algorithm can fail. That said, it has some support
  for quantified binders such as `[∀ i, F i]`.

syntax "variables"... [Mathlib.Tactic.variables]

syntax "whatsnew"... [Mathlib.WhatsNew.commandWhatsnewIn__]
  `whatsnew in $command` executes the command and then prints the
  declarations that were added to the environment.

syntax "with_weak_namespace"... [Lean.Elab.Command.commandWith_weak_namespace__]
  Changes the current namespace without causing scoped things to go out of scope

syntax ... [Aesop.Frontend.Parser.command_Add_aesop_rules_]

syntax ... [Lean.Elab.Command.command_Irreducible_def____]
  Introduces an irreducible definition.
  `irreducible_def foo := 42` generates
  a constant `foo : Nat` as well as
  a theorem `foo_def : foo = 42`.

syntax ... [Lean.Elab.Tactic.configElab]

syntax ... [Lean.Option.registerBuiltinOption]

syntax ... [Lean.Option.registerOption]

syntax ... [Lean.Parser.Command.addDocString]
  Adds a docstring to an existing declaration, replacing any existing docstring.
  The provided docstring should be written as a docstring for the `add_decl_doc` command, as in
  ```
  /-- My new docstring -/
  add_decl_doc oldDeclaration
  ```
  
  This is useful for auto-generated declarations
  for which there is no place to write a docstring in the source code.
  
  Parent projections in structures are an example of this:
  ```
  structure Triple (α β γ : Type) extends Prod α β where
    thrd : γ
  
  /-- Extracts the first two projections of a triple. -/
  add_decl_doc Triple.toProd
  ```
  
  Documentation can only be added to declarations in the same module.

syntax ... [Lean.Parser.Command.attribute]

syntax ... [Lean.Parser.Command.binderPredicate]
  Declares a binder predicate.  For example:
  ```
  binder_predicate x " > " y:term => `($x > $y)
  ```

syntax ... [Lean.Parser.Command.check]

syntax ... [Lean.Parser.Command.check_failure]

syntax ... [Lean.Parser.Command.classAbbrev]
  Expands
  ```
  class abbrev C <params> := D_1, ..., D_n
  ```
  into
  ```
  class C <params> extends D_1, ..., D_n
  attribute [instance] C.mk
  ```

syntax ... [Lean.Parser.Command.declaration]

syntax ... [Lean.Parser.Command.deriving]

syntax ... [Lean.Parser.Command.elab]

syntax ... [Lean.Parser.Command.elab_rules]

syntax ... [Lean.Parser.Command.end]
  `end` closes a `section` or `namespace` scope. If the scope is named `<id>`, it has to be closed
  with `end <id>`.

syntax ... [Lean.Parser.Command.eval]

syntax ... [Lean.Parser.Command.exit]

syntax ... [Lean.Parser.Command.export]
  Adds names from other namespaces to the current namespace.
  
  The command `export Some.Namespace (name₁ name₂)` makes `name₁` and `name₂`:
  
  - visible in the current namespace without prefix `Some.Namespace`, like `open`, and
  - visible from outside the current namespace `N` as `N.name₁` and `N.name₂`.
  
  ## Examples
  
  ```lean
  namespace Morning.Sky
    def star := "venus"
  end Morning.Sky
  
  namespace Evening.Sky
    export Morning.Sky (star)
    -- `star` is now in scope
    #check star
  end Evening.Sky
  
  -- `star` is visible in `Evening.Sky`
  #check Evening.Sky.star
  ```

syntax ... [Lean.Parser.Command.genInjectiveTheorems]
  This is an auxiliary command for generation constructor injectivity theorems for
  inductive types defined at `Prelude.lean`.
  It is meant for bootstrapping purposes only.

syntax ... [Lean.Parser.Command.import]

syntax ... [Lean.Parser.Command.in]

syntax ... [Lean.Parser.Command.init_quot]

syntax ... [Lean.Parser.Command.initialize]

syntax ... [Lean.Parser.Command.macro]

syntax ... [Lean.Parser.Command.macro_rules]

syntax ... [Lean.Parser.Command.mixfix]

syntax ... [Lean.Parser.Command.moduleDoc]
  `/-! <text> -/` defines a *module docstring* that can be displayed by documentation generation
  tools. The string is associated with the corresponding position in the file. It can be used
  multiple times in the same file.

syntax ... [Lean.Parser.Command.mutual]

syntax ... [Lean.Parser.Command.namespace]
  `namespace <id>` opens a section with label `<id>` that influences naming and name resolution inside
  the section:
  * Declarations names are prefixed: `def seventeen : ℕ := 17` inside a namespace `Nat` is given the
    full name `Nat.seventeen`.
  * Names introduced by `export` declarations are also prefixed by the identifier.
  * All names starting with `<id>.` become available in the namespace without the prefix. These names
    are preferred over names introduced by outer namespaces or `open`.
  * Within a namespace, declarations can be `protected`, which excludes them from the effects of
    opening the namespace.
  
  As with `section`, namespaces can be nested and the scope of a namespace is terminated by a
  corresponding `end <id>` or the end of the file.
  
  `namespace` also acts like `section` in delimiting the scope of `variable`, `open`, and other scoped commands.

syntax ... [Lean.Parser.Command.noncomputableSection]

syntax ... [Lean.Parser.Command.notation]

syntax ... [Lean.Parser.Command.open]
  Makes names from other namespaces visible without writing the namespace prefix.
  
  Names that are made available with `open` are visible within the current `section` or `namespace`
  block. This makes referring to (type) definitions and theorems easier, but note that it can also
  make [scoped instances], notations, and attributes from a different namespace available.
  
  The `open` command can be used in a few different ways:
  
  * `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in
    `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that
    `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and
    `y`.
  
  * `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`
    except `def1` and `def2`.
  
  * `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and
    `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would
    be unaffected.
  
    This works even if `def1` and `def2` are `protected`.
  
  * `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path
    (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.
  
    This works even if `def1` and `def2` are `protected`.
  
  * `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],
    notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name
    available.
  
  * `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next
    command or expression.
  
  [scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances
  (Scoped instances in Theorem Proving in Lean)
  
  
  ## Examples
  
  ```lean
  /-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/
  namespace Combinator.Calculus
    def I (a : α) : α := a
    def K (a : α) : β → α := fun _ => a
    def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)
  end Combinator.Calculus
  
  section
    -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,
    -- until the section ends
    open Combinator.Calculus
  
    theorem SKx_eq_K : S K x = I := rfl
  end
  
  -- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)
  open Combinator.Calculus in
  theorem SKx_eq_K' : S K x = I := rfl
  
  section
    -- open only `S` and `K` under `Combinator.Calculus`
    open Combinator.Calculus (S K)
  
    theorem SKxy_eq_y : S K x y = y := rfl
  
    -- `I` is not in scope, we have to use its full path
    theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl
  end
  
  section
    open Combinator.Calculus
      renaming
        I → identity,
        K → konstant
  
    #check identity
    #check konstant
  end
  
  section
    open Combinator.Calculus
      hiding S
  
    #check I
    #check K
  end
  
  section
    namespace Demo
      inductive MyType
      | val
  
      namespace N1
        scoped infix:68 " ≋ " => BEq.beq
  
        scoped instance : BEq MyType where
          beq _ _ := true
  
        def Alias := MyType
      end N1
    end Demo
  
    -- bring `≋` and the instance in scope, but not `Alias`
    open scoped Demo.N1
  
    #check Demo.MyType.val == Demo.MyType.val
    #check Demo.MyType.val ≋ Demo.MyType.val
    -- #check Alias -- unknown identifier 'Alias'
  end
  ```

syntax ... [Lean.Parser.Command.print]

syntax ... [Lean.Parser.Command.printAxioms]

syntax ... [Lean.Parser.Command.printEqns]

syntax ... [Lean.Parser.Command.reduce]

syntax ... [Lean.Parser.Command.registerLabelAttr]
  Initialize a new "label" attribute.
  Declarations tagged with the attribute can be retrieved using `Std.Tactic.LabelAttr.labelled`.

syntax ... [Lean.Parser.Command.registerSimpAttr]

syntax ... [Lean.Parser.Command.section]
  A `section`/`end` pair delimits the scope of `variable`, `open`, `set_option`, and `local` commands.
  Sections can be nested. `section <id>` provides a label to the section that has to appear with the
  matching `end`. In either case, the `end` can be omitted, in which case the section is closed at the
  end of the file.

syntax ... [Lean.Parser.Command.set_option]
  `set_option <id> <value>` sets the option `<id>` to `<value>`. Depending on the type of the option,
  the value can be `true`, `false`, a string, or a numeral. Options are used to configure behavior of
  Lean as well as user-defined extensions. The setting is active until the end of the current `section`
  or `namespace` or the end of the file.
  Auto-completion is available for `<id>` to list available options.
  
  `set_option <id> <value> in <command>` sets the option for just a single command:
  ```
  set_option pp.all true in
  #check 1 + 1
  ```
  Similarly, `set_option <id> <value> in` can also be used inside terms and tactics to set an option
  only in a single term or tactic.

syntax ... [Lean.Parser.Command.syntax]

syntax ... [Lean.Parser.Command.syntaxAbbrev]

syntax ... [Lean.Parser.Command.syntaxCat]

syntax ... [Lean.Parser.Command.synth]

syntax ... [Lean.Parser.Command.universe]
  Declares one or more universe variables.
  
  `universe u v`
  
  `Prop`, `Type`, `Type u` and `Sort u` are types that classify other types, also known as
  *universes*. In `Type u` and `Sort u`, the variable `u` stands for the universe's *level*, and a
  universe at level `u` can only classify universes that are at levels lower than `u`. For more
  details on type universes, please refer to [the relevant chapter of Theorem Proving in Lean][tpil
  universes].
  
  Just as type arguments allow polymorphic definitions to be used at many different types, universe
  parameters, represented by universe variables, allow a definition to be used at any required level.
  While Lean mostly handles universe levels automatically, declaring them explicitly can provide more
  control when writing signatures. The `universe` keyword allows the declared universe variables to be
  used in a collection of definitions, and Lean will ensure that these definitions use them
  consistently.
  
  [tpil universes]: https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html#types-as-objects
  (Type universes on Theorem Proving in Lean)
  
  ```lean
  /- Explicit type-universe parameter. -/
  def id₁.{u} (α : Type u) (a : α) := a
  
  /- Implicit type-universe parameter, equivalent to `id₁`.
    Requires option `autoImplicit true`, which is the default. -/
  def id₂ (α : Type u) (a : α) := a
  
  /- Explicit standalone universe variable declaration, equivalent to `id₁` and `id₂`. -/
  universe u
  def id₃ (α : Type u) (a : α) := a
  ```
  
  On a more technical note, using a universe variable only in the right-hand side of a definition
  causes an error if the universe has not been declared previously.
  
  ```lean
  def L₁.{u} := List (Type u)
  
  -- def L₂ := List (Type u) -- error: `unknown universe level 'u'`
  
  universe u
  def L₃ := List (Type u)
  ```
  
  ## Examples
  
  ```lean
  universe u v w
  
  structure Pair (α : Type u) (β : Type v) : Type (max u v) where
    a : α
    b : β
  
  #check Pair.{v, w}
  -- Pair : Type v → Type w → Type (max v w)
  ```

syntax ... [Lean.Parser.Command.variable]
  Declares one or more typed variables, or modifies whether already-declared variables are
  implicit.
  
  Introduces variables that can be used in definitions within the same `namespace` or `section` block.
  When a definition mentions a variable, Lean will add it as an argument of the definition. The
  `variable` command is also able to add typeclass parameters. This is useful in particular when
  writing many definitions that have parameters in common (see below for an example).
  
  Variable declarations have the same flexibility as regular function paramaters. In particular they
  can be [explicit, implicit][binder docs], or [instance implicit][tpil classes] (in which case they
  can be anonymous). This can be changed, for instance one can turn explicit variable `x` into an
  implicit one with `variable {x}`. Note that currently, you should avoid changing how variables are
  bound and declare new variables at the same time; see [issue 2789] for more on this topic.
  
  See [*Variables and Sections* from Theorem Proving in Lean][tpil vars] for a more detailed
  discussion.
  
  [tpil vars]: https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html#variables-and-sections
  (Variables and Sections on Theorem Proving in Lean)
  [tpil classes]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html
  (Type classes on Theorem Proving in Lean)
  [binder docs]: https://leanprover-community.github.io/mathlib4_docs/Lean/Expr.html#Lean.BinderInfo
  (Documentation for the BinderInfo type)
  [issue 2789]: https://github.com/leanprover/lean4/issues/2789
  (Issue 2789 on github)
  
  ## Examples
  
  ```lean
  section
    variable
      {α : Type u}      -- implicit
      (a : α)           -- explicit
      [instBEq : BEq α] -- instance implicit, named
      [Hashable α]      -- instance implicit, anonymous
  
    def isEqual (b : α) : Bool :=
      a == b
  
    #check isEqual
    -- isEqual.{u} {α : Type u} (a : α) [instBEq : BEq α] (b : α) : Bool
  
    variable
      {a} -- `a` is implicit now
  
    def eqComm {b : α} := a == b ↔ b == a
  
    #check eqComm
    -- eqComm.{u} {α : Type u} {a : α} [instBEq : BEq α] {b : α} : Prop
  end
  ```
  
  The following shows a typical use of `variable` to factor out definition arguments:
  
  ```lean
  variable (Src : Type)
  
  structure Logger where
    trace : List (Src × String)
  #check Logger
  -- Logger (Src : Type) : Type
  
  namespace Logger
    -- switch `Src : Type` to be implicit until the `end Logger`
    variable {Src}
  
    def empty : Logger Src where
      trace := []
    #check empty
    -- Logger.empty {Src : Type} : Logger Src
  
    variable (log : Logger Src)
  
    def len :=
      log.trace.length
    #check len
    -- Logger.len {Src : Type} (log : Logger Src) : Nat
  
    variable (src : Src) [BEq Src]
  
    -- at this point all of `log`, `src`, `Src` and the `BEq` instance can all become arguments
  
    def filterSrc :=
      log.trace.filterMap
        fun (src', str') => if src' == src then some str' else none
    #check filterSrc
    -- Logger.filterSrc {Src : Type} (log : Logger Src) (src : Src) [inst✝ : BEq Src] : List String
  
    def lenSrc :=
      log.filterSrc src |>.length
    #check lenSrc
    -- Logger.lenSrc {Src : Type} (log : Logger Src) (src : Src) [inst✝ : BEq Src] : Nat
  end Logger
  ```

syntax ... [Lean.Parser.Tactic.declareSimpLikeTactic]

syntax ... [Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»]
  A builtin defeq simplification procedure declaration.

syntax ... [Lean.Parser.«command_Builtin_simproc_decl_(_):=_»]
  A builtin simplification procedure declaration.

syntax ... [Lean.Parser.«command_Dsimproc_decl_(_):=_»]
  A user-defined defeq simplification procedure declaration. To activate this procedure in `simp` tactic,
  we must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.

syntax ... [Lean.Parser.«command_Simproc_decl_(_):=_»]
  A user-defined simplification procedure declaration. To activate this procedure in `simp` tactic,
  we must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.

syntax ... [Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»]
  A builtin defeq simplification procedure.

syntax ... [Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»]
  A builtin simplification procedure.

syntax ... [Lean.Parser.«command__Dsimproc__[_]_(_):=_»]
  Similar to `simproc`, but resulting expression must be definitionally equal to the input one.

syntax ... [Lean.Parser.«command__Simproc__[_]_(_):=_»]
  A user-defined simplification procedure used by the `simp` tactic, and its variants.
  Here is an example.
  ```lean
  theorem and_false_eq {p : Prop} (q : Prop) (h : p = False) : (p ∧ q) = False := by simp [*]
  
  open Lean Meta Simp
  simproc ↓ shortCircuitAnd (And _ _) := fun e => do
    let_expr And p q := e | return .continue
    let r ← simp p
    let_expr False := r.expr | return .continue
    let proof ← mkAppM ``and_false_eq #[q, (← r.getProof)]
    return .done { expr := r.expr, proof? := some proof }
  ```
  The `simp` tactic invokes `shortCircuitAnd` whenever it finds a term of the form `And _ _`.
  The simplification procedures are stored in an (imperfect) discrimination tree.
  The procedure should **not** assume the term `e` perfectly matches the given pattern.
  The body of a simplification procedure must have type `Simproc`, which is an alias for
  `Expr → SimpM Step`
  You can instruct the simplifier to apply the procedure before its sub-expressions
  have been simplified by using the modifier `↓` before the procedure name.
  Simplification procedures can be also scoped or local.

syntax ... [Lean.«command__Unif_hint____Where_|_-⊢_»]

syntax ... [Lean.guardMsgsCmd]
  `/-- ... -/ #guard_msgs in cmd` captures the messages generated by the command `cmd`
  and checks that they match the contents of the docstring.
  
  Basic example:
  ```lean
  /--
  error: unknown identifier 'x'
  -/
  #guard_msgs in
  example : α := x
  ```
  This checks that there is such an error and then consumes the message.
  
  By default, the command captures all messages, but the filter condition can be adjusted.
  For example, we can select only warnings:
  ```lean
  /--
  warning: declaration uses 'sorry'
  -/
  #guard_msgs(warning) in
  example : α := sorry
  ```
  or only errors
  ```lean
  #guard_msgs(error) in
  example : α := sorry
  ```
  In the previous example, since warnings are not captured there is a warning on `sorry`.
  We can drop the warning completely with
  ```lean
  #guard_msgs(error, drop warning) in
  example : α := sorry
  ```
  
  In general, `#guard_msgs` accepts a comma-separated list of configuration clauses in parentheses:
  ```
  #guard_msgs (configElt,*) in cmd
  ```
  By default, the configuration list is `(all, whitespace := normalized, ordering := exact)`.
  
  Message filters (processed in left-to-right order):
  - `info`, `warning`, `error`: capture messages with the given severity level.
  - `all`: capture all messages (the default).
  - `drop info`, `drop warning`, `drop error`: drop messages with the given severity level.
  - `drop all`: drop every message.
  
  Whitespace handling (after trimming leading and trailing whitespace):
  - `whitespace := exact` requires an exact whitespace match.
  - `whitespace := normalized` converts all newline characters to a space before matching
    (the default). This allows breaking long lines.
  - `whitespace := lax` collapses whitespace to a single space before matching.
  
  Message ordering:
  - `ordering := exact` uses the exact ordering of the messages (the default).
  - `ordering := sorted` sorts the messages in lexicographic order.
    This helps with testing commands that are non-deterministic in their ordering.
  
  For example, `#guard_msgs (error, drop all) in cmd` means to check warnings and drop
  everything else.

syntax ... [Mathlib.Notation3.notation3]
  `notation3` declares notation using Lean-3-style syntax.
  
  Examples:
  ```
  notation3 "∀ᶠ " (...) " in " f ", " r:(scoped p => Filter.eventually p f) => r
  notation3 "MyList[" (x", "* => foldr (a b => MyList.cons a b) MyList.nil) "]" => x
  ```
  By default notation is unable to mention any variables defined using `variable`, but
  `local notation3` is able to use such local variables.
  
  Use `notation3 (prettyPrint := false)` to keep the command from generating a pretty printer
  for the notation.
  
  This command can be used in mathlib4 but it has an uncertain future and was created primarily
  for backward compatibility.

syntax ... [Mathlib.Tactic.scopedNS]
  `scoped[NS]` is similar to the `scoped` modifier on attributes and notations,
  but it scopes the syntax in the specified namespace instead of the current namespace.
  ```
  scoped[Matrix] infixl:72 " ⬝ᵥ " => Matrix.dotProduct
  -- declares `*` as a notation for vector dot productss
  -- which is only accessible if you `open Matrix` or `open scoped Matrix`.
  
  namespace Nat
  
  scoped[Nat.Count] attribute [instance] CountSet.fintype
  -- make the definition Nat.CountSet.fintype an instance,
  -- but only if `Nat.Count` is open
  ```

syntax ... [Std.ExtendedBinder.binderPredicate]
  Declares a binder predicate.  For example:
  ```
  binder_predicate x " > " y:term => `($x > $y)
  ```

syntax ... [Std.Tactic.Alias.alias]
  The command `alias name := target` creates a synonym of `target` with the given name.
  
  The command `alias ⟨fwd, rev⟩ := target` creates synonyms for the forward and reverse directions
  of an iff theorem. Use `_` if only one direction is required.
  
  These commands accept all modifiers and attributes that `def` and `theorem` do.

syntax ... [Std.Tactic.Alias.aliasLR]
  The command `alias name := target` creates a synonym of `target` with the given name.
  
  The command `alias ⟨fwd, rev⟩ := target` creates synonyms for the forward and reverse directions
  of an iff theorem. Use `_` if only one direction is required.
  
  These commands accept all modifiers and attributes that `def` and `theorem` do.

syntax ... [lemma]
  `lemma` means the same as `theorem`. It is used to denote "less important" theorems

syntax ... [proof_wanted]
  This proof would be a welcome contribution to the library!
  
  The syntax of `proof_wanted` declarations is just like that of `theorem`, but without `:=` or the
  proof. Lean checks that `proof_wanted` declarations are well-formed (e.g. it ensures that all the
  mentioned names are in scope, and that the theorem statement is a valid proposition), but they are
  discarded afterwards. This means that they cannot be used as axioms.
  
  Typical usage:
  ```
  @[simp] proof_wanted empty_find? [BEq α] [Hashable α] {a : α} :
      (∅ : HashMap α β).find? a = none
  ```
[1984/2058] Building Examples.Command.Check
info: ././././Examples/Command/Check.lean:8:0-8:6: 'a' : Char
info: ././././Examples/Command/Check.lean:11:0-11:6: "Hello" : String
info: ././././Examples/Command/Check.lean:14:0-14:6: 1 : Nat
info: ././././Examples/Command/Check.lean:17:0-17:6: 1.0 : Float
info: ././././Examples/Command/Check.lean:20:0-20:6: -2 : Int
info: ././././Examples/Command/Check.lean:23:0-23:6: 1 : Int
info: ././././Examples/Command/Check.lean:26:0-26:6: [1, 2, 3] : List Nat
info: ././././Examples/Command/Check.lean:29:0-29:6: #[1, 2, 3] : Array Nat
info: ././././Examples/Command/Check.lean:32:0-32:6: fun x => x + 42 : Nat → Nat
info: ././././Examples/Command/Check.lean:35:0-35:6: Bool.true : Bool
info: ././././Examples/Command/Check.lean:38:0-38:6: True : Prop
info: ././././Examples/Command/Check.lean:46:0-46:6: Prop : Type
info: ././././Examples/Command/Check.lean:49:0-49:6: List : Type u → Type u
info: ././././Examples/Command/Check.lean:52:0-52:6: Array : Type u → Type u
info: ././././Examples/Command/Check.lean:55:0-55:6: Type : Type 1
info: ././././Examples/Command/Check.lean:57:0-57:6: Type 1 : Type 2
info: ././././Examples/Command/Check.lean:60:0-60:6: Type u : Type (u + 1)
info: ././././Examples/Command/Check.lean:66:0-66:6: 1 + 1 = 2 : Prop
info: ././././Examples/Command/Check.lean:72:0-72:6: two_eq_add_one : 2 = 1 + 1
info: ././././Examples/Command/Check.lean:80:0-80:6: trivial : True
info: ././././Examples/Command/Check.lean:92:0-92:6: tautology : True → True
info: ././././Examples/Command/Check.lean:97:0-97:6: tautology trivial : True
[1985/2058] Building Examples.Command.Instances
info: ././././Examples/Command/Instances.lean:8:0-8:10: 28 instances:

Pi.instInv.{u, v₁} {I : Type u} {f : I → Type v₁} [(i : I) → Inv (f i)] : Inv ((i : I) → f i)
Prod.instInv.{u_6, u_5} {M : Type u_5} {N : Type u_6} [Inv M] [Inv N] : Inv (M × N)
instInvOrderDual.{u_1} {α : Type u_1} [h : Inv α] : Inv αᵒᵈ
WithZero.inv.{u_1} {α : Type u_1} [Inv α] : Inv (WithZero α)
Multiplicative.inv.{u} {α : Type u} [Neg α] : Inv (Multiplicative α)
Nonneg.inv.{u_1} {α : Type u_1} [LinearOrderedSemifield α] : Inv { x // 0 ≤ x }
AddOpposite.instInv.{u_1} {α : Type u_1} [Inv α] : Inv αᵃᵒᵖ
Units.instInv.{u} {α : Type u} [Monoid α] : Inv αˣ
CauSeq.Completion.instInvCauchy.{u_2, u_1} {α : Type u_1} [LinearOrderedField α] {β : Type u_2} [DivisionRing β]
  {abv : β → α} [IsAbsoluteValue abv] : Inv (CauSeq.Completion.Cauchy abv)
MulOpposite.instInv.{u_1} {α : Type u_1} [Inv α] : Inv αᵐᵒᵖ
Rat.instInv : Inv ℚ
instInvLex.{u_1} {α : Type u_1} [h : Inv α] : Inv (Lex α)
MonoidHom.instInv.{u_6, u_3} {M : Type u_3} {G : Type u_6} [MulOneClass M] [CommGroup G] : Inv (M →* G)
Real.instInv : Inv ℝ
WithOne.inv.{u} {α : Type u} [Inv α] : Inv (WithOne α)
CanonicallyLinearOrderedSemifield.toInv.{u_2} {α : Type u_2} [self : CanonicallyLinearOrderedSemifield α] : Inv α
LinearOrderedField.toInv.{u_2} {α : Type u_2} [self : LinearOrderedField α] : Inv α
LinearOrderedSemifield.toInv.{u_2} {α : Type u_2} [self : LinearOrderedSemifield α] : Inv α
LinearOrderedCommGroupWithZero.toInv.{u_2} {α : Type u_2} [self : LinearOrderedCommGroupWithZero α] : Inv α
Field.toInv.{u} {K : Type u} [self : Field K] : Inv K
Semifield.toInv.{u_4} {α : Type u_4} [self : Semifield α] : Inv α
DivisionRing.toInv.{u_4} {α : Type u_4} [self : DivisionRing α] : Inv α
DivisionSemiring.toInv.{u_4} {α : Type u_4} [self : DivisionSemiring α] : Inv α
CommGroupWithZero.toInv.{u_4} {G₀ : Type u_4} [self : CommGroupWithZero G₀] : Inv G₀
GroupWithZero.toInv.{u} {G₀ : Type u} [self : GroupWithZero G₀] : Inv G₀
InvOneClass.toInv.{u_2} {G : Type u_2} [self : InvOneClass G] : Inv G
DivInvMonoid.toInv.{u} {G : Type u} [self : DivInvMonoid G] : Inv G
InvolutiveInv.toInv.{u_2} {G : Type u_2} [self : InvolutiveInv G] : Inv G
[1986/2058] Building Mathlib.Util.Time
[1987/2058] Building Examples.Command.Time
info: ././././Examples/Command/Time.lean:15:6-15:11: 2178309
info: ././././Examples/Command/Time.lean:15:0-15:5: time: 2684ms
info: ././././Examples/Command/Time.lean:29:6-29:11: 2178309
info: ././././Examples/Command/Time.lean:29:0-29:5: time: 5ms
[1988/2058] Building Examples.Command.Print
warning: ././././Examples/Command/Print.lean:35:8-35:14: declaration uses 'sorry'
[1989/2058] Building Examples.Tactic.InductionAp
[1990/2058] Building Examples.Tactic.Clear
[1991/2058] Building Examples.Tactic.Says
[1992/2058] Building Examples.Tactic.Aesop
info: ././././Examples/Tactic/Aesop.lean:37:2-37:8: Try this:
  intro a₁ a₂ a
  apply hgfinj
  simp_all only [comp_apply]
[1993/2058] Building Examples.Tactic.ByCases
[1994/2058] Building Examples.Tactic.Constructor
[1995/2058] Building Examples.Tactic.Congr
[1996/2058] Building Examples.Tactic.GuardHyp
[1997/2058] Building Examples.Tactic.Rfl
[1998/2058] Building Examples.Tactic.Wlog
[1999/2058] Building Examples.Tactic.Rw
[2000/2058] Building Examples.Tactic.Ring
info: ././././Examples/Tactic/Ring.lean:13:2-13:6: Try this: ring_nf
[2001/2058] Building Examples.Tactic.Rel
[2002/2058] Building Examples.Tactic.Calc
[2003/2058] Building Examples.Tactic.Induction
warning: ././././Examples/Tactic/Induction.lean:61:8-61:14: declaration uses 'sorry'
info: ././././Examples/Tactic/Induction.lean:157:0-157:6: theorem Induction.fibonacci.induct : ∀ (motive : ℕ → Prop),
  motive 0 → motive 1 → (∀ (n : ℕ), motive n → motive (n + 1) → motive n.succ.succ) → ∀ (a : ℕ), motive a :=
fun motive case1 case2 case3 a =>
  Nat.brecOn a fun t f =>
    Induction.fibonacci.match_1.splitter (fun x => Nat.below x → motive x) t (fun x => case1) (fun x => case2)
      (fun n x => case3 n (id x.fst.snd.fst.fst) (id x.fst.fst)) f
warning: ././././Examples/Tactic/Induction.lean:177:15-177:25: unknown constant 'Induction.bar.induct'
[2004/2058] Building Examples.Tactic.NativeDecide
warning: ././././Examples/Tactic/NativeDecide.lean:11:4-11:7: declaration uses 'sorry'
info: ././././Examples/Tactic/NativeDecide.lean:21:0-21:5: 1
warning: ././././Examples/Tactic/NativeDecide.lean:25:19-25:22: The rfl tactic failed. Possible reasons:
- The goal is not a reflexive relation (neither `=` nor a relation with a @[refl] lemma).
- The arguments of the relation are not equal.
Try using the reflexivitiy lemma for your relation explicitly, e.g. `exact Eq.rfl`.
⊢ gcd 42998431 120019 = 1
info: ././././Examples/Tactic/NativeDecide.lean:28:0-28:6: of_decide_eq_true (Lean.ofReduceBool _check._nativeDecide_1 true (Eq.refl true)) : gcd 42998431 120019 = 1
[2005/2058] Building Examples.Tactic.Conv
[2006/2058] Building Examples.Tactic.Cases
info: ././././Examples/Tactic/Cases.lean:60:0-60:6: Or.inl : P → P ∨ Q
info: ././././Examples/Tactic/Cases.lean:61:0-61:6: Or.inr : Q → P ∨ Q
[2007/2058] Building Examples.Tactic.Gcongr
[2008/2058] Building Examples.Tactic.Try
[2009/2058] Building Examples.Tactic.Split
[2010/2058] Building Examples.Tactic.Contrapose
[2011/2058] Building Examples.Tactic.Trivial
[2012/2058] Building Examples.Tactic.Linarith
info: ././././Examples/Tactic/Linarith.lean:35:0-35:5: time: 7ms
info: ././././Examples/Tactic/Linarith.lean:37:0-37:5: time: 12ms
info: ././././Examples/Tactic/Linarith.lean:39:0-39:5: time: 66ms
[2013/2058] Building Examples.Tactic.Qify
[2014/2058] Building Examples.Tactic.Apply
[2015/2058] Building Examples.Tactic.SlimCheck
warning: ././././Examples/Tactic/SlimCheck.lean:8:0-8:7: declaration uses 'sorry'
warning: ././././Examples/Tactic/SlimCheck.lean:30:2-30:12: Gave up 72 times
warning: ././././Examples/Tactic/SlimCheck.lean:29:0-29:7: declaration uses 'sorry'
[2016/2058] Building Examples.Tactic.Intro
[2017/2058] Building Examples.Tactic.Omega
[2018/2058] Building Examples.Tactic.Exists
info: ././././Examples/Tactic/Exists.lean:27:0-27:6: fun {α} {p} => intro : ∀ {α : Sort u} {p : α → Prop} (w : α), p w → ∃ w, p w
warning: ././././Examples/Tactic/Exists.lean:27:62-27:63: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
[2019/2058] Building Examples.Tactic.AllGoals
[2020/2058] Building Examples.Tactic.Set
[2021/2058] Building Examples.Tactic.ApplyAssumption
[2022/2058] Building Examples.Tactic.FinCases
[2023/2058] Building Examples.Tactic.FieldSimp
[2024/2058] Building Examples.Tactic.RwSearch
info: ././././Examples/Tactic/RwSearch.lean:14:6-14:10: Try this: ring_nf
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← h]
-- n = n + m ↔ m = n + m
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [propext (eq_zero_iff_eq_zero_of_add_eq_zero h)]
-- m = 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [Nat.le_antisymm_iff]
-- n ≤ 0 ∧ 0 ≤ n ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Int.coe_nat_nonpos_iff]
-- ↑n ≤ 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Int.coe_nat_eq_zero]
-- ↑n = 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.size_eq_zero]
-- n.size = 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.one_eq_bit1]
-- 1 = bit1 n ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.bit1_eq_one]
-- bit1 n = 1 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.bit0_eq_zero]
-- bit0 n = 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Finset.range_eq_empty_iff]
-- Finset.range n = ∅ ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← List.finRange_eq_nil]
-- List.finRange n = [] ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.pred_eq_self_iff]
-- n.pred = n ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← propext Nat.add_eq_right]
-- n + m = m ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.lt_one_iff]
-- n < 1 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.sqrt_eq_zero]
-- n.sqrt = 0 ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← propext Nat.add_eq_left]
-- m + n = m ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← List.range_eq_nil]
-- List.range n = [] ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← propext List.range'_eq_nil]
-- List.range' m n m = [] ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.zero_dvd]
-- 0 ∣ n ↔ m = 0
info: ././././Examples/Tactic/RwSearch.lean:41:2-41:5: Try this: rw [← Nat.le_zero]
-- n ≤ 0 ↔ m = 0
warning: ././././Examples/Tactic/RwSearch.lean:39:0-39:7: declaration uses 'sorry'
[2025/2058] Building Examples.Tactic.ApplyQuestion
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_lt_succ ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_ble_eq_true ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_succ_le_succ ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_trans ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_not_lt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_not_ge ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.not_lt.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_mul_le_mul_left ?h ?hc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.succ_le_succ_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.sub_le_sub_iff_right ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.ge_of_not_lt ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_succ_le ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_eq ?p
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_not_le ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_iff_lt_or_eq.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_add_le_add_left ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_not_gt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le.intro ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.lt_succ_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.lt_succ.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_lt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_sub_le_sub_right ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.add_le_add_iff_right.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_sub_eq_zero ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_add_le_add_right ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_dvd ?h ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Int.ofNat_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Lean.Omega.Nat.le_of_ge ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.add_le_add_iff_left.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_sub_le_sub_left ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.pow_dvd_pow_iff_le_right ?w).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.pow_dvd_pow_iff_le_right'.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.sub_le_sub_iff_left ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_mod_lt ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.pow_le_pow_iff_right ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.sub_eq_zero_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.compare_ne_lt.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.compare_ne_gt.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Fin.mk_le_mk.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_le_of_sub_le_sub_right ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_le_of_sub_le_sub_left ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (List.range'_subset_right ?step0).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (List.replicate_sublist_replicate ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine List.range'_subset_right_1.mp fun ⦃a⦄ => ?m.21126
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine List.range_subset.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine List.range'_sublist_right.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine List.range_sublist.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine String.Pos.mk_le_mk.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_pred_lt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.mul_self_le_mul_self_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.lt_add_one_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.lt_one_add_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_mul_le_mul_right ?h ?hc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.le_of_lt_add_of_dvd ?h ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.one_le_div_iff ?hb).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.div_ne_zero_iff ?hb).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.div_pos_iff ?hb).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.pow_le_pow_iff_left fun a => ?m.22431 a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Int.le_of_ofNat_le_ofNat ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (nsmul_le_nsmul_iff_left ?ha).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (nsmul_le_nsmul_iff ?ha).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_le_pow_iff' ?ha).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_le_pow_iff_right' ?ha).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.cast_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.bit0_le_bit1_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.bit0_lt_bit1_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_dvd_pow_iff (fun a => ?m.23590 a) ?h1).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.pow_le_iff_le_left fun a => ?m.23698 a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Nat.pow_le_iff_le_right ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_le_pow_iff_right ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_le_pow_iff ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (PNat.mk_le_mk (8 ^ x) (16 ^ y) ?hn ?hk).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Fin.nonempty_embedding_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (List.prefix_take_le_iff ?hm).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Multiset.replicate_le_replicate ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Multiset.range_subset.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Multiset.range_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Finset.mem_range_le ?hx
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Finset.range_subset.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Finset.mem_range_succ_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_eq_of_le ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ge_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ge_iff_le.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_of_eq ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (List.le_minimum?_iff ?le_min_iff ?a✝ (8 ^ x)).mpr ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Std.LawfulCmp.cmp_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Std.LTCmp.cmp_iff_ge.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Std.LECmp.cmp_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_not_ge ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_not_lt ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine not_lt.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Preorder.le_trans (8 ^ x) ?b (16 ^ y) ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_eq_or_lt ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_imp_le_of_lt_imp_lt (fun a => ?m.28293 a) ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_eq ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_not_le ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine compare_ge_iff_ge.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_lt_or_eq.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_not_gt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Decidable.le_iff_lt_or_eq.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_trans ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_lt_or_eq ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ge_trans ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_lt ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine compare_le_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (List.maximum?_le_iff ?max_le_iff ?a✝ (16 ^ y)).mpr ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Subsingleton.le (8 ^ x) (16 ^ y)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_eq_of_le' ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_ge_of_dense ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_lt ?H
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_le' ?H
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine forall_lt_iff_le'.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_eq_or_lt.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_trans' ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LT.lt.le ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_update_self_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Eq.ge ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Eq.le ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LE.le.trans ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (LE.le.le_iff_eq ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Prod.mk_le_mk_iff_right.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_le ?H
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ge_of_eq ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LE.le.trans' ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Subtype.mk_le_mk.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Decidable.ne_iff_lt_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Decidable.le_iff_eq_or_lt.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine forall_lt_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LE.le.trans_eq' ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_of_eq' ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Function.const_le_const.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_lt' ?H
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_le_of_dense ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Eq.trans_ge ?a✝ ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_subsingleton
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (LE.le.ge_iff_eq ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ne_iff_lt_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Eq.trans_le ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_implies_le_of_le_of_le ?hca ?hbd ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LE.le.ge ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Prod.mk_le_mk_iff_left.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine GE.ge.le ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine LE.le.trans_eq ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Ne.le_iff_lt ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine OrderDual.toDual_le_toDual.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Ordering.Compares.ne_lt ?a✝).mp ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Ordering.Compares.ne_gt ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (le_iff_le_of_cmp_eq_cmp ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (le_iff_le_of_cmp_eq_cmp ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictMono.maximal_of_maximal_image (fun ⦃a⦄ => ?m.40509) ?hmax (8 ^ x)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictMono.minimal_of_minimal_image (fun ⦃a⦄ => ?m.41619) ?hmin (16 ^ y)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictAnti.maximal_of_minimal_image (fun ⦃a⦄ => ?m.42604) ?hmin (8 ^ x)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (StrictMono.le_iff_le fun ⦃a⦄ => ?m.43614).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (StrictAntiOn.le_iff_le (fun ⦃a⦄ => ?m.44758) ?ha ?hb).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (StrictMonoOn.le_iff_le (fun ⦃a⦄ => ?m.46164) ?ha ?hb).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictAnti.minimal_of_maximal_image (fun ⦃a⦄ => ?m.47561) ?hmax (16 ^ y)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (StrictAnti.le_iff_le fun ⦃a⦄ => ?m.48571).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine ULift.up_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine right_eq_inf.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sup_eq_left.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine left_eq_inf.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Monotone.forall_le_of_antitone ?hf ?hg ?h x y
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_sup_eq ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine left_eq_sup.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine right_eq_sup.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine inf_eq_left.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_exists_sup.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine inf_eq_right.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sup_eq_right.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_inf_le_sup_le ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_inf_eq ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine min_eq_right_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine max_eq_left_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine max_eq_right_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine min_eq_left_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_max_le_right ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_max_le_left ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (AddLECancellable.add_le_add_iff_left fun ⦃b⦄ => ?m.60974).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (add_le_add_iff_left ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_mul_of_le_one_right ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_add_of_nonpos_left ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_of_nonneg_left ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_of_one_le_right ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_add_of_nonpos_right ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_right' ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_iff_right ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_add_left ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_iff_left ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (MulLECancellable.mul_le_mul_iff_left fun ⦃b⦄ => ?m.62840).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_of_nonneg_right ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (MulLECancellable.mul_le_mul_iff_right fun ⦃b⦄ => ?m.63208).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (add_le_add_iff_right ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (AddLECancellable.add_le_add_iff_right fun ⦃b⦄ => ?m.63646).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_mul_of_le_one_left ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_add_right ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_of_one_le_left ?h ?hle
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_left' ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictMono.minimal_preimage_bot (fun ⦃a⦄ => ?m.64269) ?h_bot (16 ^ y)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictMono.maximal_preimage_top (fun ⦃a⦄ => ?m.65866) ?h_top (8 ^ x)
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine OrderedCancelAddCommMonoid.le_of_add_le_add_left ?a (8 ^ x) (16 ^ y) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine tsub_nonpos.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine add_neg_nonpos_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_neg_add_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine add_neg_nonpos_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine neg_le_neg_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sub_le_sub_flip.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine div_le_div_flip.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (sub_le_sub_iff_right ?c).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine div_le_inv_mul_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (sub_le_sub_iff_left ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sub_nonneg.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_sub_nonpos ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sub_nonpos.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_one_lt_lt_mul ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (div_le_div_iff_right ?c).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_sub_nonneg ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine mul_inv_le_one_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine OrderedAddCommGroup.le_of_add_le_add_left ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_forall_pos_lt_add.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_inv_mul_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine mul_inv_le_one_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine inv_le_inv_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_pos_lt_add ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_neg_le_neg ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine sub_le_neg_add_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine inv_mul_le_one_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_forall_one_lt_lt_mul.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_mul_inv_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine OrderedCommGroup.le_of_mul_le_mul_left ?bc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine neg_add_nonpos_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine one_le_div'.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_add_neg_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (div_le_div_iff_left ?a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine div_le_one'.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_right ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_exists_add'.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_one_lt_lt_mul' ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_pos_le_add ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_pos_lt_add' ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_forall_pos_lt_add'.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_exists_add.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_forall_one_lt_le_mul ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_add_le_left ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_iff_forall_one_lt_lt_mul'.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_mul_of_le_one_of_nonneg_right ?h ?hb ?hc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_le_mul_of_le_one_of_nonneg_left ?h ?hc ?hb
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_left ?bc ?a0
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_right ?bc ?a0
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_of_pos_left ?bc ?a0
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_mul_of_pos_right ?bc ?a0
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_iff_of_pos_left ?a0).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_iff_of_pos_right ?a0).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_of_one_le_of_nonneg_left ?h ?hb ?ha
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_right ?a0).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_left ?a0).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_of_one_le_nonneg_right ?h ?ha ?hb
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (le_iff_exists_nonneg_add (8 ^ x) (16 ^ y)).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_mul_le_of_one_le ?h ?hb ?hc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_self_le_mul_self_iff ?h1 ?h2).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine bit0_le_bit0.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine nonneg_le_nonneg_of_sq_le_sq ?hb ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine bit1_le_bit1.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_left_of_neg ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (mul_le_mul_right_of_neg ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine StrictOrderedSemiring.le_of_add_le_add_left ?a (8 ^ x) (16 ^ y) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine add_tsub_cancel_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine tsub_eq_zero_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine tsub_add_cancel_iff_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (AddLECancellable.tsub_le_tsub_iff_left ?ha ?hc ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (tsub_le_tsub_iff_right ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (tsub_le_tsub_iff_left ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine IsCompl.Antitone ?h ?h' ?hx
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.disjoint_left_iff ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.disjoint_right_iff ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.right_le_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Codisjoint.left_le_of_le_inf_left ?h ?hd
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.left_le_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.inf_left_eq_bot_iff ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Disjoint.left_le_of_le_sup_left ?h ?hd
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.le_left_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Codisjoint.left_le_of_le_inf_right ?h ?hd
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.inf_right_eq_bot_iff ?h).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCompl.le_right_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Disjoint.le_of_codisjoint ?hab ?hbc
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Disjoint.left_le_of_le_sup_right ?h ?hd
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WithTop.some_le_some.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WithBot.coe_le_coe.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (WithTop.le_coe ?a✝).mp ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WithTop.coe_le_coe.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WithBot.some_le_some.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (WithBot.coe_le ?a✝).mp ?a✝¹
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (map_le_map_iff ?f).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (OrderEmbedding.le_iff_le ?f).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (OrderIso.le_iff_le ?e).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Multiplicative.ofAdd_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Additive.ofMul_le.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WithZero.coe_le_coe.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_pow_le_pow' ?hn ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_nsmul_le_nsmul_right (fun a => ?m.84338 a) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_pow_le_pow_left' ?hn ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_nsmul_le_nsmul (fun a => ?m.84559 a) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Nat.ofNat_le.mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Iio_subset_Iic_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.left_mem_Icc.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Iio_subset_Iio_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Iic_subset_Iic.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Ici_subset_Ici.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.mem_Iic.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.right_mem_Icc.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Set.Icc_subset_Ici_iff ?h₁).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.subsingleton_Icc_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.not_mem_Iio.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Ioi_subset_Ici_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.nonempty_Icc.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.Ioi_subset_Ioi_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.mem_Ici.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Set.not_mem_Ioi.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (Set.Icc_subset_Iic_iff ?h₁).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine DirectedOn.is_top_of_is_max (fun x => ?m.88047 x) ?hm ?hmax (8 ^ x) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine DirectedOn.is_bot_of_is_min (fun x => ?m.88379 x) ?hm ?hmin (16 ^ y) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine IsLUB.mono ?ha ?hb ?hst
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine isGLB_le_isLUB ?ha ?hb ?hs
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine IsGreatest.mono ?ha ?hb ?hst
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine IsGLB.mono ?ha ?hb ?hst
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_isLUB_le_isGLB ?ha ?hb ?hab ?hx ?hy
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (isLUB_le_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (le_isGLB_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine lowerBounds_le_upperBounds (fun ⦃a⦄ => ?m.89102) ?hb ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine lub_Iio_le (16 ^ y) ?hb
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine IsLeast.mono ?ha ?hb ?hst
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_glb_Ioi (8 ^ x) ?hb
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine GaloisConnection.le_u (fun a => ?m.90096 a) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (GaloisCoinsertion.l_le_l_iff ?gi).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine GaloisConnection.l_le (fun a => ?m.91070 a) ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (GaloisInsertion.u_le_u_iff ?gi).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (GaloisConnection.le_iff_le fun a => ?m.92168 a).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (GaloisConnection.le_iff_le fun a => ?m.92352 a).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_pow_le_pow_left ?hn ?hb ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (pow_le_pow_iff_left ?ha ?hb ?hn).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine le_of_pow_le_pow ?hn ?hb ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine toAntisymmetrization_le_toAntisymmetrization_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine CovBy.le_of_lt ?hab ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WCovBy.le_of_lt ?hab ?hcb
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (WCovBy.wcovBy_iff_le ?hab).mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine CovBy.ge_of_gt ?hab ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WCovBy.ge_of_gt ?hab ?hac
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine WCovBy.le ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine CovBy.le ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Mathlib.Meta.NormNum.isNat_le_true ?a✝ ?a✝¹ ?a✝²
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine List.head_le_of_lt ?h
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Pi.le_toLex_update_self_iff.mp ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Finset.min_le_of_eq ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Finset.le_max_of_eq ?h₁ ?h₂
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine Mathlib.Tactic.ApplyFun.le_of_le ?e ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCoatom.le_iff_eq ?ha ?hb).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsAtom.le_iff_eq ?ha ?hb).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsAtom.le_iff ?h).mpr ?a✝
info: ././././Examples/Tactic/ApplyQuestion.lean:27:2-27:8: Try this: refine (IsCoatom.le_iff ?h).mpr ?a✝
warning: ././././Examples/Tactic/ApplyQuestion.lean:26:8-26:9: declaration uses 'sorry'
[2026/2058] Building Examples.Tactic.Refine
[2027/2058] Building Examples.Tactic.ApplyAt
[2028/2058] Building Examples.Tactic.NthRw
[2029/2058] Building Examples.Tactic.Contradiction
[2030/2058] Building Examples.Tactic.Hint
[2031/2058] Building Examples.Tactic.Suffices
[2032/2058] Building Examples.Tactic.LeftRight
info: ././././Examples/Tactic/LeftRight.lean:19:0-19:6: Or.inl : P → P ∨ Q
info: ././././Examples/Tactic/LeftRight.lean:21:0-21:6: Or.inr : Q → P ∨ Q
[2033/2058] Building Examples.Tactic.Assumption
[2034/2058] Building Examples.Tactic.Have
[2035/2058] Building Examples.Tactic.Generalize
[2036/2058] Building Examples.Tactic.By
info: ././././Examples/Tactic/By.lean:26:47-26:50: Try this: fun hP => hQR (hPQ hP)
[2037/2058] Building Examples.Tactic.CasesAp
[2038/2058] Building Examples.Tactic.Choose
[2039/2058] Building Examples.Tactic.PushNeg
[2040/2058] Building Examples.Tactic.Exact
[2041/2058] Building Examples.Tactic.Show
[2042/2058] Building Examples.Tactic.Sorry
warning: ././././Examples/Tactic/Sorry.lean:10:8-10:11: declaration uses 'sorry'
warning: ././././Examples/Tactic/Sorry.lean:24:8-24:22: declaration uses 'sorry'
[2043/2058] Building Examples.Tactic.ByContra
[2044/2058] Building Examples.Tactic.Repeat
[2045/2058] Building Examples.Tactic.FunProp
[2046/2058] Building Examples.Tactic.AcRfl
[2047/2058] Building Examples.Tactic.Simp
warning: ././././Examples/Tactic/Simp.lean:11:0-11:7: declaration uses 'sorry'
warning: ././././Examples/Tactic/Simp.lean:84:0-84:7: declaration uses 'sorry'
[2048/2058] Building Examples.Tactic.Nlinarith
[2049/2058] Building Examples.Tactic.Unfold
[2050/2058] Building Examples.Tactic.Funext
[2051/2058] Building Examples.Tactic.Ext
warning: ././././Examples/Tactic/Ext.lean:34:15-34:24: unknown identifier 'Point.ext'
warning: ././././Examples/Tactic/Ext.lean:35:15-35:28: unknown identifier 'Point.ext_iff'
info: ././././Examples/Tactic/Ext.lean:45:0-45:6: Point.ext : ∀ (x y : Point α), x.x = y.x → x.y = y.y → x = y
info: ././././Examples/Tactic/Ext.lean:49:0-49:6: Point.ext_iff : ∀ (x y : Point α), x = y ↔ x.x = y.x ∧ x.y = y.y
[2052/2058] Building Examples.Tactic.Replace
[2053/2058] Building Examples.Tactic.ExactQuestion
[2054/2058] Building Examples.Tactic.Done
[2055/2058] Building Examples.Tactic.Trans
[2056/2058] Building Examples.Tactic.RenameI
[2057/2058] Building Examples.Tactic.Convert
[2058/2058] Building Examples.Tactic.Tauto
2024-05-30 09:46:36.290 | INFO     | __main__:main:188 - Tracing tactic-cheatsheet
2024-05-30 09:46:36.360 | DEBUG    | __main__:main:193 - lake env lean --threads 32 --run ExtractData.lean
  0%|          | 0/2971 [00:00<?, ?it/s]  0%|          | 0/2971 [00:05<?, ?it/s]  0%|          | 0/2971 [00:10<?, ?it/s]  1%|          | 25/2971 [00:15<09:49,  5.00it/s]  2%|▏         | 47/2971 [00:20<10:29,  4.64it/s]  2%|▏         | 74/2971 [00:25<09:40,  4.99it/s]  3%|▎         | 103/2971 [00:30<09:00,  5.31it/s]  4%|▍         | 129/2971 [00:35<08:59,  5.27it/s]  5%|▌         | 149/2971 [00:40<09:43,  4.83it/s]  6%|▌         | 166/2971 [00:45<10:42,  4.37it/s]  6%|▌         | 179/2971 [00:50<12:14,  3.80it/s]  6%|▋         | 191/2971 [00:55<13:46,  3.36it/s]  7%|▋         | 200/2971 [01:00<16:02,  2.88it/s]  7%|▋         | 212/2971 [01:05<16:49,  2.73it/s]  8%|▊         | 223/2971 [01:10<17:49,  2.57it/s]  8%|▊         | 233/2971 [01:15<19:02,  2.40it/s]  8%|▊         | 239/2971 [01:20<22:22,  2.03it/s]  8%|▊         | 249/2971 [01:25<22:24,  2.02it/s]  9%|▉         | 262/2971 [01:30<20:33,  2.20it/s]  9%|▉         | 268/2971 [01:35<23:45,  1.90it/s]  9%|▉         | 276/2971 [01:40<24:51,  1.81it/s] 10%|▉         | 292/2971 [01:45<20:04,  2.22it/s] 10%|█         | 298/2971 [01:50<23:14,  1.92it/s] 11%|█         | 312/2971 [01:55<20:18,  2.18it/s] 11%|█         | 316/2971 [02:00<25:03,  1.77it/s] 11%|█         | 327/2971 [02:05<23:14,  1.90it/s] 11%|█         | 332/2971 [02:10<27:01,  1.63it/s] 11%|█▏        | 341/2971 [02:15<26:06,  1.68it/s] 12%|█▏        | 348/2971 [02:20<27:24,  1.59it/s] 12%|█▏        | 353/2971 [02:25<30:49,  1.42it/s] 12%|█▏        | 360/2971 [02:30<30:50,  1.41it/s] 12%|█▏        | 369/2971 [02:35<28:24,  1.53it/s] 13%|█▎        | 377/2971 [02:40<27:55,  1.55it/s] 13%|█▎        | 384/2971 [02:45<28:40,  1.50it/s] 13%|█▎        | 389/2971 [02:50<31:49,  1.35it/s] 13%|█▎        | 399/2971 [02:55<27:43,  1.55it/s] 14%|█▎        | 406/2971 [03:00<28:28,  1.50it/s] 14%|█▍        | 419/2971 [03:05<23:14,  1.83it/s] 15%|█▍        | 436/2971 [03:10<18:22,  2.30it/s] 15%|█▌        | 450/2971 [03:15<17:09,  2.45it/s] 16%|█▌        | 470/2971 [03:20<14:18,  2.91it/s] 16%|█▋        | 484/2971 [03:25<14:23,  2.88it/s] 17%|█▋        | 495/2971 [03:30<15:25,  2.67it/s] 17%|█▋        | 511/2971 [03:35<14:28,  2.83it/s] 18%|█▊        | 525/2971 [03:40<14:26,  2.82it/s] 18%|█▊        | 538/2971 [03:45<14:43,  2.75it/s] 19%|█▊        | 556/2971 [03:50<13:23,  3.01it/s] 19%|█▉        | 578/2971 [03:55<11:39,  3.42it/s] 20%|██        | 601/2971 [04:00<10:27,  3.78it/s] 21%|██        | 617/2971 [04:05<10:53,  3.60it/s] 21%|██▏       | 634/2971 [04:10<11:00,  3.54it/s] 22%|██▏       | 650/2971 [04:15<11:15,  3.44it/s] 22%|██▏       | 665/2971 [04:20<11:37,  3.30it/s] 23%|██▎       | 682/2971 [04:25<11:26,  3.33it/s] 24%|██▎       | 703/2971 [04:30<10:31,  3.59it/s] 24%|██▍       | 717/2971 [04:35<11:12,  3.35it/s] 25%|██▍       | 730/2971 [04:40<11:56,  3.13it/s] 25%|██▍       | 735/2971 [04:45<14:58,  2.49it/s] 25%|██▌       | 745/2971 [04:50<15:50,  2.34it/s] 25%|██▌       | 753/2971 [04:55<17:27,  2.12it/s] 26%|██▌       | 761/2971 [05:00<18:46,  1.96it/s] 26%|██▌       | 769/2971 [05:05<19:48,  1.85it/s] 26%|██▌       | 776/2971 [05:10<21:18,  1.72it/s] 26%|██▋       | 780/2971 [05:15<25:19,  1.44it/s] 27%|██▋       | 790/2971 [05:20<22:35,  1.61it/s] 27%|██▋       | 797/2971 [05:25<23:26,  1.55it/s] 27%|██▋       | 804/2971 [05:30<24:03,  1.50it/s] 27%|██▋       | 814/2971 [05:35<21:46,  1.65it/s] 28%|██▊       | 820/2971 [05:40<23:39,  1.51it/s] 28%|██▊       | 826/2971 [05:45<25:10,  1.42it/s] 28%|██▊       | 829/2971 [05:50<30:24,  1.17it/s] 28%|██▊       | 837/2971 [05:55<27:20,  1.30it/s] 29%|██▊       | 851/2971 [06:00<20:11,  1.75it/s] 29%|██▉       | 859/2971 [06:05<20:39,  1.70it/s] 29%|██▉       | 873/2971 [06:10<17:12,  2.03it/s] 30%|██▉       | 882/2971 [06:15<17:44,  1.96it/s] 30%|██▉       | 891/2971 [06:20<18:07,  1.91it/s] 30%|███       | 899/2971 [06:25<18:59,  1.82it/s] 31%|███       | 912/2971 [06:30<16:43,  2.05it/s] 31%|███       | 922/2971 [06:35<16:46,  2.04it/s] 32%|███▏      | 938/2971 [06:40<14:12,  2.38it/s] 32%|███▏      | 943/2971 [06:45<17:10,  1.97it/s] 32%|███▏      | 956/2971 [06:50<15:34,  2.16it/s] 33%|███▎      | 969/2971 [06:55<14:34,  2.29it/s] 33%|███▎      | 980/2971 [07:00<14:40,  2.26it/s] 34%|███▎      | 1001/2971 [07:05<11:33,  2.84it/s] 34%|███▍      | 1022/2971 [07:10<09:59,  3.25it/s] 35%|███▌      | 1047/2971 [07:15<08:29,  3.77it/s] 36%|███▌      | 1071/2971 [07:20<07:45,  4.08it/s] 37%|███▋      | 1091/2971 [07:25<07:43,  4.05it/s] 37%|███▋      | 1113/2971 [07:30<07:26,  4.16it/s] 38%|███▊      | 1132/2971 [07:35<07:34,  4.05it/s] 39%|███▉      | 1153/2971 [07:40<07:24,  4.09it/s] 40%|███▉      | 1177/2971 [07:45<06:56,  4.30it/s] 41%|████      | 1207/2971 [07:50<06:06,  4.81it/s] 42%|████▏     | 1234/2971 [07:55<05:48,  4.98it/s] 42%|████▏     | 1259/2971 [08:00<05:43,  4.99it/s] 43%|████▎     | 1274/2971 [08:05<06:26,  4.39it/s] 43%|████▎     | 1286/2971 [08:10<07:24,  3.79it/s] 44%|████▎     | 1297/2971 [08:15<08:25,  3.31it/s] 44%|████▍     | 1310/2971 [08:20<08:55,  3.10it/s] 45%|████▍     | 1329/2971 [08:25<08:16,  3.31it/s] 45%|████▌     | 1345/2971 [08:30<08:16,  3.27it/s] 46%|████▌     | 1360/2971 [08:35<08:24,  3.19it/s] 46%|████▋     | 1378/2971 [08:40<08:00,  3.31it/s] 47%|████▋     | 1386/2971 [08:45<09:26,  2.80it/s] 47%|████▋     | 1391/2971 [08:50<11:39,  2.26it/s] 47%|████▋     | 1402/2971 [08:55<11:40,  2.24it/s] 48%|████▊     | 1415/2971 [09:00<11:02,  2.35it/s] 48%|████▊     | 1423/2971 [09:05<12:09,  2.12it/s] 48%|████▊     | 1434/2971 [09:10<11:56,  2.15it/s] 49%|████▊     | 1447/2971 [09:15<11:08,  2.28it/s] 49%|████▉     | 1459/2971 [09:20<10:52,  2.32it/s] 50%|████▉     | 1476/2971 [09:25<09:26,  2.64it/s] 50%|█████     | 1490/2971 [09:30<09:11,  2.69it/s] 51%|█████     | 1511/2971 [09:35<07:44,  3.14it/s] 51%|█████     | 1522/2971 [09:40<08:27,  2.86it/s] 52%|█████▏    | 1536/2971 [09:45<08:25,  2.84it/s] 52%|█████▏    | 1550/2971 [09:50<08:22,  2.83it/s] 53%|█████▎    | 1564/2971 [09:55<08:19,  2.82it/s] 53%|█████▎    | 1582/2971 [10:00<07:35,  3.05it/s] 54%|█████▍    | 1599/2971 [10:05<07:14,  3.15it/s] 54%|█████▍    | 1617/2971 [10:10<06:51,  3.29it/s] 55%|█████▍    | 1628/2971 [10:15<07:33,  2.96it/s] 55%|█████▍    | 1631/2971 [10:20<09:55,  2.25it/s] 55%|█████▌    | 1639/2971 [10:25<10:47,  2.06it/s] 55%|█████▌    | 1644/2971 [10:30<12:43,  1.74it/s] 56%|█████▌    | 1658/2971 [10:35<10:38,  2.06it/s] 56%|█████▌    | 1667/2971 [10:40<10:59,  1.98it/s] 56%|█████▋    | 1677/2971 [10:45<10:52,  1.98it/s] 57%|█████▋    | 1681/2971 [10:50<13:11,  1.63it/s] 57%|█████▋    | 1694/2971 [10:55<11:05,  1.92it/s] 57%|█████▋    | 1707/2971 [11:00<09:55,  2.12it/s] 58%|█████▊    | 1719/2971 [11:05<09:27,  2.21it/s] 59%|█████▊    | 1741/2971 [11:10<07:09,  2.86it/s] 59%|█████▉    | 1754/2971 [11:15<07:17,  2.78it/s] 60%|█████▉    | 1771/2971 [11:20<06:44,  2.97it/s] 60%|██████    | 1784/2971 [11:25<06:55,  2.86it/s] 61%|██████    | 1804/2971 [11:30<06:04,  3.20it/s] 61%|██████    | 1814/2971 [11:35<06:47,  2.84it/s] 61%|██████▏   | 1827/2971 [11:40<06:53,  2.77it/s] 62%|██████▏   | 1846/2971 [11:45<06:05,  3.07it/s] 63%|██████▎   | 1864/2971 [11:50<05:42,  3.23it/s] 63%|██████▎   | 1881/2971 [11:55<05:32,  3.28it/s] 64%|██████▍   | 1905/2971 [12:00<04:45,  3.74it/s] 65%|██████▍   | 1929/2971 [12:05<04:17,  4.05it/s] 66%|██████▌   | 1951/2971 [12:10<04:05,  4.16it/s] 66%|██████▌   | 1968/2971 [12:15<04:15,  3.93it/s] 67%|██████▋   | 1995/2971 [12:20<03:43,  4.37it/s] 68%|██████▊   | 2021/2971 [12:25<03:25,  4.62it/s] 69%|██████▉   | 2050/2971 [12:30<03:05,  4.97it/s] 70%|██████▉   | 2078/2971 [12:35<02:53,  5.16it/s] 71%|███████   | 2106/2971 [12:40<02:43,  5.29it/s] 72%|███████▏  | 2142/2971 [12:45<02:21,  5.86it/s] 73%|███████▎  | 2175/2971 [12:50<02:10,  6.08it/s] 74%|███████▍  | 2206/2971 [12:55<02:05,  6.11it/s] 75%|███████▍  | 2226/2971 [13:00<02:16,  5.48it/s] 76%|███████▌  | 2252/2971 [13:05<02:13,  5.39it/s] 77%|███████▋  | 2276/2971 [13:10<02:13,  5.21it/s] 77%|███████▋  | 2299/2971 [13:15<02:13,  5.03it/s] 78%|███████▊  | 2328/2971 [13:20<02:02,  5.26it/s] 79%|███████▉  | 2353/2971 [13:25<01:59,  5.18it/s] 80%|████████  | 2381/2971 [13:30<01:51,  5.30it/s] 81%|████████  | 2408/2971 [13:35<01:45,  5.33it/s] 82%|████████▏ | 2436/2971 [13:40<01:38,  5.41it/s] 83%|████████▎ | 2468/2971 [13:45<01:28,  5.70it/s] 84%|████████▍ | 2495/2971 [13:50<01:24,  5.61it/s] 85%|████████▍ | 2523/2971 [13:55<01:19,  5.61it/s] 86%|████████▌ | 2551/2971 [14:00<01:14,  5.60it/s] 87%|████████▋ | 2583/2971 [14:05<01:06,  5.84it/s] 88%|████████▊ | 2611/2971 [14:10<01:02,  5.77it/s] 89%|████████▉ | 2637/2971 [14:15<00:59,  5.59it/s] 90%|████████▉ | 2662/2971 [14:20<00:57,  5.41it/s] 91%|█████████ | 2692/2971 [14:25<00:49,  5.59it/s] 92%|█████████▏| 2724/2971 [14:30<00:42,  5.83it/s] 93%|█████████▎| 2750/2971 [14:35<00:39,  5.64it/s] 94%|█████████▎| 2782/2971 [14:40<00:32,  5.87it/s] 94%|█████████▍| 2806/2971 [14:45<00:29,  5.54it/s] 95%|█████████▌| 2836/2971 [14:50<00:23,  5.68it/s] 96%|█████████▋| 2867/2971 [14:55<00:17,  5.83it/s] 97%|█████████▋| 2895/2971 [15:00<00:13,  5.76it/s] 98%|█████████▊| 2923/2971 [15:05<00:08,  5.71it/s]2024-05-30 10:01:45.229 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/ExprPresentation.dep_paths
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Jsx.dep_paths
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Jsx.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets.dep_paths
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/RbTree.dep_paths
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Dynkin.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/SelectInsertConv.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/GoalTypePanel.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/SelectionPanel.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Macro.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/InteractiveSvg.ast.json
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Rubiks.dep_paths
2024-05-30 10:01:45.230 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/SelectionPanel.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Venn.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/InteractiveSvg.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Svg.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Venn.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Plot.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Conv.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Plot.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Dynkin.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Svg.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Rubiks.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Euclidean.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Euclidean.dep_paths
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/RbTree.ast.json
2024-05-30 10:01:45.231 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/Panel/GoalTypePanel.dep_paths
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Conv.ast.json
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/Macro.dep_paths
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Component/InteractiveSvg.dep_paths
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/InteractiveSvg.dep_paths
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/SelectInsertConv.dep_paths
2024-05-30 10:01:45.232 | WARNING  | __main__:check_files:132 - Missing /tmp/tmpti9hdvcr/workspace/tactic-cheatsheet/.lake/packages/proofwidgets/.lake/build/ir/ProofWidgets/Demos/ExprPresentation.ast.json
2024-05-30 10:01:48,349	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
  0%|          | 0/2946 [00:00<?, ?it/s]  0%|          | 1/2946 [00:01<1:31:45,  1.87s/it]  0%|          | 11/2946 [00:01<06:33,  7.46it/s]   1%|          | 17/2946 [00:02<05:30,  8.85it/s]  1%|          | 24/2946 [00:02<03:27, 14.09it/s]  1%|          | 30/2946 [00:03<03:26, 14.10it/s]  1%|▏         | 38/2946 [00:03<02:20, 20.69it/s]  1%|▏         | 43/2946 [00:03<02:54, 16.62it/s]  2%|▏         | 51/2946 [00:03<02:03, 23.41it/s]  2%|▏         | 56/2946 [00:04<03:02, 15.85it/s]  2%|▏         | 60/2946 [00:04<02:39, 18.06it/s]  2%|▏         | 68/2946 [00:05<03:19, 14.41it/s]  3%|▎         | 77/2946 [00:05<02:15, 21.14it/s]  3%|▎         | 83/2946 [00:05<01:52, 25.51it/s]  3%|▎         | 88/2946 [00:06<03:48, 12.51it/s]  3%|▎         | 92/2946 [00:07<05:45,  8.27it/s]  3%|▎         | 95/2946 [00:07<05:13,  9.09it/s]  3%|▎         | 100/2946 [00:08<06:56,  6.83it/s]  3%|▎         | 102/2946 [00:08<06:21,  7.46it/s]  4%|▎         | 109/2946 [00:09<04:12, 11.21it/s]  4%|▍         | 112/2946 [00:10<07:58,  5.93it/s]  4%|▍         | 120/2946 [00:10<04:47,  9.84it/s]  4%|▍         | 130/2946 [00:10<02:53, 16.26it/s]  5%|▍         | 138/2946 [00:12<05:19,  8.80it/s]  5%|▌         | 149/2946 [00:12<03:21, 13.85it/s]  5%|▌         | 159/2946 [00:12<02:27, 18.92it/s]  6%|▌         | 171/2946 [00:12<01:42, 26.98it/s]  6%|▌         | 183/2946 [00:13<01:15, 36.41it/s]  7%|▋         | 192/2946 [00:15<04:10, 10.98it/s]  7%|▋         | 198/2946 [00:15<03:33, 12.85it/s]  7%|▋         | 209/2946 [00:15<02:29, 18.34it/s]  8%|▊         | 225/2946 [00:15<01:33, 29.17it/s]  8%|▊         | 235/2946 [00:15<01:15, 35.91it/s]  9%|▊         | 251/2946 [00:16<00:53, 50.27it/s]  9%|▉         | 262/2946 [00:18<03:45, 11.90it/s]  9%|▉         | 270/2946 [00:19<03:09, 14.09it/s]  9%|▉         | 277/2946 [00:19<02:40, 16.66it/s] 10%|▉         | 284/2946 [00:19<02:17, 19.32it/s] 10%|█         | 296/2946 [00:19<01:35, 27.81it/s] 10%|█         | 304/2946 [00:23<06:35,  6.69it/s] 11%|█         | 310/2946 [00:23<05:28,  8.03it/s] 11%|█         | 315/2946 [00:23<04:46,  9.20it/s] 11%|█         | 319/2946 [00:23<04:10, 10.47it/s] 11%|█         | 326/2946 [00:23<03:06, 14.08it/s] 11%|█▏        | 335/2946 [00:24<02:08, 20.37it/s] 12%|█▏        | 349/2946 [00:24<01:19, 32.69it/s] 12%|█▏        | 357/2946 [00:28<06:54,  6.24it/s] 12%|█▏        | 366/2946 [00:28<04:57,  8.67it/s] 13%|█▎        | 373/2946 [00:28<03:53, 11.03it/s] 13%|█▎        | 383/2946 [00:28<02:42, 15.78it/s] 13%|█▎        | 392/2946 [00:28<02:01, 21.00it/s] 14%|█▎        | 400/2946 [00:28<01:36, 26.38it/s] 14%|█▍        | 416/2946 [00:28<01:00, 41.66it/s] 15%|█▍        | 429/2946 [00:29<00:46, 54.08it/s] 15%|█▌        | 445/2946 [00:29<00:34, 71.63it/s] 16%|█▌        | 458/2946 [00:29<00:33, 74.06it/s] 16%|█▌        | 470/2946 [00:33<04:48,  8.58it/s] 16%|█▌        | 478/2946 [00:34<04:06, 10.01it/s] 16%|█▋        | 485/2946 [00:34<03:22, 12.13it/s] 17%|█▋        | 492/2946 [00:34<02:54, 14.07it/s] 17%|█▋        | 498/2946 [00:34<02:28, 16.50it/s] 17%|█▋        | 509/2946 [00:34<01:42, 23.87it/s] 18%|█▊        | 521/2946 [00:34<01:12, 33.54it/s] 18%|█▊        | 530/2946 [00:35<01:07, 35.75it/s] 18%|█▊        | 545/2946 [00:35<00:46, 51.37it/s] 19%|█▉        | 555/2946 [00:41<07:17,  5.46it/s] 19%|█▉        | 562/2946 [00:41<06:01,  6.59it/s] 19%|█▉        | 568/2946 [00:41<04:55,  8.03it/s] 19%|█▉        | 574/2946 [00:41<04:00,  9.87it/s] 20%|█▉        | 580/2946 [00:41<03:10, 12.43it/s] 20%|█▉        | 589/2946 [00:42<02:19, 16.91it/s] 20%|██        | 600/2946 [00:42<01:35, 24.61it/s] 21%|██        | 610/2946 [00:42<01:11, 32.62it/s] 21%|██        | 619/2946 [00:42<00:58, 39.66it/s] 21%|██▏       | 629/2946 [00:42<00:48, 47.68it/s] 22%|██▏       | 645/2946 [00:42<00:34, 67.01it/s] 22%|██▏       | 656/2946 [00:42<00:32, 70.62it/s] 23%|██▎       | 666/2946 [00:50<08:02,  4.73it/s] 23%|██▎       | 673/2946 [00:50<06:32,  5.79it/s] 23%|██▎       | 679/2946 [00:50<05:23,  7.00it/s] 23%|██▎       | 684/2946 [00:50<04:28,  8.41it/s] 23%|██▎       | 692/2946 [00:50<03:16, 11.50it/s] 24%|██▎       | 698/2946 [00:50<02:38, 14.21it/s] 24%|██▍       | 706/2946 [00:50<01:59, 18.82it/s] 24%|██▍       | 716/2946 [00:51<01:23, 26.67it/s] 25%|██▍       | 725/2946 [00:51<01:05, 34.05it/s] 25%|██▌       | 739/2946 [00:51<00:44, 49.34it/s] 25%|██▌       | 748/2946 [00:51<00:39, 56.32it/s] 26%|██▌       | 759/2946 [00:51<00:32, 66.86it/s] 26%|██▋       | 777/2946 [00:51<00:24, 90.05it/s] 27%|██▋       | 789/2946 [00:51<00:25, 83.93it/s] 27%|██▋       | 800/2946 [00:51<00:24, 89.27it/s] 28%|██▊       | 811/2946 [00:51<00:24, 86.59it/s] 28%|██▊       | 821/2946 [01:00<08:42,  4.07it/s] 28%|██▊       | 828/2946 [01:00<06:58,  5.07it/s] 28%|██▊       | 835/2946 [01:01<05:36,  6.28it/s] 29%|██▊       | 841/2946 [01:01<04:32,  7.73it/s] 29%|██▉       | 847/2946 [01:01<03:34,  9.77it/s] 29%|██▉       | 853/2946 [01:01<02:50, 12.28it/s] 29%|██▉       | 866/2946 [01:01<01:42, 20.35it/s] 30%|██▉       | 876/2946 [01:01<01:15, 27.44it/s] 30%|███       | 884/2946 [01:01<01:05, 31.29it/s] 30%|███       | 892/2946 [01:02<00:57, 35.75it/s] 31%|███       | 903/2946 [01:02<00:43, 46.67it/s] 31%|███       | 917/2946 [01:02<00:32, 62.60it/s] 32%|███▏      | 928/2946 [01:02<00:28, 71.79it/s] 32%|███▏      | 938/2946 [01:02<00:26, 75.64it/s] 32%|███▏      | 949/2946 [01:02<00:23, 83.22it/s] 33%|███▎      | 959/2946 [01:02<00:27, 71.25it/s] 33%|███▎      | 968/2946 [01:02<00:28, 70.30it/s] 33%|███▎      | 976/2946 [01:03<00:28, 69.81it/s] 33%|███▎      | 984/2946 [01:03<00:39, 50.24it/s] 34%|███▎      | 992/2946 [01:03<00:35, 55.79it/s] 34%|███▎      | 992/2946 [01:14<00:35, 55.79it/s] 34%|███▍      | 999/2946 [01:14<14:07,  2.30it/s] 34%|███▍      | 1001/2946 [01:15<12:57,  2.50it/s] 34%|███▍      | 1007/2946 [01:15<09:42,  3.33it/s] 34%|███▍      | 1012/2946 [01:15<07:31,  4.28it/s] 34%|███▍      | 1016/2946 [01:15<06:07,  5.25it/s] 35%|███▍      | 1020/2946 [01:15<05:05,  6.30it/s] 35%|███▍      | 1023/2946 [01:16<04:22,  7.33it/s] 35%|███▍      | 1026/2946 [01:16<03:43,  8.61it/s] 35%|███▍      | 1030/2946 [01:16<02:50, 11.22it/s] 35%|███▌      | 1040/2946 [01:16<01:35, 20.01it/s] 36%|███▌      | 1046/2946 [01:16<01:15, 25.08it/s] 36%|███▌      | 1057/2946 [01:16<00:49, 37.81it/s] 36%|███▌      | 1065/2946 [01:16<00:43, 43.58it/s] 36%|███▋      | 1072/2946 [01:17<00:44, 41.90it/s] 37%|███▋      | 1084/2946 [01:17<00:33, 55.65it/s] 37%|███▋      | 1102/2946 [01:17<00:23, 80.10it/s] 38%|███▊      | 1112/2946 [01:17<00:23, 79.55it/s] 38%|███▊      | 1122/2946 [01:17<00:22, 80.13it/s] 38%|███▊      | 1132/2946 [01:17<00:21, 84.53it/s] 39%|███▉      | 1142/2946 [01:17<00:21, 82.15it/s] 39%|███▉      | 1151/2946 [01:17<00:27, 64.84it/s] 39%|███▉      | 1159/2946 [01:18<00:28, 62.77it/s] 39%|███▉      | 1159/2946 [01:32<00:28, 62.77it/s] 39%|███▉      | 1161/2946 [01:32<18:12,  1.63it/s] 40%|███▉      | 1165/2946 [01:32<14:49,  2.00it/s] 40%|███▉      | 1171/2946 [01:32<10:51,  2.72it/s] 40%|███▉      | 1176/2946 [01:32<08:15,  3.57it/s] 40%|████      | 1181/2946 [01:33<06:23,  4.60it/s] 40%|████      | 1189/2946 [01:33<04:04,  7.18it/s] 41%|████      | 1195/2946 [01:33<03:07,  9.36it/s] 41%|████      | 1205/2946 [01:33<01:57, 14.82it/s] 41%|████      | 1212/2946 [01:33<01:33, 18.53it/s] 41%|████▏     | 1218/2946 [01:33<01:16, 22.47it/s] 42%|████▏     | 1227/2946 [01:33<00:56, 30.19it/s] 42%|████▏     | 1241/2946 [01:34<00:36, 46.28it/s] 43%|████▎     | 1258/2946 [01:34<00:26, 63.94it/s] 43%|████▎     | 1269/2946 [01:34<00:23, 71.20it/s] 43%|████▎     | 1280/2946 [01:34<00:21, 78.26it/s] 44%|████▍     | 1302/2946 [01:34<00:14, 110.49it/s] 45%|████▍     | 1316/2946 [01:34<00:15, 103.34it/s] 45%|████▌     | 1329/2946 [01:34<00:16, 96.40it/s]  46%|████▌     | 1341/2946 [01:34<00:16, 97.82it/s] 46%|████▌     | 1352/2946 [01:35<00:16, 95.71it/s] 46%|████▋     | 1363/2946 [01:35<00:17, 89.89it/s] 47%|████▋     | 1373/2946 [01:35<00:20, 77.36it/s] 47%|████▋     | 1382/2946 [01:35<00:21, 73.71it/s] 47%|████▋     | 1390/2946 [01:35<00:25, 62.16it/s] 47%|████▋     | 1399/2946 [01:35<00:24, 62.07it/s] 48%|████▊     | 1408/2946 [01:35<00:23, 65.95it/s] 48%|████▊     | 1408/2946 [01:53<00:23, 65.95it/s] 48%|████▊     | 1410/2946 [01:53<19:08,  1.34it/s] 48%|████▊     | 1416/2946 [01:53<14:11,  1.80it/s] 48%|████▊     | 1423/2946 [01:54<10:10,  2.49it/s] 49%|████▊     | 1429/2946 [01:54<07:37,  3.31it/s] 49%|████▊     | 1435/2946 [01:54<05:38,  4.47it/s] 49%|████▉     | 1443/2946 [01:54<03:46,  6.63it/s] 49%|████▉     | 1449/2946 [01:54<02:52,  8.68it/s] 49%|████▉     | 1456/2946 [01:54<02:07, 11.70it/s] 50%|████▉     | 1462/2946 [01:54<01:42, 14.43it/s] 50%|████▉     | 1469/2946 [01:55<01:19, 18.52it/s] 50%|█████     | 1480/2946 [01:55<00:52, 27.67it/s] 51%|█████     | 1493/2946 [01:55<00:35, 40.57it/s] 51%|█████     | 1501/2946 [01:55<00:34, 42.48it/s] 51%|█████▏    | 1511/2946 [01:55<00:28, 50.75it/s] 52%|█████▏    | 1519/2946 [01:55<00:26, 54.05it/s] 52%|█████▏    | 1533/2946 [01:55<00:19, 71.30it/s] 52%|█████▏    | 1544/2946 [01:55<00:17, 79.75it/s] 53%|█████▎    | 1555/2946 [01:55<00:16, 86.77it/s] 53%|█████▎    | 1566/2946 [01:56<00:15, 91.02it/s] 54%|█████▎    | 1577/2946 [01:56<00:15, 89.56it/s] 54%|█████▍    | 1587/2946 [01:56<00:16, 82.78it/s] 54%|█████▍    | 1596/2946 [01:56<00:17, 78.26it/s] 54%|█████▍    | 1605/2946 [01:56<00:19, 67.60it/s] 55%|█████▍    | 1613/2946 [01:56<00:23, 56.42it/s] 55%|█████▌    | 1626/2946 [01:56<00:19, 68.78it/s] 56%|█████▌    | 1637/2946 [01:57<00:16, 77.71it/s] 56%|█████▌    | 1646/2946 [01:57<00:16, 78.10it/s] 56%|█████▌    | 1655/2946 [01:57<00:18, 68.64it/s] 56%|█████▋    | 1663/2946 [01:57<00:19, 65.59it/s] 57%|█████▋    | 1670/2946 [01:57<00:21, 60.48it/s] 57%|█████▋    | 1681/2946 [01:57<00:17, 70.76it/s] 57%|█████▋    | 1689/2946 [01:57<00:18, 68.93it/s] 58%|█████▊    | 1697/2946 [01:58<00:20, 60.69it/s] 58%|█████▊    | 1697/2946 [02:20<00:20, 60.69it/s] 58%|█████▊    | 1699/2946 [02:20<21:02,  1.01s/it] 58%|█████▊    | 1703/2946 [02:20<16:47,  1.23it/s] 58%|█████▊    | 1709/2946 [02:20<11:57,  1.72it/s] 58%|█████▊    | 1714/2946 [02:20<08:54,  2.30it/s] 58%|█████▊    | 1722/2946 [02:20<05:37,  3.62it/s] 59%|█████▊    | 1727/2946 [02:21<04:24,  4.60it/s] 59%|█████▉    | 1731/2946 [02:21<03:33,  5.70it/s] 59%|█████▉    | 1736/2946 [02:21<02:48,  7.18it/s] 59%|█████▉    | 1743/2946 [02:21<01:53, 10.62it/s] 59%|█████▉    | 1751/2946 [02:21<01:16, 15.65it/s] 60%|█████▉    | 1763/2946 [02:21<00:46, 25.19it/s] 60%|██████    | 1779/2946 [02:21<00:28, 40.54it/s] 61%|██████    | 1791/2946 [02:22<00:22, 51.78it/s] 61%|██████    | 1801/2946 [02:22<00:20, 55.96it/s] 61%|██████▏   | 1811/2946 [02:22<00:18, 60.93it/s] 62%|██████▏   | 1820/2946 [02:22<00:18, 62.46it/s] 62%|██████▏   | 1829/2946 [02:22<00:20, 54.71it/s] 62%|██████▏   | 1836/2946 [02:22<00:23, 48.13it/s] 63%|██████▎   | 1844/2946 [02:22<00:20, 53.58it/s] 63%|██████▎   | 1851/2946 [02:23<00:21, 50.70it/s] 63%|██████▎   | 1857/2946 [02:23<00:20, 52.60it/s] 63%|██████▎   | 1863/2946 [02:23<00:24, 44.52it/s] 63%|██████▎   | 1869/2946 [02:23<00:26, 40.93it/s] 64%|██████▍   | 1879/2946 [02:23<00:20, 51.02it/s] 64%|██████▍   | 1885/2946 [02:23<00:21, 49.13it/s] 64%|██████▍   | 1893/2946 [02:23<00:19, 54.86it/s] 64%|██████▍   | 1899/2946 [02:24<00:19, 54.77it/s] 65%|██████▍   | 1909/2946 [02:24<00:17, 57.88it/s] 65%|██████▌   | 1917/2946 [02:24<00:16, 62.72it/s] 66%|██████▌   | 1930/2946 [02:24<00:12, 78.28it/s] 66%|██████▌   | 1939/2946 [02:24<00:13, 73.43it/s] 66%|██████▌   | 1947/2946 [02:24<00:14, 70.44it/s] 66%|██████▋   | 1957/2946 [02:24<00:14, 70.61it/s] 67%|██████▋   | 1965/2946 [02:24<00:13, 72.21it/s] 67%|██████▋   | 1976/2946 [02:25<00:12, 79.37it/s] 67%|██████▋   | 1986/2946 [02:25<00:11, 82.41it/s] 68%|██████▊   | 1995/2946 [02:25<00:12, 77.16it/s] 68%|██████▊   | 2003/2946 [02:25<00:14, 65.31it/s] 68%|██████▊   | 2003/2946 [02:52<00:14, 65.31it/s] 68%|██████▊   | 2007/2946 [02:52<17:08,  1.10s/it] 68%|██████▊   | 2009/2946 [02:52<15:30,  1.01it/s] 68%|██████▊   | 2015/2946 [02:53<10:53,  1.43it/s] 69%|██████▊   | 2020/2946 [02:53<08:04,  1.91it/s] 69%|██████▉   | 2026/2946 [02:53<05:35,  2.74it/s] 69%|██████▉   | 2031/2946 [02:53<04:16,  3.57it/s] 69%|██████▉   | 2036/2946 [02:53<03:09,  4.80it/s] 69%|██████▉   | 2044/2946 [02:53<01:59,  7.57it/s] 70%|██████▉   | 2050/2946 [02:53<01:33,  9.63it/s] 70%|███████   | 2064/2946 [02:54<00:50, 17.48it/s] 70%|███████   | 2071/2946 [02:54<00:41, 21.26it/s] 71%|███████   | 2080/2946 [02:54<00:31, 27.91it/s] 71%|███████   | 2090/2946 [02:54<00:24, 35.53it/s] 71%|███████▏  | 2102/2946 [02:54<00:17, 46.96it/s] 72%|███████▏  | 2110/2946 [02:54<00:17, 47.65it/s] 72%|███████▏  | 2122/2946 [02:54<00:13, 60.66it/s] 72%|███████▏  | 2134/2946 [02:54<00:11, 72.59it/s] 73%|███████▎  | 2144/2946 [02:55<00:14, 54.62it/s] 73%|███████▎  | 2152/2946 [02:55<00:15, 51.82it/s] 73%|███████▎  | 2159/2946 [02:55<00:15, 51.62it/s] 74%|███████▎  | 2166/2946 [02:55<00:17, 45.87it/s] 74%|███████▎  | 2172/2946 [02:55<00:16, 47.86it/s] 74%|███████▍  | 2180/2946 [02:56<00:15, 49.96it/s] 74%|███████▍  | 2190/2946 [02:56<00:12, 60.20it/s] 75%|███████▍  | 2203/2946 [02:56<00:09, 76.43it/s] 75%|███████▌  | 2218/2946 [02:56<00:07, 93.44it/s] 76%|███████▌  | 2231/2946 [02:56<00:07, 97.58it/s] 76%|███████▌  | 2242/2946 [02:56<00:07, 97.22it/s] 76%|███████▋  | 2253/2946 [02:56<00:09, 71.11it/s] 77%|███████▋  | 2262/2946 [02:57<00:11, 58.75it/s] 77%|███████▋  | 2270/2946 [02:57<00:13, 51.29it/s] 77%|███████▋  | 2278/2946 [02:57<00:12, 53.05it/s] 78%|███████▊  | 2289/2946 [02:57<00:11, 59.08it/s] 78%|███████▊  | 2296/2946 [02:57<00:12, 54.02it/s] 78%|███████▊  | 2302/2946 [02:57<00:11, 54.62it/s] 78%|███████▊  | 2308/2946 [02:57<00:11, 53.88it/s] 79%|███████▊  | 2319/2946 [02:58<00:09, 64.71it/s] 79%|███████▉  | 2327/2946 [02:58<00:10, 57.17it/s] 79%|███████▉  | 2334/2946 [02:58<00:11, 52.21it/s] 79%|███████▉  | 2340/2946 [02:58<00:14, 40.51it/s] 80%|███████▉  | 2347/2946 [02:58<00:13, 45.82it/s] 80%|███████▉  | 2353/2946 [02:58<00:12, 46.83it/s] 80%|████████  | 2364/2946 [02:59<00:09, 58.58it/s] 81%|████████  | 2372/2946 [02:59<00:09, 63.18it/s] 81%|████████▏ | 2394/2946 [02:59<00:05, 102.32it/s] 82%|████████▏ | 2418/2946 [02:59<00:03, 136.45it/s] 82%|████████▏ | 2418/2946 [03:32<00:03, 136.45it/s] 82%|████████▏ | 2425/2946 [03:32<06:37,  1.31it/s]  82%|████████▏ | 2427/2946 [03:32<06:13,  1.39it/s] 83%|████████▎ | 2438/2946 [03:32<04:10,  2.03it/s] 83%|████████▎ | 2447/2946 [03:33<03:01,  2.74it/s] 83%|████████▎ | 2455/2946 [03:33<02:17,  3.57it/s] 84%|████████▎ | 2461/2946 [03:33<01:50,  4.38it/s] 84%|████████▎ | 2467/2946 [03:33<01:25,  5.60it/s] 84%|████████▍ | 2473/2946 [03:33<01:05,  7.24it/s] 84%|████████▍ | 2480/2946 [03:33<00:47,  9.86it/s] 84%|████████▍ | 2488/2946 [03:34<00:33, 13.59it/s] 85%|████████▍ | 2499/2946 [03:34<00:21, 20.63it/s] 85%|████████▌ | 2507/2946 [03:34<00:18, 23.88it/s] 86%|████████▌ | 2519/2946 [03:34<00:12, 33.88it/s] 86%|████████▌ | 2532/2946 [03:34<00:09, 42.76it/s] 86%|████████▋ | 2541/2946 [03:34<00:08, 49.47it/s] 87%|████████▋ | 2549/2946 [03:34<00:07, 52.90it/s] 87%|████████▋ | 2563/2946 [03:34<00:05, 69.67it/s] 87%|████████▋ | 2573/2946 [03:35<00:05, 62.86it/s] 88%|████████▊ | 2586/2946 [03:35<00:04, 74.06it/s] 88%|████████▊ | 2596/2946 [03:35<00:04, 72.12it/s] 88%|████████▊ | 2605/2946 [03:35<00:04, 72.21it/s] 89%|████████▉ | 2622/2946 [03:35<00:03, 94.46it/s] 89%|████████▉ | 2633/2946 [03:35<00:03, 82.86it/s] 90%|████████▉ | 2643/2946 [03:35<00:03, 85.58it/s] 90%|█████████ | 2653/2946 [03:36<00:04, 64.81it/s] 90%|█████████ | 2661/2946 [03:36<00:04, 64.18it/s] 91%|█████████ | 2669/2946 [03:36<00:04, 61.42it/s] 91%|█████████ | 2680/2946 [03:36<00:03, 68.56it/s] 91%|█████████ | 2688/2946 [03:36<00:03, 68.10it/s] 92%|█████████▏| 2696/2946 [03:36<00:03, 64.29it/s] 92%|█████████▏| 2703/2946 [03:37<00:05, 48.12it/s] 92%|█████████▏| 2713/2946 [03:37<00:04, 56.60it/s] 92%|█████████▏| 2721/2946 [03:37<00:03, 60.02it/s] 93%|█████████▎| 2731/2946 [03:37<00:03, 66.68it/s] 93%|█████████▎| 2744/2946 [03:37<00:02, 76.77it/s] 93%|█████████▎| 2753/2946 [03:37<00:03, 64.06it/s] 94%|█████████▎| 2761/2946 [03:38<00:03, 46.30it/s] 94%|█████████▍| 2768/2946 [03:38<00:03, 46.08it/s] 94%|█████████▍| 2774/2946 [03:38<00:04, 40.40it/s] 94%|█████████▍| 2780/2946 [03:38<00:03, 43.90it/s] 95%|█████████▍| 2787/2946 [03:38<00:03, 48.46it/s] 95%|█████████▍| 2793/2946 [03:38<00:03, 47.90it/s] 95%|█████████▌| 2799/2946 [03:38<00:02, 50.27it/s] 95%|█████████▌| 2805/2946 [03:39<00:04, 34.42it/s] 95%|█████████▌| 2813/2946 [03:39<00:03, 42.27it/s] 96%|█████████▌| 2824/2946 [03:39<00:02, 56.19it/s] 96%|█████████▌| 2831/2946 [03:39<00:02, 56.67it/s] 96%|█████████▋| 2842/2946 [03:39<00:01, 67.81it/s] 97%|█████████▋| 2850/2946 [03:39<00:01, 63.21it/s] 97%|█████████▋| 2857/2946 [03:39<00:01, 61.99it/s] 97%|█████████▋| 2864/2946 [03:40<00:01, 60.72it/s] 97%|█████████▋| 2871/2946 [03:40<00:01, 57.26it/s] 98%|█████████▊| 2881/2946 [03:40<00:00, 67.01it/s] 98%|█████████▊| 2889/2946 [03:40<00:00, 67.72it/s] 98%|█████████▊| 2889/2946 [04:20<00:00, 67.72it/s] 98%|█████████▊| 2893/2946 [04:20<01:32,  1.75s/it] 98%|█████████▊| 2894/2946 [04:20<01:26,  1.66s/it] 98%|█████████▊| 2900/2946 [04:21<00:52,  1.13s/it] 99%|█████████▊| 2907/2946 [04:21<00:28,  1.36it/s] 99%|█████████▉| 2912/2946 [04:21<00:18,  1.83it/s] 99%|█████████▉| 2917/2946 [04:21<00:11,  2.46it/s] 99%|█████████▉| 2921/2946 [04:21<00:07,  3.18it/s] 99%|█████████▉| 2925/2946 [04:21<00:05,  4.10it/s] 99%|█████████▉| 2929/2946 [04:22<00:03,  5.31it/s]100%|█████████▉| 2933/2946 [04:22<00:01,  6.89it/s]100%|█████████▉| 2943/2946 [04:22<00:00, 12.74it/s]100%|██████████| 2946/2946 [04:22<00:00, 11.21it/s]
Following Github server redirection from /repos/leanprover/std4 to /repositories/529900532
Following Github server redirection from /repos/mhuisi/lean4-cli to /repositories/341363356
2024-05-30 10:07:00.809 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='10d88b52fa8d717fa8e29af3abf0c3a2bf175497') relies on an unsupported Lean version: 41697dcf6cab7ec82723ba404f2bda7a4526bb2b
2024-05-30 10:07:05.920 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/xubaiw/CMark.lean', commit='0077cbbaa92abf855fc1c0413e158ffd8195ec77') relies on an unsupported Lean version: 8fc1af650ad6d31cf766d9bc84119149330e7d4e
2024-05-30 10:07:16.316 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/fgdorais/lean4-unicode-basic', commit='280d75fdfe7be8eb337be7f1bf8479b4aac09f71') relies on an unsupported Lean version: 0d7051497ea09b2b4a4ef608e371b8f317487c3c
2024-05-30 10:07:20.096 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/mhuisi/lean4-cli', commit='39229f3630d734af7d9cfb5937ddc6b41d3aa6aa') relies on an unsupported Lean version: 216d2460e0adec8317fdeeb6f2543cb7442564fd
2024-05-30 10:07:25.586 | WARNING  | lean_dojo.data_extraction.lean:__post_init__:442 - LeanGitRepo(url='https://github.com/hargonix/LeanInk', commit='2447df5cc6e48eb965c3c3fba87e46d353b5e9f1') relies on an unsupported Lean version: f6cd6c069587cfe62dd68cb6330f9ad794a56724
2024-05-30 10:07:55,301	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
  0%|          | 0/2946 [00:00<?, ?it/s]  0%|          | 1/2946 [00:01<1:06:53,  1.36s/it]  0%|          | 4/2946 [00:01<14:22,  3.41it/s]    0%|          | 9/2946 [00:01<05:36,  8.72it/s]  1%|          | 16/2946 [00:01<02:56, 16.60it/s]  1%|          | 24/2946 [00:01<01:57, 24.78it/s]  1%|          | 29/2946 [00:02<01:54, 25.51it/s]  1%|▏         | 37/2946 [00:02<01:25, 34.11it/s]  1%|▏         | 42/2946 [00:02<01:23, 34.87it/s]  2%|▏         | 49/2946 [00:02<01:13, 39.40it/s]  2%|▏         | 54/2946 [00:02<01:24, 34.26it/s]  2%|▏         | 58/2946 [00:02<01:49, 26.30it/s]  2%|▏         | 62/2946 [00:03<02:03, 23.40it/s]  2%|▏         | 65/2946 [00:03<02:43, 17.57it/s]  2%|▏         | 70/2946 [00:03<02:42, 17.65it/s]  3%|▎         | 77/2946 [00:03<01:56, 24.62it/s]  3%|▎         | 81/2946 [00:04<02:50, 16.79it/s]  3%|▎         | 87/2946 [00:04<02:10, 21.95it/s]  3%|▎         | 94/2946 [00:04<01:38, 29.09it/s]  3%|▎         | 99/2946 [00:04<01:28, 32.16it/s]  4%|▎         | 107/2946 [00:05<01:57, 24.13it/s]  4%|▍         | 118/2946 [00:05<01:21, 34.62it/s]  4%|▍         | 124/2946 [00:05<01:18, 35.89it/s]  4%|▍         | 129/2946 [00:05<01:17, 36.26it/s]  5%|▍         | 139/2946 [00:05<01:00, 46.64it/s]  5%|▍         | 145/2946 [00:05<00:57, 48.61it/s]  5%|▌         | 152/2946 [00:05<00:54, 51.39it/s]  5%|▌         | 159/2946 [00:06<00:50, 55.74it/s]  6%|▌         | 166/2946 [00:06<00:57, 48.20it/s]  6%|▌         | 172/2946 [00:06<01:04, 42.68it/s]  6%|▌         | 178/2946 [00:06<01:00, 45.80it/s]  6%|▋         | 185/2946 [00:06<00:55, 49.93it/s]  7%|▋         | 197/2946 [00:06<00:41, 66.42it/s]  7%|▋         | 205/2946 [00:06<00:42, 65.21it/s]  7%|▋         | 215/2946 [00:06<00:36, 73.93it/s]  8%|▊         | 225/2946 [00:07<00:35, 76.56it/s]  8%|▊         | 233/2946 [00:07<00:54, 49.63it/s]  8%|▊         | 240/2946 [00:07<01:20, 33.45it/s]  8%|▊         | 246/2946 [00:07<01:12, 37.23it/s]  9%|▊         | 252/2946 [00:08<01:26, 30.97it/s]  9%|▉         | 259/2946 [00:08<01:12, 37.02it/s]  9%|▉         | 267/2946 [00:08<01:03, 41.93it/s]  9%|▉         | 276/2946 [00:08<01:04, 41.53it/s] 10%|▉         | 281/2946 [00:09<01:47, 24.70it/s] 10%|▉         | 286/2946 [00:09<02:00, 21.99it/s] 10%|▉         | 291/2946 [00:09<01:44, 25.52it/s] 10%|█         | 295/2946 [00:09<01:45, 25.14it/s] 10%|█         | 302/2946 [00:09<01:23, 31.83it/s] 10%|█         | 309/2946 [00:09<01:07, 38.96it/s] 11%|█         | 319/2946 [00:10<00:54, 47.89it/s] 11%|█         | 325/2946 [00:10<00:56, 46.56it/s] 11%|█         | 331/2946 [00:10<01:04, 40.58it/s] 11%|█▏        | 338/2946 [00:10<00:58, 44.95it/s] 12%|█▏        | 343/2946 [00:10<01:05, 39.50it/s] 12%|█▏        | 349/2946 [00:10<00:59, 43.82it/s] 12%|█▏        | 355/2946 [00:10<00:57, 44.77it/s] 12%|█▏        | 362/2946 [00:11<00:54, 47.69it/s] 12%|█▏        | 368/2946 [00:11<00:51, 50.30it/s] 13%|█▎        | 377/2946 [00:11<00:44, 57.50it/s] 13%|█▎        | 388/2946 [00:11<00:36, 70.08it/s] 13%|█▎        | 396/2946 [00:11<00:37, 67.14it/s] 14%|█▍        | 406/2946 [00:11<00:38, 66.18it/s] 14%|█▍        | 417/2946 [00:11<00:33, 75.72it/s] 14%|█▍        | 425/2946 [00:11<00:38, 64.80it/s] 15%|█▍        | 433/2946 [00:12<00:36, 68.18it/s] 15%|█▍        | 441/2946 [00:12<00:56, 44.45it/s] 15%|█▌        | 447/2946 [00:12<01:18, 31.91it/s] 15%|█▌        | 454/2946 [00:12<01:15, 32.89it/s] 16%|█▌        | 459/2946 [00:13<01:39, 25.09it/s] 16%|█▌        | 464/2946 [00:13<01:27, 28.38it/s] 16%|█▌        | 468/2946 [00:13<01:31, 26.96it/s] 16%|█▌        | 472/2946 [00:13<01:25, 28.89it/s] 16%|█▌        | 478/2946 [00:13<01:12, 34.22it/s] 16%|█▋        | 486/2946 [00:13<00:58, 41.83it/s] 17%|█▋        | 492/2946 [00:14<01:09, 35.28it/s] 17%|█▋        | 498/2946 [00:14<01:02, 39.39it/s] 17%|█▋        | 503/2946 [00:14<01:02, 39.23it/s] 17%|█▋        | 511/2946 [00:14<00:50, 47.85it/s] 18%|█▊        | 521/2946 [00:14<00:43, 55.70it/s] 18%|█▊        | 527/2946 [00:14<01:07, 35.75it/s] 18%|█▊        | 532/2946 [00:15<01:22, 29.30it/s] 18%|█▊        | 536/2946 [00:15<01:23, 29.03it/s] 18%|█▊        | 540/2946 [00:15<01:42, 23.57it/s] 19%|█▊        | 546/2946 [00:15<01:23, 28.60it/s] 19%|█▊        | 550/2946 [00:15<01:25, 27.86it/s] 19%|█▉        | 558/2946 [00:16<01:22, 28.87it/s] 19%|█▉        | 565/2946 [00:16<01:10, 33.76it/s] 20%|█▉        | 575/2946 [00:16<00:52, 45.20it/s] 20%|█▉        | 581/2946 [00:16<01:01, 38.68it/s] 20%|█▉        | 589/2946 [00:16<00:51, 45.49it/s] 20%|██        | 598/2946 [00:16<00:45, 51.20it/s] 21%|██        | 608/2946 [00:17<00:38, 61.48it/s] 21%|██        | 619/2946 [00:17<00:32, 71.60it/s] 21%|██▏       | 627/2946 [00:17<00:35, 65.99it/s] 22%|██▏       | 635/2946 [00:17<00:39, 59.26it/s] 22%|██▏       | 642/2946 [00:17<00:59, 38.78it/s] 22%|██▏       | 648/2946 [00:18<01:15, 30.51it/s] 22%|██▏       | 653/2946 [00:18<01:16, 29.85it/s] 22%|██▏       | 657/2946 [00:18<01:14, 30.58it/s] 23%|██▎       | 663/2946 [00:18<01:09, 33.03it/s] 23%|██▎       | 667/2946 [00:18<01:06, 34.10it/s] 23%|██▎       | 673/2946 [00:18<00:59, 38.27it/s](raylet) [2024-05-30 10:08:15,520 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 94368907264; capacity: 1887507697664. Object creation will fail if spilling is required.
 23%|██▎       | 678/2946 [00:18<01:00, 37.52it/s] 23%|██▎       | 684/2946 [00:19<00:55, 40.99it/s] 23%|██▎       | 692/2946 [00:19<00:45, 50.01it/s] 24%|██▎       | 698/2946 [00:19<00:51, 43.78it/s] 24%|██▍       | 710/2946 [00:19<00:43, 50.96it/s] 25%|██▍       | 722/2946 [00:19<00:33, 65.64it/s] 25%|██▍       | 730/2946 [00:19<00:32, 69.01it/s] 25%|██▌       | 742/2946 [00:19<00:27, 80.24it/s] 25%|██▌       | 751/2946 [00:20<00:34, 62.96it/s] 26%|██▌       | 759/2946 [00:20<00:40, 54.18it/s] 26%|██▌       | 766/2946 [00:20<00:39, 54.59it/s] 26%|██▋       | 774/2946 [00:20<00:36, 59.94it/s] 27%|██▋       | 781/2946 [00:20<00:39, 54.48it/s] 27%|██▋       | 788/2946 [00:20<00:39, 54.05it/s] 27%|██▋       | 794/2946 [00:20<00:45, 47.47it/s] 27%|██▋       | 800/2946 [00:21<01:09, 30.91it/s] 27%|██▋       | 805/2946 [00:21<01:17, 27.45it/s] 27%|██▋       | 809/2946 [00:21<01:26, 24.62it/s] 28%|██▊       | 813/2946 [00:21<01:19, 26.73it/s] 28%|██▊       | 817/2946 [00:22<01:13, 28.90it/s] 28%|██▊       | 821/2946 [00:22<01:14, 28.54it/s] 28%|██▊       | 827/2946 [00:22<01:04, 32.74it/s] 28%|██▊       | 835/2946 [00:22<00:54, 39.05it/s] 29%|██▊       | 841/2946 [00:22<00:48, 43.25it/s] 29%|██▉       | 847/2946 [00:22<00:46, 45.27it/s] 29%|██▉       | 853/2946 [00:22<00:53, 39.30it/s] 29%|██▉       | 859/2946 [00:23<00:48, 42.85it/s] 29%|██▉       | 868/2946 [00:23<00:39, 53.26it/s] 30%|██▉       | 876/2946 [00:23<00:34, 59.79it/s] 30%|███       | 884/2946 [00:23<00:33, 61.98it/s] 30%|███       | 892/2946 [00:23<00:32, 64.00it/s] 31%|███       | 901/2946 [00:23<00:30, 67.31it/s] 31%|███       | 909/2946 [00:23<00:29, 68.00it/s] 31%|███       | 918/2946 [00:23<00:28, 71.25it/s] 31%|███▏      | 926/2946 [00:23<00:34, 59.09it/s] 32%|███▏      | 933/2946 [00:24<00:42, 47.41it/s] 32%|███▏      | 939/2946 [00:24<00:41, 48.31it/s] 32%|███▏      | 948/2946 [00:24<00:36, 55.42it/s] 32%|███▏      | 954/2946 [00:24<00:52, 37.79it/s] 33%|███▎      | 960/2946 [00:24<00:47, 41.72it/s] 33%|███▎      | 966/2946 [00:25<00:52, 37.70it/s] 33%|███▎      | 971/2946 [00:25<01:22, 24.06it/s] 33%|███▎      | 975/2946 [00:25<01:36, 20.51it/s] 33%|███▎      | 978/2946 [00:26<01:45, 18.66it/s] 33%|███▎      | 981/2946 [00:26<01:40, 19.46it/s] 33%|███▎      | 984/2946 [00:26<02:01, 16.10it/s] 33%|███▎      | 986/2946 [00:26<02:09, 15.10it/s] 34%|███▎      | 989/2946 [00:26<02:02, 16.02it/s] 34%|███▎      | 991/2946 [00:27<02:27, 13.25it/s] 34%|███▎      | 993/2946 [00:27<02:42, 12.02it/s] 34%|███▍      | 997/2946 [00:27<02:10, 14.97it/s] 34%|███▍      | 1004/2946 [00:27<01:18, 24.59it/s] 34%|███▍      | 1009/2946 [00:27<01:11, 26.92it/s] 34%|███▍      | 1013/2946 [00:27<01:09, 27.83it/s] 35%|███▍      | 1021/2946 [00:27<00:50, 38.37it/s] 35%|███▍      | 1028/2946 [00:28<00:42, 45.08it/s] 35%|███▌      | 1034/2946 [00:28<00:44, 42.97it/s] 35%|███▌      | 1039/2946 [00:28<01:00, 31.53it/s] 36%|███▌      | 1048/2946 [00:28<00:45, 41.41it/s] 36%|███▌      | 1056/2946 [00:28<00:38, 49.42it/s] 36%|███▋      | 1070/2946 [00:28<00:27, 68.02it/s](raylet) [2024-05-30 10:08:25,529 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 94128123904; capacity: 1887507697664. Object creation will fail if spilling is required.
 37%|███▋      | 1078/2946 [00:28<00:30, 60.60it/s] 37%|███▋      | 1085/2946 [00:29<00:30, 61.62it/s] 37%|███▋      | 1092/2946 [00:29<00:31, 58.01it/s] 37%|███▋      | 1099/2946 [00:29<00:30, 60.58it/s] 38%|███▊      | 1106/2946 [00:29<00:33, 55.26it/s] 38%|███▊      | 1113/2946 [00:29<00:31, 58.51it/s] 38%|███▊      | 1120/2946 [00:29<00:41, 43.86it/s] 38%|███▊      | 1126/2946 [00:29<00:43, 41.77it/s] 38%|███▊      | 1131/2946 [00:30<00:47, 38.56it/s] 39%|███▊      | 1136/2946 [00:30<01:00, 30.13it/s] 39%|███▊      | 1140/2946 [00:30<01:28, 20.36it/s] 39%|███▉      | 1143/2946 [00:31<01:35, 18.96it/s] 39%|███▉      | 1147/2946 [00:31<02:02, 14.66it/s] 39%|███▉      | 1152/2946 [00:31<01:40, 17.79it/s] 39%|███▉      | 1160/2946 [00:31<01:11, 24.95it/s] 40%|███▉      | 1164/2946 [00:31<01:17, 23.03it/s] 40%|███▉      | 1168/2946 [00:32<01:09, 25.55it/s] 40%|███▉      | 1177/2946 [00:32<00:50, 34.69it/s] 40%|████      | 1182/2946 [00:32<00:56, 31.21it/s] 40%|████      | 1186/2946 [00:32<00:54, 32.45it/s] 41%|████      | 1194/2946 [00:32<00:42, 41.05it/s] 41%|████      | 1199/2946 [00:32<00:48, 36.17it/s] 41%|████      | 1213/2946 [00:32<00:29, 58.21it/s] 42%|████▏     | 1223/2946 [00:33<00:25, 66.32it/s] 42%|████▏     | 1231/2946 [00:33<00:32, 52.59it/s] 42%|████▏     | 1239/2946 [00:33<00:29, 57.47it/s] 42%|████▏     | 1246/2946 [00:33<00:29, 57.27it/s] 43%|████▎     | 1257/2946 [00:33<00:24, 69.01it/s] 43%|████▎     | 1273/2946 [00:33<00:19, 87.51it/s] 44%|████▎     | 1284/2946 [00:33<00:23, 72.04it/s] 44%|████▍     | 1293/2946 [00:34<00:24, 67.38it/s] 44%|████▍     | 1301/2946 [00:34<00:26, 61.91it/s] 44%|████▍     | 1308/2946 [00:34<00:26, 62.39it/s] 45%|████▍     | 1315/2946 [00:34<00:26, 60.88it/s] 45%|████▍     | 1322/2946 [00:34<00:27, 58.89it/s] 45%|████▌     | 1329/2946 [00:34<00:30, 53.38it/s] 45%|████▌     | 1335/2946 [00:34<00:32, 50.18it/s] 46%|████▌     | 1341/2946 [00:35<00:33, 48.06it/s] 46%|████▌     | 1346/2946 [00:35<00:37, 42.58it/s] 46%|████▌     | 1352/2946 [00:35<00:34, 45.89it/s] 46%|████▌     | 1357/2946 [00:35<00:40, 39.37it/s] 46%|████▌     | 1362/2946 [00:35<00:43, 36.76it/s] 46%|████▋     | 1367/2946 [00:35<00:40, 39.42it/s] 47%|████▋     | 1373/2946 [00:35<00:35, 44.02it/s] 47%|████▋     | 1378/2946 [00:36<00:35, 43.70it/s] 47%|████▋     | 1383/2946 [00:36<00:34, 44.88it/s] 47%|████▋     | 1388/2946 [00:36<01:07, 23.10it/s] 47%|████▋     | 1392/2946 [00:36<01:07, 23.01it/s] 47%|████▋     | 1396/2946 [00:37<01:16, 20.27it/s] 47%|████▋     | 1399/2946 [00:37<01:11, 21.52it/s] 48%|████▊     | 1404/2946 [00:37<01:11, 21.58it/s] 48%|████▊     | 1412/2946 [00:37<00:55, 27.79it/s] 48%|████▊     | 1418/2946 [00:37<00:51, 29.39it/s] 48%|████▊     | 1422/2946 [00:37<00:49, 30.67it/s] 48%|████▊     | 1426/2946 [00:37<00:50, 30.04it/s] 49%|████▊     | 1430/2946 [00:38<00:54, 27.88it/s] 49%|████▊     | 1433/2946 [00:38<00:57, 26.14it/s] 49%|████▉     | 1438/2946 [00:38<00:54, 27.83it/s] 49%|████▉     | 1447/2946 [00:38<00:38, 38.77it/s] 49%|████▉     | 1456/2946 [00:38<00:29, 50.15it/s] 50%|████▉     | 1462/2946 [00:38<00:28, 52.49it/s](raylet) [2024-05-30 10:08:35,535 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 93889503232; capacity: 1887507697664. Object creation will fail if spilling is required.
 50%|████▉     | 1468/2946 [00:39<00:36, 40.36it/s] 50%|█████     | 1477/2946 [00:39<00:29, 49.91it/s] 50%|█████     | 1483/2946 [00:39<00:32, 45.51it/s] 51%|█████     | 1493/2946 [00:39<00:25, 56.97it/s] 51%|█████     | 1501/2946 [00:39<00:23, 61.83it/s] 51%|█████▏    | 1511/2946 [00:39<00:21, 66.76it/s] 52%|█████▏    | 1519/2946 [00:39<00:22, 63.14it/s] 52%|█████▏    | 1526/2946 [00:39<00:23, 60.20it/s] 52%|█████▏    | 1535/2946 [00:40<00:21, 66.31it/s] 52%|█████▏    | 1542/2946 [00:40<00:23, 60.64it/s] 53%|█████▎    | 1549/2946 [00:40<00:24, 56.00it/s] 53%|█████▎    | 1555/2946 [00:40<00:25, 54.67it/s] 53%|█████▎    | 1561/2946 [00:40<00:32, 42.23it/s] 53%|█████▎    | 1569/2946 [00:40<00:30, 45.71it/s] 53%|█████▎    | 1574/2946 [00:40<00:33, 41.27it/s] 54%|█████▎    | 1579/2946 [00:41<00:38, 35.10it/s] 54%|█████▎    | 1583/2946 [00:41<00:39, 34.20it/s] 54%|█████▍    | 1592/2946 [00:41<00:29, 45.73it/s] 54%|█████▍    | 1598/2946 [00:41<00:28, 47.52it/s] 55%|█████▍    | 1606/2946 [00:41<00:24, 54.36it/s] 55%|█████▍    | 1613/2946 [00:41<00:25, 51.35it/s] 55%|█████▍    | 1619/2946 [00:41<00:29, 45.19it/s] 55%|█████▌    | 1625/2946 [00:42<00:31, 42.29it/s] 55%|█████▌    | 1631/2946 [00:42<00:29, 44.26it/s] 56%|█████▌    | 1636/2946 [00:42<00:33, 38.99it/s] 56%|█████▌    | 1641/2946 [00:42<00:33, 39.49it/s] 56%|█████▌    | 1650/2946 [00:42<00:26, 49.55it/s] 56%|█████▌    | 1657/2946 [00:42<00:27, 46.97it/s] 56%|█████▋    | 1663/2946 [00:42<00:27, 46.96it/s] 57%|█████▋    | 1668/2946 [00:43<00:43, 29.38it/s] 57%|█████▋    | 1672/2946 [00:43<00:47, 26.94it/s] 57%|█████▋    | 1676/2946 [00:43<01:01, 20.51it/s] 57%|█████▋    | 1679/2946 [00:44<01:15, 16.74it/s] 57%|█████▋    | 1682/2946 [00:44<01:21, 15.59it/s] 57%|█████▋    | 1687/2946 [00:44<01:02, 20.21it/s] 57%|█████▋    | 1691/2946 [00:44<00:55, 22.68it/s] 58%|█████▊    | 1694/2946 [00:44<01:05, 19.06it/s] 58%|█████▊    | 1697/2946 [00:45<01:14, 16.86it/s] 58%|█████▊    | 1700/2946 [00:45<01:08, 18.21it/s] 58%|█████▊    | 1703/2946 [00:45<01:08, 18.16it/s] 58%|█████▊    | 1706/2946 [00:45<01:28, 14.06it/s] 58%|█████▊    | 1711/2946 [00:45<01:05, 18.87it/s] 58%|█████▊    | 1714/2946 [00:46<01:05, 18.74it/s] 59%|█████▊    | 1724/2946 [00:46<00:36, 33.76it/s] 59%|█████▉    | 1738/2946 [00:46<00:21, 55.82it/s] 59%|█████▉    | 1751/2946 [00:46<00:17, 69.19it/s] 60%|█████▉    | 1761/2946 [00:46<00:15, 74.76it/s] 60%|██████    | 1770/2946 [00:46<00:15, 76.60it/s] 60%|██████    | 1779/2946 [00:46<00:16, 69.35it/s] 61%|██████    | 1787/2946 [00:46<00:18, 62.22it/s] 61%|██████    | 1794/2946 [00:47<00:25, 45.96it/s] 61%|██████    | 1800/2946 [00:47<00:27, 41.64it/s] 61%|██████▏   | 1805/2946 [00:47<00:35, 32.31it/s] 61%|██████▏   | 1811/2946 [00:47<00:31, 36.58it/s] 62%|██████▏   | 1816/2946 [00:47<00:33, 33.46it/s] 62%|██████▏   | 1820/2946 [00:48<00:36, 31.10it/s] 62%|██████▏   | 1824/2946 [00:48<00:34, 32.84it/s] 62%|██████▏   | 1828/2946 [00:48<00:41, 26.80it/s] 62%|██████▏   | 1832/2946 [00:48<00:43, 25.47it/s] 62%|██████▏   | 1835/2946 [00:48<00:46, 23.78it/s] 62%|██████▏   | 1838/2946 [00:48<00:48, 22.92it/s](raylet) [2024-05-30 10:08:45,543 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 93656190976; capacity: 1887507697664. Object creation will fail if spilling is required.
 63%|██████▎   | 1847/2946 [00:49<00:33, 32.35it/s] 63%|██████▎   | 1851/2946 [00:49<00:34, 31.83it/s] 63%|██████▎   | 1855/2946 [00:49<00:35, 30.92it/s] 63%|██████▎   | 1859/2946 [00:49<00:35, 30.88it/s] 63%|██████▎   | 1865/2946 [00:49<00:29, 36.55it/s] 63%|██████▎   | 1869/2946 [00:49<00:29, 36.80it/s] 64%|██████▎   | 1877/2946 [00:49<00:23, 45.99it/s] 64%|██████▍   | 1882/2946 [00:49<00:24, 42.93it/s] 64%|██████▍   | 1887/2946 [00:50<00:25, 41.18it/s] 64%|██████▍   | 1894/2946 [00:50<00:21, 48.00it/s] 65%|██████▍   | 1902/2946 [00:50<00:18, 55.61it/s] 65%|██████▍   | 1908/2946 [00:50<00:23, 43.63it/s] 65%|██████▍   | 1914/2946 [00:50<00:25, 40.27it/s] 65%|██████▌   | 1926/2946 [00:50<00:22, 45.94it/s] 66%|██████▌   | 1931/2946 [00:50<00:21, 46.60it/s] 66%|██████▌   | 1938/2946 [00:51<00:19, 51.20it/s] 66%|██████▌   | 1946/2946 [00:51<00:17, 57.33it/s] 66%|██████▋   | 1953/2946 [00:51<00:17, 57.32it/s] 66%|██████▋   | 1959/2946 [00:51<00:19, 49.99it/s] 67%|██████▋   | 1965/2946 [00:51<00:20, 48.43it/s] 67%|██████▋   | 1971/2946 [00:51<00:26, 36.88it/s] 67%|██████▋   | 1976/2946 [00:52<00:29, 33.17it/s] 67%|██████▋   | 1980/2946 [00:52<00:45, 21.12it/s] 67%|██████▋   | 1983/2946 [00:52<00:50, 19.00it/s] 67%|██████▋   | 1988/2946 [00:52<00:42, 22.69it/s] 68%|██████▊   | 1991/2946 [00:53<00:43, 21.87it/s] 68%|██████▊   | 1994/2946 [00:53<00:42, 22.35it/s] 68%|██████▊   | 1997/2946 [00:53<00:45, 21.00it/s] 68%|██████▊   | 2000/2946 [00:53<00:59, 15.77it/s] 68%|██████▊   | 2004/2946 [00:53<00:50, 18.69it/s] 68%|██████▊   | 2008/2946 [00:53<00:41, 22.49it/s] 68%|██████▊   | 2014/2946 [00:54<00:39, 23.74it/s] 68%|██████▊   | 2017/2946 [00:54<00:41, 22.62it/s] 69%|██████▊   | 2024/2946 [00:54<00:29, 31.77it/s] 69%|██████▉   | 2033/2946 [00:54<00:22, 39.96it/s] 69%|██████▉   | 2038/2946 [00:54<00:22, 39.83it/s] 69%|██████▉   | 2044/2946 [00:54<00:20, 44.23it/s] 70%|██████▉   | 2052/2946 [00:54<00:17, 51.82it/s] 70%|██████▉   | 2058/2946 [00:54<00:17, 51.80it/s] 70%|███████   | 2064/2946 [00:55<00:17, 51.27it/s] 70%|███████   | 2073/2946 [00:55<00:16, 54.53it/s] 71%|███████   | 2079/2946 [00:55<00:18, 46.76it/s] 71%|███████   | 2086/2946 [00:55<00:16, 51.43it/s] 71%|███████   | 2097/2946 [00:55<00:12, 65.31it/s] 71%|███████▏  | 2106/2946 [00:55<00:12, 68.92it/s] 72%|███████▏  | 2114/2946 [00:56<00:18, 44.76it/s] 72%|███████▏  | 2120/2946 [00:56<00:22, 36.39it/s] 72%|███████▏  | 2125/2946 [00:56<00:22, 36.80it/s] 72%|███████▏  | 2130/2946 [00:56<00:23, 34.62it/s] 72%|███████▏  | 2134/2946 [00:56<00:23, 35.15it/s] 73%|███████▎  | 2138/2946 [00:56<00:27, 29.44it/s] 73%|███████▎  | 2143/2946 [00:57<00:24, 33.41it/s] 73%|███████▎  | 2149/2946 [00:57<00:23, 34.12it/s] 73%|███████▎  | 2158/2946 [00:57<00:17, 45.82it/s] 73%|███████▎  | 2164/2946 [00:57<00:16, 46.21it/s] 74%|███████▍  | 2178/2946 [00:57<00:11, 68.30it/s] 74%|███████▍  | 2186/2946 [00:57<00:10, 70.38it/s] 75%|███████▍  | 2196/2946 [00:57<00:09, 77.14it/s] 75%|███████▍  | 2205/2946 [00:57<00:10, 72.53it/s] 75%|███████▌  | 2213/2946 [00:58<00:10, 67.87it/s] 75%|███████▌  | 2221/2946 [00:58<00:16, 43.55it/s] 76%|███████▌  | 2227/2946 [00:58<00:16, 43.64it/s] 76%|███████▌  | 2233/2946 [00:58<00:22, 32.00it/s](raylet) [2024-05-30 10:08:55,589 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 93417431040; capacity: 1887507697664. Object creation will fail if spilling is required.
 76%|███████▌  | 2238/2946 [00:59<00:27, 26.08it/s] 76%|███████▌  | 2244/2946 [00:59<00:24, 29.01it/s] 76%|███████▋  | 2249/2946 [00:59<00:22, 31.43it/s] 77%|███████▋  | 2256/2946 [00:59<00:18, 38.06it/s] 77%|███████▋  | 2261/2946 [00:59<00:19, 34.99it/s] 77%|███████▋  | 2266/2946 [00:59<00:23, 29.36it/s] 77%|███████▋  | 2270/2946 [01:00<00:24, 27.36it/s] 77%|███████▋  | 2274/2946 [01:00<00:23, 28.71it/s] 77%|███████▋  | 2281/2946 [01:00<00:18, 36.88it/s] 78%|███████▊  | 2287/2946 [01:00<00:15, 41.93it/s] 78%|███████▊  | 2295/2946 [01:00<00:13, 48.14it/s] 78%|███████▊  | 2301/2946 [01:00<00:21, 29.58it/s] 78%|███████▊  | 2306/2946 [01:01<00:28, 22.47it/s] 78%|███████▊  | 2310/2946 [01:01<00:25, 24.81it/s] 79%|███████▊  | 2314/2946 [01:01<00:24, 26.04it/s] 79%|███████▊  | 2318/2946 [01:01<00:22, 27.74it/s] 79%|███████▉  | 2322/2946 [01:01<00:20, 30.07it/s] 79%|███████▉  | 2330/2946 [01:01<00:15, 40.94it/s] 79%|███████▉  | 2335/2946 [01:02<00:17, 33.95it/s] 80%|███████▉  | 2344/2946 [01:02<00:13, 44.89it/s] 80%|████████  | 2359/2946 [01:02<00:08, 67.57it/s] 81%|████████  | 2376/2946 [01:02<00:06, 88.25it/s] 81%|████████▏ | 2394/2946 [01:02<00:04, 110.40it/s] 82%|████████▏ | 2407/2946 [01:03<00:10, 49.01it/s]  82%|████████▏ | 2417/2946 [01:03<00:16, 32.60it/s] 82%|████████▏ | 2424/2946 [01:04<00:16, 31.13it/s] 82%|████████▏ | 2430/2946 [01:04<00:21, 23.90it/s] 83%|████████▎ | 2436/2946 [01:04<00:19, 26.22it/s] 83%|████████▎ | 2441/2946 [01:04<00:18, 27.13it/s] 83%|████████▎ | 2446/2946 [01:04<00:16, 30.21it/s] 83%|████████▎ | 2453/2946 [01:05<00:13, 36.64it/s] 83%|████████▎ | 2459/2946 [01:05<00:12, 38.59it/s] 84%|████████▎ | 2466/2946 [01:05<00:10, 44.18it/s] 84%|████████▍ | 2472/2946 [01:05<00:11, 39.83it/s] 84%|████████▍ | 2477/2946 [01:05<00:12, 36.87it/s] 84%|████████▍ | 2484/2946 [01:05<00:10, 43.39it/s] 84%|████████▍ | 2489/2946 [01:05<00:10, 44.82it/s] 85%|████████▍ | 2500/2946 [01:06<00:07, 57.23it/s] 85%|████████▌ | 2507/2946 [01:06<00:10, 43.18it/s] 85%|████████▌ | 2514/2946 [01:06<00:09, 47.73it/s] 86%|████████▌ | 2520/2946 [01:06<00:10, 41.07it/s] 86%|████████▌ | 2531/2946 [01:06<00:07, 54.91it/s] 86%|████████▌ | 2538/2946 [01:06<00:07, 57.14it/s] 86%|████████▋ | 2545/2946 [01:07<00:09, 43.39it/s] 87%|████████▋ | 2555/2946 [01:07<00:07, 51.79it/s] 87%|████████▋ | 2562/2946 [01:07<00:07, 51.29it/s] 87%|████████▋ | 2568/2946 [01:07<00:07, 48.39it/s] 87%|████████▋ | 2574/2946 [01:07<00:07, 46.88it/s] 88%|████████▊ | 2586/2946 [01:07<00:05, 60.91it/s] 88%|████████▊ | 2598/2946 [01:07<00:04, 74.39it/s] 88%|████████▊ | 2607/2946 [01:08<00:05, 60.99it/s] 89%|████████▊ | 2614/2946 [01:08<00:06, 53.90it/s] 89%|████████▉ | 2621/2946 [01:08<00:06, 49.02it/s] 89%|████████▉ | 2627/2946 [01:08<00:06, 47.07it/s] 89%|████████▉ | 2633/2946 [01:08<00:06, 48.02it/s] 90%|████████▉ | 2639/2946 [01:08<00:07, 42.64it/s] 90%|████████▉ | 2646/2946 [01:08<00:06, 47.25it/s](raylet) [2024-05-30 10:09:05,596 E 798786 798815] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-07-52_294463_661359 is over 95% full, available space: 93175058432; capacity: 1887507697664. Object creation will fail if spilling is required.
 90%|█████████ | 2652/2946 [01:09<00:06, 45.75it/s] 90%|█████████ | 2657/2946 [01:09<00:06, 45.76it/s] 90%|█████████ | 2665/2946 [01:09<00:06, 43.13it/s] 91%|█████████ | 2670/2946 [01:09<00:10, 27.03it/s] 91%|█████████ | 2678/2946 [01:09<00:07, 33.59it/s] 91%|█████████ | 2684/2946 [01:10<00:06, 38.06it/s] 91%|█████████▏| 2689/2946 [01:10<00:06, 38.31it/s] 91%|█████████▏| 2694/2946 [01:10<00:06, 40.77it/s] 92%|█████████▏| 2702/2946 [01:10<00:04, 49.67it/s] 92%|█████████▏| 2711/2946 [01:10<00:04, 57.88it/s] 92%|█████████▏| 2718/2946 [01:10<00:05, 44.64it/s] 92%|█████████▏| 2724/2946 [01:10<00:05, 42.09it/s] 93%|█████████▎| 2729/2946 [01:11<00:08, 26.13it/s] 93%|█████████▎| 2733/2946 [01:11<00:07, 27.02it/s] 93%|█████████▎| 2737/2946 [01:11<00:07, 28.56it/s] 93%|█████████▎| 2741/2946 [01:11<00:08, 22.88it/s] 93%|█████████▎| 2747/2946 [01:12<00:07, 26.75it/s] 93%|█████████▎| 2754/2946 [01:12<00:05, 33.98it/s] 94%|█████████▎| 2759/2946 [01:12<00:06, 30.15it/s] 94%|█████████▍| 2764/2946 [01:12<00:06, 30.13it/s] 94%|█████████▍| 2770/2946 [01:12<00:06, 27.06it/s] 94%|█████████▍| 2774/2946 [01:12<00:07, 24.13it/s] 94%|█████████▍| 2782/2946 [01:13<00:05, 30.91it/s] 95%|█████████▍| 2790/2946 [01:13<00:03, 39.39it/s] 95%|█████████▌| 2799/2946 [01:13<00:03, 47.61it/s] 95%|█████████▌| 2805/2946 [01:13<00:03, 46.74it/s] 95%|█████████▌| 2813/2946 [01:13<00:02, 49.82it/s] 96%|█████████▌| 2819/2946 [01:13<00:02, 47.38it/s] 96%|█████████▌| 2824/2946 [01:13<00:02, 43.11it/s] 96%|█████████▌| 2829/2946 [01:14<00:02, 40.51it/s] 96%|█████████▋| 2839/2946 [01:14<00:02, 53.21it/s] 97%|█████████▋| 2845/2946 [01:14<00:02, 41.93it/s] 97%|█████████▋| 2853/2946 [01:14<00:01, 49.75it/s] 97%|█████████▋| 2859/2946 [01:14<00:01, 49.67it/s] 97%|█████████▋| 2865/2946 [01:15<00:04, 19.65it/s] 97%|█████████▋| 2870/2946 [01:16<00:05, 14.74it/s] 98%|█████████▊| 2874/2946 [01:16<00:04, 17.05it/s] 98%|█████████▊| 2879/2946 [01:16<00:03, 16.83it/s] 98%|█████████▊| 2882/2946 [01:16<00:03, 17.93it/s] 98%|█████████▊| 2885/2946 [01:16<00:03, 17.03it/s] 98%|█████████▊| 2890/2946 [01:16<00:02, 19.16it/s] 98%|█████████▊| 2894/2946 [01:17<00:02, 17.69it/s] 98%|█████████▊| 2897/2946 [01:17<00:02, 17.85it/s] 98%|█████████▊| 2900/2946 [01:17<00:02, 18.62it/s] 99%|█████████▊| 2903/2946 [01:17<00:02, 17.87it/s] 99%|█████████▊| 2906/2946 [01:17<00:02, 20.00it/s] 99%|█████████▉| 2914/2946 [01:17<00:01, 31.86it/s] 99%|█████████▉| 2918/2946 [01:18<00:00, 33.56it/s]100%|█████████▉| 2944/2946 [01:18<00:00, 86.35it/s]100%|██████████| 2946/2946 [01:18<00:00, 37.60it/s]
2024-05-30 10:09:44.381 | INFO     | lean_dojo.data_extraction.trace:trace:116 - Loading the traced repo from /home/adarsh/.cache/lean_dojo/lean-ja-tactic-cheatsheet-59ffd7d54e24ab9437653fb167c09937b2c7fd3c/tactic-cheatsheet
2024-05-30 10:09:47,589	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
  0%|          | 0/2946 [00:00<?, ?it/s]  0%|          | 1/2946 [00:01<1:20:24,  1.64s/it]  0%|          | 13/2946 [00:01<04:48, 10.18it/s]   2%|▏         | 58/2946 [00:01<00:52, 55.35it/s]  4%|▎         | 106/2946 [00:01<00:26, 108.99it/s]  5%|▍         | 139/2946 [00:02<00:25, 109.42it/s]  6%|▌         | 164/2946 [00:02<00:38, 72.15it/s]   6%|▌         | 184/2946 [00:03<00:34, 80.92it/s]  7%|▋         | 201/2946 [00:03<00:30, 89.73it/s]  8%|▊         | 224/2946 [00:03<00:24, 109.48it/s]  8%|▊         | 242/2946 [00:03<00:23, 113.98it/s]  9%|▉         | 259/2946 [00:03<00:32, 81.97it/s]   9%|▉         | 272/2946 [00:04<00:39, 67.66it/s] 10%|▉         | 283/2946 [00:04<00:51, 51.71it/s] 10%|▉         | 291/2946 [00:04<00:58, 45.07it/s] 10%|█         | 298/2946 [00:05<01:05, 40.65it/s] 10%|█         | 304/2946 [00:05<01:05, 40.57it/s] 10%|█         | 309/2946 [00:05<01:03, 41.74it/s] 11%|█         | 314/2946 [00:05<01:05, 40.26it/s] 11%|█         | 319/2946 [00:05<01:16, 34.47it/s] 11%|█         | 323/2946 [00:05<01:43, 25.36it/s] 11%|█         | 327/2946 [00:06<01:55, 22.70it/s] 11%|█         | 331/2946 [00:06<01:47, 24.38it/s] 11%|█▏        | 335/2946 [00:06<01:38, 26.40it/s] 12%|█▏        | 340/2946 [00:06<01:28, 29.50it/s] 12%|█▏        | 344/2946 [00:06<01:25, 30.53it/s] 12%|█▏        | 349/2946 [00:06<01:23, 30.97it/s] 12%|█▏        | 353/2946 [00:06<01:21, 31.64it/s] 12%|█▏        | 357/2946 [00:07<01:18, 32.92it/s] 12%|█▏        | 365/2946 [00:07<01:03, 40.94it/s] 13%|█▎        | 370/2946 [00:07<01:02, 41.39it/s] 13%|█▎        | 375/2946 [00:07<01:04, 40.04it/s] 13%|█▎        | 380/2946 [00:07<01:31, 27.96it/s] 13%|█▎        | 384/2946 [00:07<01:28, 28.88it/s] 13%|█▎        | 389/2946 [00:08<01:19, 32.17it/s] 13%|█▎        | 393/2946 [00:08<01:18, 32.43it/s] 14%|█▎        | 398/2946 [00:08<01:15, 33.59it/s] 14%|█▎        | 402/2946 [00:08<01:16, 33.09it/s] 14%|█▍        | 406/2946 [00:08<01:17, 32.65it/s] 14%|█▍        | 410/2946 [00:08<01:18, 32.46it/s](raylet) [2024-05-30 10:09:57,309 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92936949760; capacity: 1887507697664. Object creation will fail if spilling is required.
 14%|█▍        | 414/2946 [00:08<01:33, 27.08it/s] 14%|█▍        | 414/2946 [01:35<01:33, 27.08it/s] 14%|█▍        | 416/2946 [01:35<5:13:52,  7.44s/it](raylet) [2024-05-30 10:10:07,317 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92936663040; capacity: 1887507697664. Object creation will fail if spilling is required.
(raylet) [2024-05-30 10:10:17,325 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92936511488; capacity: 1887507697664. Object creation will fail if spilling is required.
 14%|█▍        | 419/2946 [01:36<3:50:21,  5.47s/it] 14%|█▍        | 422/2946 [01:36<2:47:08,  3.97s/it] 14%|█▍        | 425/2946 [01:36<2:00:13,  2.86s/it] 15%|█▍        | 429/2946 [01:36<1:18:23,  1.87s/it] 15%|█▍        | 434/2946 [01:36<48:28,  1.16s/it]   15%|█▍        | 438/2946 [01:36<34:04,  1.23it/s] 15%|█▌        | 442/2946 [01:36<24:10,  1.73it/s] 15%|█▌        | 445/2946 [01:37<18:48,  2.22it/s] 15%|█▌        | 448/2946 [01:37<14:17,  2.91it/s] 15%|█▌        | 455/2946 [01:37<07:57,  5.22it/s] 16%|█▌        | 461/2946 [01:37<05:26,  7.61it/s](raylet) [2024-05-30 10:11:27,367 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92934176768; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 7x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)
 16%|█▌        | 465/2946 [01:46<26:56,  1.53it/s] 16%|█▌        | 468/2946 [01:46<21:24,  1.93it/s] 16%|█▌        | 474/2946 [01:46<13:40,  3.01it/s] 16%|█▌        | 477/2946 [01:46<11:09,  3.69it/s] 16%|█▋        | 480/2946 [01:46<09:15,  4.44it/s] 16%|█▋        | 485/2946 [01:46<06:16,  6.53it/s] 17%|█▋        | 493/2946 [01:46<03:43, 10.97it/s] 17%|█▋        | 497/2946 [01:47<03:13, 12.66it/s] 17%|█▋        | 506/2946 [01:47<02:04, 19.64it/s] 17%|█▋        | 511/2946 [01:47<01:58, 20.56it/s] 17%|█▋        | 515/2946 [01:47<01:45, 23.02it/s] 18%|█▊        | 519/2946 [01:47<01:42, 23.69it/s] 18%|█▊        | 523/2946 [01:57<27:19,  1.48it/s](raylet) [2024-05-30 10:11:37,374 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92933865472; capacity: 1887507697664. Object creation will fail if spilling is required.
 18%|█▊        | 526/2946 [01:57<21:38,  1.86it/s] 18%|█▊        | 530/2946 [01:57<15:35,  2.58it/s] 18%|█▊        | 533/2946 [01:58<12:40,  3.17it/s] 18%|█▊        | 536/2946 [01:58<09:49,  4.09it/s] 18%|█▊        | 539/2946 [01:58<07:33,  5.30it/s] 18%|█▊        | 545/2946 [01:58<04:34,  8.74it/s] 19%|█▊        | 552/2946 [01:58<02:54, 13.72it/s] 19%|█▉        | 560/2946 [01:58<01:55, 20.59it/s] 19%|█▉        | 567/2946 [01:58<01:29, 26.50it/s](raylet) [2024-05-30 10:11:47,379 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92933562368; capacity: 1887507697664. Object creation will fail if spilling is required.
 19%|█▉        | 573/2946 [01:58<01:25, 27.80it/s] 20%|█▉        | 578/2946 [01:59<01:18, 30.11it/s] 20%|█▉        | 587/2946 [01:59<00:58, 40.38it/s] 20%|██        | 593/2946 [01:59<00:57, 41.02it/s] 20%|██        | 599/2946 [01:59<00:54, 43.26it/s] 21%|██        | 605/2946 [01:59<00:55, 41.91it/s] 21%|██        | 610/2946 [01:59<01:04, 36.48it/s] 21%|██        | 618/2946 [01:59<00:53, 43.47it/s] 21%|██        | 623/2946 [02:00<01:02, 36.90it/s] 21%|██        | 623/2946 [02:12<01:02, 36.90it/s](raylet) 21%|██        | 625/2946 [02:12<30:02,  1.29it/s] [2024-05-30 10:11:57,384 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92932665344; capacity: 1887507697664. Object creation will fail if spilling is required.
 21%|██▏       | 629/2946 [02:12<22:24,  1.72it/s] 22%|██▏       | 634/2946 [02:12<15:46,  2.44it/s] 22%|██▏       | 638/2946 [02:12<12:16,  3.13it/s] 22%|██▏       | 641/2946 [02:12<09:50,  3.91it/s] 22%|██▏       | 644/2946 [02:13<07:59,  4.80it/s] 22%|██▏       | 647/2946 [02:13<06:40,  5.74it/s] 22%|██▏       | 650/2946 [02:13<05:15,  7.28it/s] 22%|██▏       | 654/2946 [02:13<04:07,  9.28it/s] 22%|██▏       | 657/2946 [02:13<03:24, 11.20it/s] 22%|██▏       | 662/2946 [02:13<02:35, 14.68it/s] 23%|██▎       | 668/2946 [02:14<01:49, 20.82it/s] 23%|██▎       | 680/2946 [02:14<01:01, 37.13it/s] 23%|██▎       | 688/2946 [02:14<01:04, 34.82it/s] 24%|██▎       | 695/2946 [02:14<00:55, 40.79it/s] 24%|██▍       | 701/2946 [02:14<00:59, 37.49it/s] 24%|██▍       | 709/2946 [02:14<00:49, 44.92it/s] 24%|██▍       | 715/2946 [02:14<00:48, 45.72it/s] 24%|██▍       | 715/2946 [02:29<00:48, 45.72it/s] 24%|██▍       | 716/2946 [02:29<32:50,  1.13it/s](raylet) [2024-05-30 10:12:07,390 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92932423680; capacity: 1887507697664. Object creation will fail if spilling is required.
 25%|██▍       | 724/2946 [02:29<19:42,  1.88it/s] 25%|██▍       | 730/2946 [02:29<14:13,  2.60it/s] 25%|██▍       | 736/2946 [02:30<10:05,  3.65it/s] 25%|██▌       | 742/2946 [02:30<07:20,  5.00it/s] 25%|██▌       | 747/2946 [02:30<05:42,  6.43it/s] 26%|██▌       | 755/2946 [02:30<03:43,  9.80it/s] 26%|██▌       | 761/2946 [02:30<03:01, 12.07it/s] 26%|██▌       | 767/2946 [02:30<02:18, 15.71it/s] 26%|██▋       | 775/2946 [02:30<01:38, 22.00it/s] 27%|██▋       | 781/2946 [02:31<01:26, 25.14it/s] 27%|██▋       | 793/2946 [02:31<01:00, 35.51it/s] 27%|██▋       | 801/2946 [02:31<00:51, 41.32it/s] 27%|██▋       | 808/2946 [02:31<00:57, 37.04it/s] 28%|██▊       | 814/2946 [02:31<00:56, 37.47it/s] 28%|██▊       | 819/2946 [02:31<01:00, 35.04it/s] 28%|██▊       | 825/2946 [02:32<01:04, 33.05it/s] 28%|██▊       | 829/2946 [02:32<01:07, 31.36it/s] 28%|██▊       | 835/2946 [02:32<01:06, 31.73it/s] 28%|██▊       | 839/2946 [02:32<01:17, 27.35it/s] 29%|██▊       | 842/2946 [02:32<01:19, 26.47it/s] 29%|██▊       | 842/2946 [02:50<01:19, 26.47it/s](raylet) 29%|██▊       | 844/2946 [02:50<49:28,  1.41s/it] [2024-05-30 10:12:27,403 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92932046848; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 2x across cluster]
 29%|██▉       | 849/2946 [02:50<31:52,  1.10it/s] 29%|██▉       | 853/2946 [02:50<23:04,  1.51it/s] 29%|██▉       | 857/2946 [02:50<16:34,  2.10it/s] 29%|██▉       | 862/2946 [02:50<11:05,  3.13it/s] 29%|██▉       | 868/2946 [02:50<07:11,  4.81it/s] 30%|██▉       | 872/2946 [02:51<05:40,  6.08it/s] 30%|██▉       | 876/2946 [02:51<04:28,  7.71it/s] 30%|██▉       | 883/2946 [02:51<02:57, 11.60it/s] 30%|███       | 887/2946 [02:51<02:40, 12.84it/s] 30%|███       | 893/2946 [02:51<01:57, 17.50it/s] 30%|███       | 897/2946 [02:51<01:43, 19.79it/s] 31%|███       | 902/2946 [02:51<01:28, 23.19it/s] 31%|███       | 907/2946 [02:52<01:18, 25.95it/s] 31%|███       | 911/2946 [02:52<01:16, 26.54it/s] 31%|███       | 915/2946 [02:52<01:16, 26.46it/s] 31%|███▏      | 921/2946 [02:52<01:12, 27.87it/s] 31%|███▏      | 925/2946 [02:52<01:21, 24.80it/s] 32%|███▏      | 928/2946 [02:52<01:29, 22.62it/s] 32%|███▏      | 931/2946 [02:53<01:24, 23.96it/s] 32%|███▏      | 934/2946 [02:53<01:26, 23.26it/s] 32%|███▏      | 938/2946 [02:53<01:18, 25.65it/s] 32%|███▏      | 941/2946 [02:53<01:17, 25.80it/s] 32%|███▏      | 945/2946 [02:53<01:18, 25.53it/s] 32%|███▏      | 948/2946 [02:53<01:20, 24.67it/s] 32%|███▏      | 956/2946 [02:53<00:58, 34.23it/s] 33%|███▎      | 960/2946 [02:54<01:06, 30.03it/s] 33%|███▎      | 965/2946 [02:54<01:14, 26.61it/s] 33%|███▎      | 968/2946 [02:54<01:13, 26.86it/s] 33%|███▎      | 968/2946 [03:15<01:13, 26.86it/s] 33%|███▎      | 971/2946 [03:15<55:39,  1.69s/it](raylet) [2024-05-30 10:12:47,414 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92931559424; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 2x across cluster]
 33%|███▎      | 973/2946 [03:15<45:46,  1.39s/it] 33%|███▎      | 976/2946 [03:15<33:33,  1.02s/it] 33%|███▎      | 983/2946 [03:16<17:30,  1.87it/s] 34%|███▎      | 987/2946 [03:16<12:49,  2.54it/s] 34%|███▎      | 991/2946 [03:16<09:22,  3.48it/s] 34%|███▍      | 995/2946 [03:16<06:55,  4.69it/s] 34%|███▍      | 1001/2946 [03:16<04:27,  7.26it/s] 34%|███▍      | 1006/2946 [03:16<03:18,  9.80it/s] 34%|███▍      | 1012/2946 [03:16<02:22, 13.54it/s] 35%|███▍      | 1019/2946 [03:16<01:41, 18.99it/s] 35%|███▍      | 1028/2946 [03:17<01:11, 26.67it/s] 35%|███▌      | 1034/2946 [03:17<01:12, 26.20it/s] 35%|███▌      | 1039/2946 [03:17<01:04, 29.39it/s] 35%|███▌      | 1044/2946 [03:17<01:02, 30.56it/s] 36%|███▌      | 1049/2946 [03:17<01:19, 24.01it/s] 36%|███▌      | 1053/2946 [03:18<01:19, 23.90it/s] 36%|███▌      | 1057/2946 [03:18<01:16, 24.59it/s] 36%|███▌      | 1060/2946 [03:18<01:25, 22.06it/s] 36%|███▌      | 1063/2946 [03:18<01:24, 22.30it/s] 36%|███▌      | 1067/2946 [03:18<01:18, 23.96it/s] 36%|███▋      | 1073/2946 [03:18<01:01, 30.42it/s] 37%|███▋      | 1078/2946 [03:18<01:03, 29.48it/s] 37%|███▋      | 1088/2946 [03:19<00:43, 43.18it/s] 37%|███▋      | 1097/2946 [03:19<00:37, 49.23it/s] 37%|███▋      | 1103/2946 [03:19<00:36, 50.44it/s] 38%|███▊      | 1109/2946 [03:19<00:45, 40.07it/s] 38%|███▊      | 1116/2946 [03:19<00:39, 46.20it/s] 38%|███▊      | 1128/2946 [03:19<00:29, 62.49it/s] 39%|███▉      | 1144/2946 [03:19<00:21, 85.07it/s] 39%|███▉      | 1162/2946 [03:19<00:16, 108.48it/s] 40%|████      | 1185/2946 [03:20<00:12, 140.74it/s] 41%|████      | 1205/2946 [03:20<00:11, 149.85it/s] 41%|████▏     | 1221/2946 [03:20<00:12, 139.23it/s] 42%|████▏     | 1236/2946 [03:20<00:12, 137.52it/s] 43%|████▎     | 1254/2946 [03:20<00:11, 147.59it/s] 43%|████▎     | 1270/2946 [03:20<00:12, 134.76it/s] 43%|████▎     | 1270/2946 [03:46<00:12, 134.76it/s] 43%|████▎     | 1278/2946 [03:46<15:51,  1.75it/s] (raylet) [2024-05-30 10:13:17,438 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92929257472; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 3x across cluster]
 44%|████▎     | 1282/2946 [03:47<14:11,  1.95it/s] 44%|████▍     | 1293/2946 [03:47<10:01,  2.75it/s] 44%|████▍     | 1305/2946 [03:47<06:51,  3.98it/s] 45%|████▍     | 1315/2946 [03:47<05:02,  5.39it/s] 45%|████▌     | 1326/2946 [03:47<03:34,  7.54it/s] 45%|████▌     | 1336/2946 [03:47<02:39, 10.10it/s] 46%|████▌     | 1345/2946 [03:47<02:04, 12.85it/s] 46%|████▌     | 1353/2946 [03:48<01:43, 15.40it/s] 46%|████▌     | 1361/2946 [03:48<01:21, 19.43it/s] 47%|████▋     | 1370/2946 [03:48<01:02, 25.30it/s] 47%|████▋     | 1378/2946 [03:48<00:51, 30.43it/s] 47%|████▋     | 1386/2946 [03:48<00:45, 33.92it/s] 47%|████▋     | 1393/2946 [03:48<00:40, 38.23it/s] 48%|████▊     | 1400/2946 [03:49<00:46, 33.52it/s] 48%|████▊     | 1406/2946 [03:49<00:44, 34.61it/s] 48%|████▊     | 1411/2946 [03:49<00:41, 37.07it/s] 48%|████▊     | 1418/2946 [03:49<00:36, 41.96it/s] 48%|████▊     | 1426/2946 [03:49<00:30, 49.90it/s] 49%|████▊     | 1434/2946 [03:49<00:28, 53.58it/s] 49%|████▉     | 1441/2946 [03:49<00:27, 53.99it/s] 49%|████▉     | 1450/2946 [03:49<00:24, 62.00it/s] 49%|████▉     | 1457/2946 [03:50<00:28, 51.90it/s] 50%|████▉     | 1463/2946 [03:50<00:39, 37.70it/s] 50%|████▉     | 1469/2946 [03:50<00:36, 40.34it/s] 50%|█████     | 1474/2946 [03:50<00:37, 39.54it/s] 50%|█████     | 1479/2946 [03:50<00:36, 40.69it/s] 50%|█████     | 1484/2946 [03:50<00:41, 35.53it/s] 51%|█████     | 1488/2946 [03:51<00:46, 31.40it/s] 51%|█████     | 1494/2946 [03:51<00:38, 37.27it/s] 51%|█████     | 1500/2946 [03:51<00:36, 39.88it/s] 51%|█████     | 1506/2946 [03:51<00:33, 43.24it/s] 51%|█████▏    | 1512/2946 [03:51<00:32, 43.81it/s] 51%|█████▏    | 1517/2946 [03:51<00:40, 35.25it/s] 52%|█████▏    | 1521/2946 [03:51<00:40, 35.47it/s] 52%|█████▏    | 1525/2946 [03:52<00:47, 29.65it/s] 52%|█████▏    | 1534/2946 [03:52<00:33, 41.91it/s] 52%|█████▏    | 1541/2946 [03:52<00:29, 48.23it/s] 53%|█████▎    | 1547/2946 [03:52<00:35, 38.99it/s] 53%|█████▎    | 1552/2946 [03:52<00:38, 35.86it/s] 53%|█████▎    | 1557/2946 [03:52<00:38, 35.71it/s] 53%|█████▎    | 1565/2946 [03:53<00:31, 44.34it/s] 53%|█████▎    | 1565/2946 [04:24<00:31, 44.34it/s] 53%|█████▎    | 1568/2946 [04:24<40:55,  1.78s/it](raylet) [2024-05-30 10:13:47,463 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92928675840; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 3x across cluster]
 53%|█████▎    | 1570/2946 [04:24<35:23,  1.54s/it] 54%|█████▎    | 1582/2946 [04:24<16:08,  1.41it/s] 54%|█████▍    | 1592/2946 [04:24<09:51,  2.29it/s] 54%|█████▍    | 1599/2946 [04:24<07:10,  3.13it/s] 54%|█████▍    | 1605/2946 [04:25<05:30,  4.06it/s] 55%|█████▍    | 1613/2946 [04:25<03:45,  5.90it/s] 55%|█████▌    | 1622/2946 [04:25<02:34,  8.60it/s] 55%|█████▌    | 1629/2946 [04:25<02:01, 10.88it/s] 56%|█████▌    | 1638/2946 [04:25<01:25, 15.32it/s] 56%|█████▌    | 1647/2946 [04:25<01:03, 20.31it/s] 56%|█████▌    | 1654/2946 [04:25<00:57, 22.40it/s] 56%|█████▋    | 1664/2946 [04:26<00:41, 30.65it/s] 57%|█████▋    | 1671/2946 [04:26<00:36, 35.18it/s] 57%|█████▋    | 1679/2946 [04:26<00:31, 40.16it/s] 57%|█████▋    | 1687/2946 [04:26<00:27, 45.11it/s] 58%|█████▊    | 1694/2946 [04:26<00:26, 46.72it/s] 58%|█████▊    | 1704/2946 [04:26<00:22, 56.32it/s] 58%|█████▊    | 1711/2946 [04:26<00:21, 58.67it/s] 58%|█████▊    | 1719/2946 [04:26<00:21, 58.17it/s] 59%|█████▊    | 1726/2946 [04:27<00:25, 48.68it/s] 59%|█████▉    | 1732/2946 [04:27<00:25, 47.34it/s] 59%|█████▉    | 1739/2946 [04:27<00:25, 47.01it/s] 59%|█████▉    | 1746/2946 [04:27<00:25, 47.14it/s] 59%|█████▉    | 1751/2946 [04:27<00:27, 43.84it/s] 60%|█████▉    | 1756/2946 [04:28<00:37, 31.53it/s] 60%|█████▉    | 1760/2946 [04:28<00:42, 27.95it/s] 60%|█████▉    | 1765/2946 [04:28<00:41, 28.28it/s] 60%|██████    | 1769/2946 [04:28<00:42, 27.56it/s] 60%|██████    | 1772/2946 [04:28<00:43, 26.90it/s] 60%|██████    | 1775/2946 [04:28<00:45, 25.62it/s] 60%|██████    | 1779/2946 [04:28<00:46, 25.15it/s] 60%|██████    | 1782/2946 [04:29<00:53, 21.64it/s] 61%|██████    | 1785/2946 [04:29<00:56, 20.70it/s] 61%|██████    | 1789/2946 [04:29<00:47, 24.19it/s] 61%|██████    | 1792/2946 [04:29<00:54, 21.07it/s] 61%|██████    | 1797/2946 [04:29<00:51, 22.22it/s] 61%|██████    | 1800/2946 [04:29<00:51, 22.44it/s] 61%|██████▏   | 1808/2946 [04:30<00:33, 34.43it/s] 62%|██████▏   | 1813/2946 [04:30<00:34, 32.44it/s] 62%|██████▏   | 1817/2946 [04:30<00:39, 28.92it/s] 62%|██████▏   | 1823/2946 [04:30<00:39, 28.47it/s] 62%|██████▏   | 1827/2946 [04:30<00:39, 28.51it/s] 62%|██████▏   | 1831/2946 [04:30<00:40, 27.71it/s] 62%|██████▏   | 1839/2946 [04:31<00:28, 38.43it/s] 63%|██████▎   | 1844/2946 [04:31<00:26, 40.98it/s] 63%|██████▎   | 1849/2946 [04:31<00:25, 42.40it/s] 63%|██████▎   | 1854/2946 [04:31<00:25, 43.25it/s] 63%|██████▎   | 1861/2946 [04:31<00:26, 41.67it/s] 63%|██████▎   | 1861/2946 [05:09<00:26, 41.67it/s] 63%|██████▎   | 1865/2946 [05:09<40:07,  2.23s/it](raylet) [2024-05-30 10:14:27,490 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92927098880; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 4x across cluster]
 63%|██████▎   | 1870/2946 [05:10<28:25,  1.59s/it] 64%|██████▎   | 1875/2946 [05:10<20:18,  1.14s/it] 64%|██████▍   | 1880/2946 [05:10<14:22,  1.24it/s] 64%|██████▍   | 1884/2946 [05:10<10:53,  1.63it/s] 64%|██████▍   | 1888/2946 [05:10<08:09,  2.16it/s] 64%|██████▍   | 1892/2946 [05:10<06:07,  2.87it/s] 64%|██████▍   | 1896/2946 [05:11<04:33,  3.84it/s] 64%|██████▍   | 1899/2946 [05:11<03:38,  4.78it/s] 65%|██████▍   | 1902/2946 [05:11<02:54,  5.97it/s] 65%|██████▍   | 1905/2946 [05:11<02:18,  7.54it/s] 65%|██████▍   | 1909/2946 [05:11<01:42, 10.12it/s] 65%|██████▍   | 1913/2946 [05:11<01:17, 13.32it/s] 65%|██████▌   | 1917/2946 [05:11<01:10, 14.67it/s] 65%|██████▌   | 1920/2946 [05:12<01:02, 16.42it/s] 65%|██████▌   | 1923/2946 [05:12<01:09, 14.78it/s] 65%|██████▌   | 1929/2946 [05:12<00:49, 20.63it/s] 66%|██████▌   | 1932/2946 [05:12<00:52, 19.49it/s] 66%|██████▌   | 1937/2946 [05:12<00:51, 19.69it/s] 66%|██████▌   | 1945/2946 [05:13<00:39, 25.46it/s] 66%|██████▌   | 1948/2946 [05:13<00:39, 25.11it/s] 66%|██████▋   | 1955/2946 [05:13<00:30, 32.44it/s] 67%|██████▋   | 1969/2946 [05:13<00:17, 54.51it/s] 67%|██████▋   | 1983/2946 [05:13<00:13, 72.81it/s] 68%|██████▊   | 1998/2946 [05:13<00:10, 91.15it/s] 68%|██████▊   | 2009/2946 [05:13<00:10, 90.31it/s] 69%|██████▊   | 2025/2946 [05:13<00:08, 106.99it/s] 69%|██████▉   | 2040/2946 [05:13<00:07, 115.45it/s] 70%|██████▉   | 2060/2946 [05:14<00:06, 127.96it/s] 70%|███████   | 2074/2946 [05:14<00:07, 124.22it/s] 71%|███████   | 2090/2946 [05:14<00:06, 133.51it/s] 71%|███████▏  | 2104/2946 [05:14<00:07, 117.56it/s] 72%|███████▏  | 2117/2946 [05:14<00:09, 88.62it/s]  72%|███████▏  | 2128/2946 [05:14<00:08, 91.95it/s] 73%|███████▎  | 2139/2946 [05:14<00:09, 84.63it/s] 73%|███████▎  | 2149/2946 [05:15<00:09, 86.22it/s] 73%|███████▎  | 2163/2946 [05:15<00:07, 98.02it/s] 74%|███████▍  | 2174/2946 [05:15<00:08, 91.89it/s] 74%|███████▍  | 2184/2946 [05:15<00:08, 92.54it/s] 75%|███████▍  | 2199/2946 [05:15<00:06, 107.12it/s] 75%|███████▌  | 2212/2946 [05:15<00:06, 113.07it/s] 75%|███████▌  | 2224/2946 [05:15<00:06, 105.85it/s] 76%|███████▌  | 2235/2946 [05:15<00:06, 106.51it/s] 76%|███████▋  | 2247/2946 [05:15<00:06, 108.18it/s] 77%|███████▋  | 2259/2946 [05:16<00:06, 105.56it/s] 77%|███████▋  | 2270/2946 [05:16<00:07, 95.88it/s]  77%|███████▋  | 2281/2946 [05:16<00:06, 98.30it/s] 78%|███████▊  | 2292/2946 [05:16<00:07, 84.85it/s] 78%|███████▊  | 2302/2946 [05:16<00:07, 86.48it/s] 78%|███████▊  | 2311/2946 [05:16<00:07, 83.47it/s] 79%|███████▉  | 2320/2946 [05:16<00:07, 81.67it/s] 79%|███████▉  | 2332/2946 [05:16<00:06, 91.30it/s] 79%|███████▉  | 2342/2946 [05:17<00:08, 72.79it/s] 80%|███████▉  | 2351/2946 [05:17<00:07, 74.99it/s] 80%|████████  | 2364/2946 [05:17<00:07, 78.19it/s] 81%|████████  | 2373/2946 [05:17<00:08, 66.48it/s] 81%|████████  | 2381/2946 [05:17<00:08, 67.07it/s] 81%|████████▏ | 2395/2946 [05:17<00:07, 75.70it/s] 82%|████████▏ | 2409/2946 [05:17<00:05, 89.75it/s] 82%|████████▏ | 2419/2946 [05:18<00:07, 71.32it/s] 82%|████████▏ | 2429/2946 [05:18<00:06, 75.67it/s] 83%|████████▎ | 2444/2946 [05:18<00:05, 91.23it/s] 83%|████████▎ | 2455/2946 [05:18<00:05, 87.12it/s] 84%|████████▍ | 2472/2946 [05:18<00:04, 106.48it/s] 84%|████████▍ | 2486/2946 [05:18<00:04, 113.06it/s] 84%|████████▍ | 2486/2946 [06:05<00:04, 113.06it/s](raylet) [2024-05-30 10:15:07,526 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92925100032; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 4x across cluster] 85%|████████▍ | 2499/2946 [06:05<07:47,  1.05s/it] 
 85%|████████▌ | 2507/2946 [06:05<06:06,  1.20it/s] 85%|████████▌ | 2518/2946 [06:05<04:17,  1.66it/s] 86%|████████▌ | 2528/2946 [06:05<03:04,  2.26it/s] 86%|████████▌ | 2538/2946 [06:05<02:11,  3.10it/s] 86%|████████▋ | 2548/2946 [06:05<01:32,  4.29it/s] 87%|████████▋ | 2559/2946 [06:05<01:03,  6.10it/s] 87%|████████▋ | 2569/2946 [06:06<00:45,  8.32it/s] 88%|████████▊ | 2579/2946 [06:06<00:32, 11.27it/s] 88%|████████▊ | 2589/2946 [06:06<00:23, 15.08it/s] 88%|████████▊ | 2604/2946 [06:06<00:14, 23.05it/s] 89%|████████▉ | 2615/2946 [06:06<00:11, 29.03it/s] 89%|████████▉ | 2626/2946 [06:06<00:08, 36.95it/s] 90%|████████▉ | 2649/2946 [06:06<00:04, 59.99it/s] 90%|█████████ | 2663/2946 [06:06<00:03, 71.50it/s] 91%|█████████ | 2681/2946 [06:06<00:02, 88.67it/s] 92%|█████████▏| 2696/2946 [06:07<00:02, 96.85it/s] 92%|█████████▏| 2710/2946 [06:07<00:02, 102.03it/s] 92%|█████████▏| 2724/2946 [06:07<00:02, 100.18it/s] 93%|█████████▎| 2737/2946 [06:07<00:02, 94.48it/s]  93%|█████████▎| 2748/2946 [06:07<00:02, 71.60it/s] 94%|█████████▎| 2757/2946 [06:07<00:02, 69.49it/s] 94%|█████████▍| 2766/2946 [06:07<00:02, 69.50it/s] 94%|█████████▍| 2774/2946 [06:08<00:02, 57.73it/s] 94%|█████████▍| 2781/2946 [06:08<00:02, 56.57it/s] 95%|█████████▍| 2788/2946 [06:08<00:03, 49.20it/s] 95%|█████████▌| 2802/2946 [06:08<00:02, 66.94it/s] 95%|█████████▌| 2810/2946 [06:08<00:02, 53.82it/s] 96%|█████████▌| 2817/2946 [06:09<00:02, 45.66it/s] 96%|█████████▌| 2827/2946 [06:09<00:02, 54.95it/s] 96%|█████████▋| 2840/2946 [06:09<00:01, 69.77it/s] 97%|█████████▋| 2854/2946 [06:09<00:01, 85.51it/s] 97%|█████████▋| 2870/2946 [06:09<00:00, 101.30it/s] 98%|█████████▊| 2884/2946 [06:09<00:00, 109.82it/s] 99%|█████████▊| 2905/2946 [06:09<00:00, 131.27it/s] 99%|█████████▉| 2926/2946 [06:09<00:00, 151.43it/s]100%|█████████▉| 2942/2946 [06:09<00:00, 150.74it/s]100%|██████████| 2946/2946 [06:09<00:00,  7.96it/s] 
(raylet) [2024-05-30 10:15:57,573 E 814203 814232] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-05-30_10-09-44_538603_661359 is over 95% full, available space: 92923240448; capacity: 1887507697664. Object creation will fail if spilling is required. [repeated 5x across cluster]
2024-05-30 10:16:39.923 | INFO     | __main__:split_data:130 - 70782 theorems in total
2024-05-30 10:16:39.924 | INFO     | __main__:split_randomly:79 - Splitting the theorems randomly
2024-05-30 10:16:39.950 | INFO     | __main__:split_by_premise:92 - Splitting the theorems by premises
2024-05-30 10:16:45.339 | INFO     | __main__:export_data:177 - dst path is data
2024-05-30 10:16:45.340 | INFO     | __main__:export_premises:141 - data/corpus.jsonl already exists. Removing it now.
2024-05-30 10:17:02.735 | INFO     | __main__:export_premises:159 - 109342 theorems/definitions from 2946 files saved to data/corpus.jsonl
2024-05-30 10:17:10.384 | INFO     | __main__:retrieve_proof:424 - 28392
2024-05-30 10:17:10.399 | INFO     | prover.proof_search:__init__:428 - Launching 5 workers with 1 GPUs.
2024-05-30 10:17:13,825	INFO worker.py:1740 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m

-------------------------------------------------------------------------------
main.py 531 <module>
main()

main.py 520 main
proofs = retrieve_proof(lean_git_repo)

main.py 437 retrieve_proof
prover = DistributedProver(

proof_search.py 430 __init__
provers = [

proof_search.py 431 <listcomp>
GpuProver.options(num_gpus=num_gpus_per_worker).remote(

actor.py 830 remote
return actor_cls._remote(args=args, kwargs=kwargs, **updated_options)

auto_init_hook.py 21 auto_init_wrapper
return fn(*args, **kwargs)

tracing_helper.py 388 _invocation_actor_class_remote_span
return method(self, args, kwargs, *_args, **_kwargs)

actor.py 1038 _remote
worker.function_actor_manager.export_actor_class(

function_manager.py 482 export_actor_class
serialized_actor_class = pickle_dumps(

serialization.py 66 pickle_dumps
return pickle.dumps(obj)

cloudpickle.py 1479 dumps
cp.dump(obj)

cloudpickle.py 1245 dump
return super().dump(obj)

cloudpickle.py 931 _file_reduce
raise pickle.PicklingError(

_pickle.PicklingError:
Cannot pickle files that are not opened for reading: w
